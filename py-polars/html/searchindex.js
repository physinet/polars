Search.setIndex({"docnames": ["index", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.n_unique", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arccosh", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arcsinh", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arctanh", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.clip_max", "reference/api/polars.Expr.clip_min", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.cosh", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.limit", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.nan_max", "reference/api/polars.Expr.nan_min", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.search_sorted", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shrink_dtype", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.sinh", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.tanh", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.top_k", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arccosh", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arcsinh", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arctanh", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_sort", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.cleared", "reference/api/polars.Series.clip", "reference/api/polars.Series.clip_max", "reference/api/polars.Series.clip_min", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cosh", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.flags", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_empty", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.nan_max", "reference/api/polars.Series.nan_min", "reference/api/polars.Series.new_from_index", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.reverse", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.search_sorted", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_dtype", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.sinh", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.tanh", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.top_k", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.coalesce", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.cumfold", "reference/api/polars.cumsum", "reference/api/polars.cut", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.datatypes.get_idx_type", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.round", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.tz_localize", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval", "reference/api/polars.internals.expr.list.ExprListNameSpace.first", "reference/api/polars.internals.expr.list.ExprListNameSpace.get", "reference/api/polars.internals.expr.list.ExprListNameSpace.head", "reference/api/polars.internals.expr.list.ExprListNameSpace.join", "reference/api/polars.internals.expr.list.ExprListNameSpace.last", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.list.ExprListNameSpace.max", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean", "reference/api/polars.internals.expr.list.ExprListNameSpace.min", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.n_chars", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.round", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.tz_localize", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year", "reference/api/polars.internals.series.list.ListNameSpace.arg_max", "reference/api/polars.internals.series.list.ListNameSpace.arg_min", "reference/api/polars.internals.series.list.ListNameSpace.concat", "reference/api/polars.internals.series.list.ListNameSpace.contains", "reference/api/polars.internals.series.list.ListNameSpace.diff", "reference/api/polars.internals.series.list.ListNameSpace.eval", "reference/api/polars.internals.series.list.ListNameSpace.first", "reference/api/polars.internals.series.list.ListNameSpace.get", "reference/api/polars.internals.series.list.ListNameSpace.head", "reference/api/polars.internals.series.list.ListNameSpace.join", "reference/api/polars.internals.series.list.ListNameSpace.last", "reference/api/polars.internals.series.list.ListNameSpace.lengths", "reference/api/polars.internals.series.list.ListNameSpace.max", "reference/api/polars.internals.series.list.ListNameSpace.mean", "reference/api/polars.internals.series.list.ListNameSpace.min", "reference/api/polars.internals.series.list.ListNameSpace.reverse", "reference/api/polars.internals.series.list.ListNameSpace.shift", "reference/api/polars.internals.series.list.ListNameSpace.slice", "reference/api/polars.internals.series.list.ListNameSpace.sort", "reference/api/polars.internals.series.list.ListNameSpace.sum", "reference/api/polars.internals.series.list.ListNameSpace.tail", "reference/api/polars.internals.series.list.ListNameSpace.to_struct", "reference/api/polars.internals.series.list.ListNameSpace.unique", "reference/api/polars.internals.series.string.StringNameSpace.concat", "reference/api/polars.internals.series.string.StringNameSpace.contains", "reference/api/polars.internals.series.string.StringNameSpace.count_match", "reference/api/polars.internals.series.string.StringNameSpace.decode", "reference/api/polars.internals.series.string.StringNameSpace.encode", "reference/api/polars.internals.series.string.StringNameSpace.ends_with", "reference/api/polars.internals.series.string.StringNameSpace.extract", "reference/api/polars.internals.series.string.StringNameSpace.extract_all", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match", "reference/api/polars.internals.series.string.StringNameSpace.lengths", "reference/api/polars.internals.series.string.StringNameSpace.ljust", "reference/api/polars.internals.series.string.StringNameSpace.lstrip", "reference/api/polars.internals.series.string.StringNameSpace.n_chars", "reference/api/polars.internals.series.string.StringNameSpace.replace", "reference/api/polars.internals.series.string.StringNameSpace.replace_all", "reference/api/polars.internals.series.string.StringNameSpace.rjust", "reference/api/polars.internals.series.string.StringNameSpace.rstrip", "reference/api/polars.internals.series.string.StringNameSpace.slice", "reference/api/polars.internals.series.string.StringNameSpace.split", "reference/api/polars.internals.series.string.StringNameSpace.split_exact", "reference/api/polars.internals.series.string.StringNameSpace.splitn", "reference/api/polars.internals.series.string.StringNameSpace.starts_with", "reference/api/polars.internals.series.string.StringNameSpace.strip", "reference/api/polars.internals.series.string.StringNameSpace.strptime", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.string.StringNameSpace.zfill", "reference/api/polars.internals.series.struct.StructNameSpace.field", "reference/api/polars.internals.series.struct.StructNameSpace.fields", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.ones", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.show_versions", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/api/polars.zeros", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expression", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.n_unique.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arccosh.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arcsinh.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arctanh.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.clip_max.rst", "reference/api/polars.Expr.clip_min.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.cosh.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.limit.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.nan_max.rst", "reference/api/polars.Expr.nan_min.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.search_sorted.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shrink_dtype.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.sinh.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.tanh.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.top_k.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arccosh.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arcsinh.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arctanh.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_sort.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.cleared.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clip_max.rst", "reference/api/polars.Series.clip_min.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cosh.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.flags.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_empty.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.nan_max.rst", "reference/api/polars.Series.nan_min.rst", "reference/api/polars.Series.new_from_index.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.reverse.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.search_sorted.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_dtype.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.sinh.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.tanh.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.top_k.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.coalesce.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.cumfold.rst", "reference/api/polars.cumsum.rst", "reference/api/polars.cut.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.datatypes.get_idx_type.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.round.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.tz_localize.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.n_chars.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.round.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.tz_localize.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.list.ListNameSpace.concat.rst", "reference/api/polars.internals.series.list.ListNameSpace.contains.rst", "reference/api/polars.internals.series.list.ListNameSpace.diff.rst", "reference/api/polars.internals.series.list.ListNameSpace.eval.rst", "reference/api/polars.internals.series.list.ListNameSpace.first.rst", "reference/api/polars.internals.series.list.ListNameSpace.get.rst", "reference/api/polars.internals.series.list.ListNameSpace.head.rst", "reference/api/polars.internals.series.list.ListNameSpace.join.rst", "reference/api/polars.internals.series.list.ListNameSpace.last.rst", "reference/api/polars.internals.series.list.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.list.ListNameSpace.max.rst", "reference/api/polars.internals.series.list.ListNameSpace.mean.rst", "reference/api/polars.internals.series.list.ListNameSpace.min.rst", "reference/api/polars.internals.series.list.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.list.ListNameSpace.shift.rst", "reference/api/polars.internals.series.list.ListNameSpace.slice.rst", "reference/api/polars.internals.series.list.ListNameSpace.sort.rst", "reference/api/polars.internals.series.list.ListNameSpace.sum.rst", "reference/api/polars.internals.series.list.ListNameSpace.tail.rst", "reference/api/polars.internals.series.list.ListNameSpace.to_struct.rst", "reference/api/polars.internals.series.list.ListNameSpace.unique.rst", "reference/api/polars.internals.series.string.StringNameSpace.concat.rst", "reference/api/polars.internals.series.string.StringNameSpace.contains.rst", "reference/api/polars.internals.series.string.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.decode.rst", "reference/api/polars.internals.series.string.StringNameSpace.encode.rst", "reference/api/polars.internals.series.string.StringNameSpace.ends_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.string.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.string.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.n_chars.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.string.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.slice.rst", "reference/api/polars.internals.series.string.StringNameSpace.split.rst", "reference/api/polars.internals.series.string.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.string.StringNameSpace.splitn.rst", "reference/api/polars.internals.series.string.StringNameSpace.starts_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.strip.rst", "reference/api/polars.internals.series.string.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.struct.StructNameSpace.field.rst", "reference/api/polars.internals.series.struct.StructNameSpace.fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.ones.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expression.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumsum", "polars.cut", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.datatypes.get_idx_type", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone", "polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "polars.internals.expr.datetime.ExprDateTimeNameSpace.round", "polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "polars.internals.expr.datetime.ExprDateTimeNameSpace.tz_localize", "polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "polars.internals.expr.list.ExprListNameSpace.arg_max", "polars.internals.expr.list.ExprListNameSpace.arg_min", "polars.internals.expr.list.ExprListNameSpace.concat", "polars.internals.expr.list.ExprListNameSpace.contains", "polars.internals.expr.list.ExprListNameSpace.diff", "polars.internals.expr.list.ExprListNameSpace.eval", "polars.internals.expr.list.ExprListNameSpace.first", "polars.internals.expr.list.ExprListNameSpace.get", "polars.internals.expr.list.ExprListNameSpace.head", "polars.internals.expr.list.ExprListNameSpace.join", "polars.internals.expr.list.ExprListNameSpace.last", "polars.internals.expr.list.ExprListNameSpace.lengths", "polars.internals.expr.list.ExprListNameSpace.max", "polars.internals.expr.list.ExprListNameSpace.mean", "polars.internals.expr.list.ExprListNameSpace.min", "polars.internals.expr.list.ExprListNameSpace.reverse", "polars.internals.expr.list.ExprListNameSpace.shift", "polars.internals.expr.list.ExprListNameSpace.slice", "polars.internals.expr.list.ExprListNameSpace.sort", "polars.internals.expr.list.ExprListNameSpace.sum", "polars.internals.expr.list.ExprListNameSpace.tail", "polars.internals.expr.list.ExprListNameSpace.to_struct", "polars.internals.expr.list.ExprListNameSpace.unique", "polars.internals.expr.meta.ExprMetaNameSpace.output_name", "polars.internals.expr.meta.ExprMetaNameSpace.pop", "polars.internals.expr.meta.ExprMetaNameSpace.root_names", "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "polars.internals.expr.string.ExprStringNameSpace.concat", "polars.internals.expr.string.ExprStringNameSpace.contains", "polars.internals.expr.string.ExprStringNameSpace.count_match", "polars.internals.expr.string.ExprStringNameSpace.decode", "polars.internals.expr.string.ExprStringNameSpace.encode", "polars.internals.expr.string.ExprStringNameSpace.ends_with", "polars.internals.expr.string.ExprStringNameSpace.extract", "polars.internals.expr.string.ExprStringNameSpace.extract_all", "polars.internals.expr.string.ExprStringNameSpace.json_path_match", "polars.internals.expr.string.ExprStringNameSpace.lengths", "polars.internals.expr.string.ExprStringNameSpace.ljust", "polars.internals.expr.string.ExprStringNameSpace.lstrip", "polars.internals.expr.string.ExprStringNameSpace.n_chars", "polars.internals.expr.string.ExprStringNameSpace.replace", "polars.internals.expr.string.ExprStringNameSpace.replace_all", "polars.internals.expr.string.ExprStringNameSpace.rjust", "polars.internals.expr.string.ExprStringNameSpace.rstrip", "polars.internals.expr.string.ExprStringNameSpace.slice", "polars.internals.expr.string.ExprStringNameSpace.split", "polars.internals.expr.string.ExprStringNameSpace.split_exact", "polars.internals.expr.string.ExprStringNameSpace.splitn", "polars.internals.expr.string.ExprStringNameSpace.starts_with", "polars.internals.expr.string.ExprStringNameSpace.strip", "polars.internals.expr.string.ExprStringNameSpace.strptime", "polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "polars.internals.expr.string.ExprStringNameSpace.zfill", "polars.internals.expr.struct.ExprStructNameSpace.field", "polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.internals.series.categorical.CatNameSpace.set_ordering", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone", "polars.internals.series.datetime.DateTimeNameSpace.day", "polars.internals.series.datetime.DateTimeNameSpace.days", "polars.internals.series.datetime.DateTimeNameSpace.epoch", "polars.internals.series.datetime.DateTimeNameSpace.hour", "polars.internals.series.datetime.DateTimeNameSpace.hours", "polars.internals.series.datetime.DateTimeNameSpace.iso_year", "polars.internals.series.datetime.DateTimeNameSpace.max", "polars.internals.series.datetime.DateTimeNameSpace.mean", "polars.internals.series.datetime.DateTimeNameSpace.median", "polars.internals.series.datetime.DateTimeNameSpace.microsecond", "polars.internals.series.datetime.DateTimeNameSpace.microseconds", "polars.internals.series.datetime.DateTimeNameSpace.millisecond", "polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "polars.internals.series.datetime.DateTimeNameSpace.min", "polars.internals.series.datetime.DateTimeNameSpace.minute", "polars.internals.series.datetime.DateTimeNameSpace.minutes", "polars.internals.series.datetime.DateTimeNameSpace.month", "polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "polars.internals.series.datetime.DateTimeNameSpace.offset_by", "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "polars.internals.series.datetime.DateTimeNameSpace.quarter", "polars.internals.series.datetime.DateTimeNameSpace.round", "polars.internals.series.datetime.DateTimeNameSpace.second", "polars.internals.series.datetime.DateTimeNameSpace.seconds", "polars.internals.series.datetime.DateTimeNameSpace.strftime", "polars.internals.series.datetime.DateTimeNameSpace.timestamp", "polars.internals.series.datetime.DateTimeNameSpace.truncate", "polars.internals.series.datetime.DateTimeNameSpace.tz_localize", "polars.internals.series.datetime.DateTimeNameSpace.week", "polars.internals.series.datetime.DateTimeNameSpace.weekday", "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.year", "polars.internals.series.list.ListNameSpace.arg_max", "polars.internals.series.list.ListNameSpace.arg_min", "polars.internals.series.list.ListNameSpace.concat", "polars.internals.series.list.ListNameSpace.contains", "polars.internals.series.list.ListNameSpace.diff", "polars.internals.series.list.ListNameSpace.eval", "polars.internals.series.list.ListNameSpace.first", "polars.internals.series.list.ListNameSpace.get", "polars.internals.series.list.ListNameSpace.head", "polars.internals.series.list.ListNameSpace.join", "polars.internals.series.list.ListNameSpace.last", "polars.internals.series.list.ListNameSpace.lengths", "polars.internals.series.list.ListNameSpace.max", "polars.internals.series.list.ListNameSpace.mean", "polars.internals.series.list.ListNameSpace.min", "polars.internals.series.list.ListNameSpace.reverse", "polars.internals.series.list.ListNameSpace.shift", "polars.internals.series.list.ListNameSpace.slice", "polars.internals.series.list.ListNameSpace.sort", "polars.internals.series.list.ListNameSpace.sum", "polars.internals.series.list.ListNameSpace.tail", "polars.internals.series.list.ListNameSpace.to_struct", "polars.internals.series.list.ListNameSpace.unique", "polars.internals.series.string.StringNameSpace.concat", "polars.internals.series.string.StringNameSpace.contains", "polars.internals.series.string.StringNameSpace.count_match", "polars.internals.series.string.StringNameSpace.decode", "polars.internals.series.string.StringNameSpace.encode", "polars.internals.series.string.StringNameSpace.ends_with", "polars.internals.series.string.StringNameSpace.extract", "polars.internals.series.string.StringNameSpace.extract_all", "polars.internals.series.string.StringNameSpace.json_path_match", "polars.internals.series.string.StringNameSpace.lengths", "polars.internals.series.string.StringNameSpace.ljust", "polars.internals.series.string.StringNameSpace.lstrip", "polars.internals.series.string.StringNameSpace.n_chars", "polars.internals.series.string.StringNameSpace.replace", "polars.internals.series.string.StringNameSpace.replace_all", "polars.internals.series.string.StringNameSpace.rjust", "polars.internals.series.string.StringNameSpace.rstrip", "polars.internals.series.string.StringNameSpace.slice", "polars.internals.series.string.StringNameSpace.split", "polars.internals.series.string.StringNameSpace.split_exact", "polars.internals.series.string.StringNameSpace.splitn", "polars.internals.series.string.StringNameSpace.starts_with", "polars.internals.series.string.StringNameSpace.strip", "polars.internals.series.string.StringNameSpace.strptime", "polars.internals.series.string.StringNameSpace.to_lowercase", "polars.internals.series.string.StringNameSpace.to_uppercase", "polars.internals.series.string.StringNameSpace.zfill", "polars.internals.series.struct.StructNameSpace.field", "polars.internals.series.struct.StructNameSpace.fields", "polars.internals.series.struct.StructNameSpace.rename_fields", "polars.internals.series.struct.StructNameSpace.to_frame", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.ones", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.select", "polars.show_versions", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "polars.zeros", "Config", "DataFrame", "Data Types", "Exceptions", "Expressions", "Functions", "API reference", "Input/output", "LazyFrame", "Series", "SQL", "Testing", "Utils"], "terms": {"api": [0, 20, 121, 555, 557, 668, 769, 785, 806, 808], "refer": [0, 105, 212, 421, 661, 753, 773, 774, 775], "input": [0, 193, 403, 483, 542, 635, 641, 733, 763, 764, 767, 773, 774, 775, 813], "output": [0, 20, 41, 42, 64, 66, 101, 109, 111, 112, 117, 121, 195, 196, 258, 279, 280, 288, 318, 328, 476, 483, 525, 634, 668, 763, 775, 791, 798, 813], "function": [0, 20, 29, 36, 59, 65, 66, 97, 100, 118, 121, 149, 156, 157, 158, 195, 196, 206, 218, 219, 220, 221, 222, 223, 225, 226, 227, 239, 253, 288, 292, 294, 328, 357, 366, 367, 368, 369, 427, 441, 442, 448, 453, 481, 483, 485, 496, 498, 542, 543, 557, 567, 600, 632, 668, 696, 728, 763, 773, 774, 775, 784, 799, 813], "seri": [0, 15, 19, 20, 26, 34, 36, 38, 39, 43, 46, 47, 49, 51, 56, 57, 60, 71, 72, 78, 86, 90, 95, 96, 105, 106, 120, 121, 122, 123, 124, 125, 126, 127, 130, 132, 137, 141, 142, 161, 162, 167, 168, 172, 174, 176, 177, 178, 179, 180, 182, 183, 184, 194, 195, 208, 212, 213, 214, 215, 216, 218, 231, 234, 237, 238, 249, 250, 251, 252, 257, 275, 301, 314, 315, 480, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 525, 542, 543, 545, 546, 549, 553, 556, 579, 580, 581, 583, 586, 589, 591, 593, 596, 600, 602, 605, 606, 609, 611, 612, 613, 615, 619, 620, 627, 628, 631, 632, 638, 655, 661, 665, 762, 763, 764, 765, 766, 767, 768, 769, 783, 789, 792, 793, 794, 795, 797, 798, 800, 804, 806, 813], "datafram": [0, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 264, 265, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 320, 322, 327, 358, 467, 468, 476, 480, 481, 484, 485, 488, 489, 490, 491, 492, 493, 497, 498, 527, 528, 541, 544, 545, 546, 547, 548, 549, 550, 551, 554, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 630, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 668, 669, 670, 671, 712, 728, 736, 738, 749, 750, 760, 772, 773, 774, 775, 776, 778, 779, 780, 782, 784, 786, 787, 788, 789, 793, 794, 796, 798, 799, 805, 811, 813], "lazyfram": [0, 19, 54, 165, 319, 321, 490, 491, 784, 785, 786, 787, 788, 796, 800, 813, 817], "express": [0, 20, 32, 34, 40, 62, 66, 74, 84, 106, 114, 117, 118, 120, 121, 138, 139, 140, 143, 149, 151, 159, 165, 172, 174, 178, 181, 186, 189, 194, 195, 196, 208, 209, 210, 215, 229, 230, 231, 233, 240, 246, 249, 255, 257, 260, 264, 272, 275, 295, 303, 304, 306, 314, 315, 316, 347, 348, 349, 357, 439, 446, 484, 485, 488, 489, 490, 495, 496, 497, 525, 528, 541, 542, 543, 544, 555, 557, 597, 616, 634, 635, 646, 661, 667, 668, 693, 712, 738, 762, 763, 770, 783, 789, 791, 793, 794, 798, 800, 801, 805, 813], "data": [0, 8, 11, 19, 21, 22, 31, 52, 54, 65, 69, 75, 76, 82, 89, 93, 94, 135, 173, 180, 182, 212, 228, 229, 239, 253, 255, 262, 263, 272, 294, 322, 327, 342, 346, 350, 362, 364, 421, 437, 438, 448, 453, 469, 470, 472, 474, 478, 480, 488, 491, 502, 532, 533, 538, 539, 545, 546, 547, 548, 549, 550, 580, 601, 609, 667, 672, 705, 773, 774, 775, 776, 777, 781, 782, 784, 791, 796, 797, 799, 800, 801, 813], "type": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 28, 30, 36, 41, 42, 43, 57, 77, 89, 93, 94, 96, 98, 99, 121, 135, 138, 139, 140, 159, 170, 174, 176, 178, 179, 195, 215, 253, 264, 270, 272, 279, 280, 288, 295, 300, 304, 311, 312, 322, 328, 342, 347, 348, 349, 364, 379, 381, 448, 469, 470, 472, 479, 483, 489, 490, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 541, 542, 545, 547, 550, 579, 581, 583, 586, 589, 591, 593, 596, 602, 620, 632, 656, 657, 658, 661, 668, 671, 673, 675, 678, 684, 686, 689, 692, 698, 716, 728, 748, 749, 750, 753, 762, 763, 769, 773, 774, 775, 777, 781, 784, 790, 796, 797, 798, 799, 800, 801, 803, 806, 813], "config": [0, 106, 315, 813], "except": [0, 53, 285, 470, 478, 813], "test": [0, 281, 287, 775, 813], "util": [0, 272, 813], "sql": [0, 52, 319, 782, 813], "classmethod": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 277, 297], "cfg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "str": [1, 3, 6, 7, 10, 11, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 38, 40, 41, 42, 44, 46, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 68, 70, 71, 72, 73, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 121, 151, 159, 162, 163, 165, 167, 172, 178, 181, 186, 196, 206, 209, 215, 217, 219, 220, 221, 222, 223, 225, 226, 227, 233, 234, 241, 242, 246, 249, 260, 265, 266, 267, 268, 269, 271, 275, 277, 278, 279, 280, 282, 284, 285, 288, 292, 297, 298, 300, 301, 303, 304, 305, 306, 311, 312, 315, 317, 318, 319, 320, 321, 322, 324, 342, 358, 372, 374, 376, 404, 407, 411, 412, 413, 424, 441, 442, 468, 480, 481, 482, 483, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 504, 515, 524, 525, 526, 527, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 581, 597, 600, 603, 605, 606, 613, 614, 618, 619, 620, 628, 631, 632, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 673, 693, 696, 699, 701, 702, 710, 716, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 798, 799, 800, 801, 804, 811, 816], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 815, 817], "set": [1, 2, 3, 4, 5, 6, 7, 10, 15, 16, 18, 19, 23, 43, 53, 59, 76, 83, 97, 109, 111, 112, 121, 170, 178, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 235, 239, 240, 264, 265, 272, 284, 285, 288, 292, 305, 318, 322, 327, 328, 376, 379, 390, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 442, 453, 454, 470, 501, 525, 547, 550, 609, 628, 655, 668, 705, 724, 747, 773, 774, 775, 776, 780, 784, 786, 787, 788, 796, 797, 799, 800, 801, 813], "previous": 1, "save": [1, 813], "share": [1, 29, 366, 480], "option": [1, 2, 3, 20, 27, 43, 53, 59, 62, 74, 76, 83, 90, 92, 97, 101, 106, 121, 134, 156, 157, 158, 169, 170, 187, 195, 218, 219, 220, 221, 222, 223, 225, 226, 227, 235, 239, 240, 269, 284, 285, 292, 304, 305, 315, 322, 328, 399, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 442, 449, 453, 468, 469, 481, 483, 498, 525, 526, 527, 546, 551, 600, 605, 628, 649, 654, 655, 660, 661, 668, 741, 746, 747, 752, 762, 763, 769, 773, 775, 776, 780, 782, 786, 787, 788, 790, 798, 799, 800, 801, 806, 813], "paramet": [1, 5, 6, 7, 10, 15, 16, 18, 19, 20, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 52, 53, 55, 57, 59, 61, 62, 64, 65, 66, 68, 70, 71, 72, 74, 76, 78, 80, 81, 83, 84, 85, 86, 87, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 120, 121, 130, 132, 134, 135, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 159, 162, 164, 165, 169, 170, 171, 174, 178, 187, 190, 192, 195, 196, 206, 207, 211, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 239, 240, 241, 242, 244, 248, 249, 254, 255, 258, 259, 260, 264, 268, 269, 272, 273, 274, 275, 277, 278, 279, 280, 281, 284, 285, 287, 288, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 309, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 324, 327, 328, 337, 340, 342, 347, 348, 349, 353, 354, 355, 356, 357, 359, 360, 365, 366, 367, 368, 369, 372, 373, 374, 375, 379, 380, 399, 401, 416, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 449, 453, 454, 455, 457, 460, 461, 468, 469, 470, 473, 474, 476, 477, 478, 479, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 504, 505, 512, 515, 524, 525, 526, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 560, 567, 568, 570, 579, 580, 581, 584, 597, 600, 604, 605, 606, 609, 613, 614, 615, 616, 618, 619, 620, 627, 628, 631, 632, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 693, 696, 700, 701, 702, 705, 709, 710, 711, 712, 714, 715, 716, 723, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 759, 762, 763, 764, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806], "json": [1, 3, 111, 112, 277, 297, 318, 646, 738, 778, 779, 787, 813], "string": [1, 3, 5, 6, 10, 36, 41, 42, 53, 84, 100, 101, 109, 111, 112, 114, 219, 220, 221, 222, 223, 225, 226, 227, 245, 264, 266, 267, 272, 277, 279, 280, 285, 318, 322, 458, 480, 489, 493, 501, 504, 522, 525, 544, 579, 597, 600, 605, 620, 671, 693, 696, 701, 716, 773, 774, 784, 798, 799, 801, 803, 813], "produc": [1, 634, 763, 800, 801], "reset": 2, "all": [2, 7, 10, 15, 18, 19, 27, 33, 49, 51, 54, 57, 59, 61, 62, 69, 83, 92, 101, 114, 119, 120, 133, 134, 136, 143, 149, 154, 159, 169, 170, 173, 176, 179, 183, 184, 189, 191, 195, 196, 201, 205, 209, 212, 217, 234, 240, 245, 246, 258, 269, 274, 288, 292, 305, 322, 341, 343, 357, 363, 385, 397, 421, 454, 458, 489, 490, 491, 502, 525, 541, 545, 547, 549, 550, 551, 616, 620, 630, 640, 645, 646, 651, 652, 712, 716, 726, 732, 737, 738, 743, 744, 773, 774, 775, 776, 784, 786, 787, 793, 798, 799, 801, 811, 813], "default": [2, 10, 18, 19, 29, 40, 42, 43, 53, 59, 66, 76, 107, 108, 109, 110, 111, 112, 113, 155, 170, 174, 192, 203, 204, 207, 212, 229, 235, 278, 280, 285, 292, 318, 322, 365, 366, 379, 412, 413, 416, 421, 438, 457, 477, 486, 545, 546, 548, 549, 550, 579, 628, 632, 644, 655, 661, 671, 724, 728, 736, 747, 762, 769, 773, 774, 784, 791, 798, 799, 800, 801, 806], "state": [2, 264, 272, 295, 304, 490, 496, 536, 813], "note": [2, 10, 19, 20, 32, 40, 41, 42, 52, 53, 57, 62, 74, 91, 93, 97, 98, 101, 147, 148, 152, 153, 180, 182, 219, 220, 221, 222, 223, 225, 226, 227, 239, 247, 264, 272, 273, 279, 280, 281, 287, 304, 311, 355, 356, 441, 442, 448, 453, 459, 470, 525, 548, 550, 567, 597, 600, 605, 616, 647, 650, 661, 693, 712, 739, 742, 769, 773, 782, 799, 800, 801, 806, 808], "thi": [2, 18, 19, 20, 27, 29, 31, 36, 40, 41, 42, 43, 47, 49, 51, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 67, 68, 69, 76, 78, 81, 83, 85, 86, 89, 91, 93, 94, 97, 98, 100, 101, 102, 103, 107, 109, 111, 113, 118, 120, 121, 130, 132, 143, 149, 159, 161, 162, 167, 172, 173, 174, 178, 189, 194, 195, 203, 204, 206, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 231, 233, 234, 235, 240, 241, 242, 254, 255, 256, 257, 258, 261, 264, 269, 272, 278, 279, 280, 282, 285, 288, 292, 295, 301, 303, 304, 305, 311, 316, 317, 318, 321, 322, 327, 328, 337, 340, 357, 362, 364, 366, 371, 372, 378, 383, 384, 389, 390, 396, 398, 400, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 434, 435, 436, 438, 441, 442, 443, 444, 446, 447, 448, 449, 454, 455, 457, 459, 466, 468, 469, 470, 471, 473, 474, 477, 478, 480, 481, 484, 485, 490, 491, 492, 494, 496, 497, 498, 523, 541, 542, 543, 545, 546, 547, 548, 549, 550, 554, 555, 557, 579, 580, 581, 587, 597, 600, 606, 609, 616, 620, 634, 635, 648, 653, 664, 665, 668, 671, 672, 673, 679, 693, 696, 702, 705, 712, 716, 740, 745, 756, 757, 760, 769, 773, 774, 775, 776, 780, 784, 785, 786, 787, 788, 789, 794, 796, 797, 798, 799, 800, 801, 803, 806, 808, 813, 814, 815], "method": [2, 19, 27, 48, 62, 68, 108, 110, 114, 118, 133, 136, 154, 211, 212, 219, 220, 221, 222, 223, 225, 226, 227, 245, 256, 269, 283, 296, 322, 328, 341, 343, 363, 382, 420, 421, 432, 458, 472, 480, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 568, 606, 702, 771, 773, 774, 775, 798, 811, 813, 816], "oper": [2, 20, 31, 36, 40, 47, 54, 62, 64, 69, 89, 93, 94, 97, 100, 116, 144, 145, 146, 147, 148, 149, 212, 214, 272, 278, 281, 284, 287, 327, 353, 354, 355, 356, 357, 421, 423, 466, 469, 470, 478, 480, 481, 482, 491, 528, 532, 533, 545, 546, 547, 548, 549, 550, 555, 567, 637], "remov": [2, 25, 159, 268, 541, 649, 654, 660, 741, 746, 752], "from": [2, 19, 24, 25, 29, 31, 41, 42, 53, 54, 59, 70, 74, 76, 78, 97, 98, 100, 101, 109, 144, 159, 173, 187, 203, 204, 207, 229, 241, 242, 256, 258, 268, 269, 272, 277, 279, 280, 292, 297, 298, 301, 311, 316, 327, 362, 366, 384, 399, 412, 413, 414, 416, 438, 476, 479, 488, 524, 525, 526, 527, 541, 545, 546, 547, 548, 549, 550, 554, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 644, 661, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 736, 762, 772, 773, 774, 775, 776, 778, 779, 780, 782, 784, 786, 787, 788, 791, 796, 797, 798, 799, 800, 801], "environ": [2, 18], "ani": [2, 19, 20, 27, 31, 33, 34, 36, 64, 65, 74, 75, 90, 91, 93, 94, 100, 109, 121, 135, 164, 178, 195, 216, 218, 233, 241, 249, 269, 274, 294, 322, 327, 328, 374, 390, 425, 427, 442, 461, 469, 470, 483, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 542, 546, 547, 548, 550, 601, 613, 616, 637, 661, 697, 709, 712, 753, 762, 773, 774, 784, 791, 798, 800, 801], "class": [2, 19, 28, 77, 93, 94, 114, 270, 300, 322, 364, 469, 470, 480, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 549, 798, 799, 813, 815, 817], "local": [2, 417, 418, 606, 702], "flag": [2, 106, 231, 288, 315, 322, 443, 798], "back": [2, 19, 31, 327], "valu": [2, 5, 18, 20, 27, 31, 32, 33, 37, 41, 42, 43, 48, 56, 57, 58, 59, 60, 62, 64, 66, 67, 68, 70, 76, 80, 81, 84, 85, 86, 90, 100, 101, 102, 109, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 149, 150, 152, 153, 156, 157, 158, 160, 162, 163, 164, 166, 168, 169, 170, 172, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 188, 189, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 232, 233, 237, 238, 239, 241, 242, 243, 247, 249, 250, 251, 252, 255, 256, 257, 258, 269, 273, 274, 279, 280, 282, 283, 289, 290, 291, 292, 293, 296, 298, 302, 303, 306, 307, 308, 313, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 344, 347, 348, 349, 351, 352, 357, 358, 359, 361, 362, 366, 367, 368, 369, 372, 373, 374, 376, 377, 378, 379, 382, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 404, 405, 407, 408, 410, 412, 413, 414, 415, 416, 419, 420, 421, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 445, 446, 451, 452, 453, 459, 461, 462, 463, 464, 472, 475, 476, 478, 479, 488, 491, 493, 494, 496, 497, 498, 512, 513, 521, 542, 543, 547, 549, 558, 559, 561, 562, 563, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 579, 582, 594, 598, 607, 611, 612, 615, 617, 618, 619, 621, 623, 624, 625, 627, 630, 631, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 651, 652, 655, 657, 658, 659, 664, 667, 671, 674, 690, 694, 703, 707, 708, 711, 713, 714, 715, 717, 719, 720, 721, 723, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 747, 749, 750, 751, 756, 762, 764, 765, 766, 767, 768, 773, 774, 782, 783, 784, 794, 796, 797, 798, 799, 800, 801, 803, 805], "exampl": [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 265, 269, 270, 271, 275, 278, 280, 282, 283, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 420, 421, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 449, 450, 451, 452, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 488, 489, 491, 492, 493, 497, 498, 525, 527, 528, 541, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 715, 716, 718, 723, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 753, 762, 774, 775, 782, 784, 785, 789, 790, 793, 794, 796, 797, 798, 799, 800, 801, 805], "pl": [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 265, 269, 270, 271, 275, 278, 280, 282, 283, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 488, 489, 491, 492, 493, 494, 497, 498, 524, 525, 526, 527, 528, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 715, 716, 718, 723, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 753, 761, 762, 771, 773, 774, 775, 782, 784, 785, 789, 790, 793, 794, 796, 797, 798, 799, 800, 801, 805, 811, 814], "current": [3, 18, 21, 22, 106, 207, 262, 263, 315, 346, 350, 416, 600, 696, 813], "activ": [4, 8, 9, 11, 12, 13, 14, 17, 616, 712], "bool": [4, 6, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 33, 34, 36, 37, 39, 40, 41, 46, 47, 49, 50, 51, 53, 57, 64, 66, 76, 82, 84, 90, 94, 97, 98, 99, 101, 103, 106, 109, 111, 113, 118, 119, 120, 130, 132, 135, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 162, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 195, 212, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 233, 234, 239, 241, 242, 254, 255, 258, 262, 264, 266, 272, 274, 275, 278, 279, 284, 285, 288, 295, 304, 306, 311, 312, 315, 318, 322, 325, 326, 327, 328, 337, 340, 342, 346, 353, 354, 355, 356, 357, 365, 367, 368, 369, 372, 375, 376, 378, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 417, 418, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 442, 443, 448, 453, 455, 469, 470, 473, 474, 476, 478, 483, 484, 485, 486, 488, 490, 491, 496, 545, 549, 559, 561, 563, 601, 614, 616, 629, 639, 641, 643, 651, 652, 656, 657, 659, 661, 665, 666, 697, 710, 712, 725, 731, 733, 735, 743, 744, 748, 749, 751, 753, 762, 773, 774, 776, 778, 780, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 800, 801, 803, 805], "true": [4, 6, 8, 9, 11, 12, 13, 14, 15, 17, 18, 21, 22, 24, 27, 33, 36, 37, 39, 41, 47, 49, 50, 51, 53, 57, 61, 62, 64, 66, 67, 84, 90, 97, 98, 99, 100, 101, 106, 109, 113, 116, 118, 119, 120, 121, 135, 144, 145, 146, 147, 148, 155, 156, 157, 158, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 214, 224, 229, 234, 239, 241, 242, 249, 254, 255, 258, 262, 264, 266, 269, 272, 274, 278, 279, 284, 285, 288, 295, 304, 311, 312, 315, 322, 325, 326, 327, 328, 338, 342, 345, 346, 365, 367, 368, 369, 375, 378, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 409, 417, 418, 423, 433, 440, 453, 455, 470, 473, 478, 479, 483, 484, 485, 490, 491, 525, 545, 549, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 600, 601, 605, 614, 639, 641, 643, 646, 656, 657, 659, 661, 665, 666, 696, 697, 701, 731, 733, 735, 738, 748, 749, 751, 753, 773, 774, 775, 776, 780, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 800, 801, 805], "us": [4, 5, 7, 10, 15, 16, 19, 20, 32, 33, 36, 41, 42, 53, 57, 59, 61, 62, 66, 74, 76, 84, 86, 97, 98, 101, 109, 113, 114, 116, 121, 149, 152, 153, 155, 156, 157, 158, 159, 164, 165, 173, 187, 195, 199, 212, 214, 216, 219, 220, 221, 222, 223, 225, 226, 227, 229, 231, 234, 235, 239, 241, 242, 264, 273, 274, 278, 279, 280, 281, 285, 287, 292, 306, 311, 314, 322, 328, 357, 365, 367, 368, 369, 373, 374, 378, 399, 421, 423, 425, 438, 441, 442, 443, 447, 453, 457, 461, 469, 470, 477, 478, 480, 483, 484, 486, 489, 493, 497, 523, 525, 546, 548, 550, 555, 557, 567, 579, 609, 616, 632, 641, 642, 643, 647, 648, 653, 655, 657, 659, 661, 668, 671, 705, 712, 728, 733, 734, 739, 740, 745, 747, 749, 753, 762, 764, 767, 769, 773, 774, 775, 776, 780, 782, 783, 784, 785, 786, 787, 788, 794, 798, 799, 800, 801, 806, 811], "ascii": [4, 10, 648, 650, 653, 664, 740, 742, 745, 756], "charact": [4, 5, 10, 16, 109, 167, 295, 597, 647, 648, 653, 654, 656, 657, 660, 664, 693, 739, 740, 741, 745, 746, 748, 749, 752, 756, 773, 774, 784], "print": [4, 5, 7, 9, 15, 28, 40, 54, 172, 282, 390, 427, 790], "tabl": [4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 19, 66, 89, 94, 100, 321, 545, 567, 773, 774, 784], "outlin": 4, "fals": [4, 6, 8, 9, 11, 12, 13, 14, 15, 18, 19, 21, 22, 24, 36, 37, 39, 40, 41, 46, 47, 49, 50, 51, 53, 57, 61, 62, 64, 66, 67, 76, 82, 84, 90, 94, 97, 98, 101, 103, 106, 111, 113, 118, 119, 130, 132, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 195, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 234, 239, 241, 242, 254, 255, 258, 262, 264, 266, 272, 278, 279, 284, 285, 288, 295, 304, 306, 315, 322, 327, 337, 340, 342, 345, 346, 353, 354, 355, 356, 357, 365, 367, 368, 369, 375, 383, 385, 387, 390, 391, 392, 393, 394, 395, 397, 399, 409, 417, 418, 421, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 443, 448, 453, 455, 469, 470, 473, 474, 476, 478, 479, 484, 485, 486, 490, 496, 525, 558, 559, 561, 562, 563, 565, 569, 601, 614, 616, 629, 639, 641, 643, 651, 652, 656, 657, 659, 661, 697, 712, 725, 731, 733, 735, 743, 744, 748, 749, 751, 753, 762, 773, 774, 775, 776, 780, 783, 784, 787, 788, 791, 793, 796, 797, 798, 799, 800, 801, 805], "revert": 4, "utf8": [4, 10, 28, 29, 36, 77, 93, 161, 167, 270, 300, 371, 398, 470, 480, 493, 620, 638, 642, 644, 645, 646, 647, 655, 656, 657, 658, 661, 699, 716, 730, 734, 736, 737, 738, 739, 747, 748, 749, 750, 753, 773, 774, 784, 798], "df": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 262, 265, 269, 271, 278, 280, 282, 283, 284, 289, 290, 291, 292, 293, 294, 296, 301, 302, 303, 305, 307, 308, 312, 313, 314, 317, 468, 481, 484, 485, 488, 489, 492, 493, 497, 527, 528, 541, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 630, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 668, 669, 670, 671, 712, 728, 736, 738, 744, 749, 750, 782, 784, 789, 793, 794, 799, 800, 801, 805, 811], "abc": [4, 8, 9, 11, 12, 13, 14, 15, 651, 743], "1": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 265, 269, 270, 271, 275, 278, 279, 280, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 420, 421, 424, 425, 426, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 488, 489, 491, 492, 493, 497, 498, 524, 525, 526, 527, 528, 541, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 714, 715, 718, 723, 724, 727, 728, 730, 736, 738, 749, 750, 753, 762, 769, 770, 771, 773, 774, 784, 785, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 801, 804, 805], "0": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 24, 25, 28, 32, 33, 36, 37, 39, 41, 43, 47, 52, 56, 57, 58, 60, 61, 62, 63, 67, 68, 72, 76, 77, 81, 83, 84, 85, 86, 92, 95, 97, 98, 100, 101, 102, 105, 106, 107, 113, 115, 116, 122, 123, 124, 125, 126, 127, 130, 131, 132, 135, 137, 141, 142, 144, 149, 152, 153, 156, 157, 158, 160, 163, 164, 168, 170, 173, 176, 179, 180, 182, 183, 184, 187, 192, 193, 195, 197, 198, 199, 200, 205, 207, 208, 211, 212, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 234, 236, 237, 238, 239, 243, 244, 247, 251, 252, 253, 259, 262, 270, 284, 291, 295, 296, 300, 303, 304, 307, 313, 314, 315, 317, 322, 329, 330, 331, 332, 333, 334, 335, 337, 339, 342, 344, 346, 351, 352, 357, 358, 360, 365, 367, 368, 369, 373, 377, 379, 387, 389, 391, 392, 393, 394, 395, 399, 405, 406, 416, 420, 421, 427, 429, 430, 432, 433, 434, 436, 438, 450, 451, 452, 456, 457, 463, 464, 467, 471, 472, 477, 478, 484, 485, 488, 492, 496, 497, 498, 528, 543, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 582, 585, 589, 591, 592, 596, 598, 601, 602, 608, 611, 612, 616, 618, 624, 644, 664, 668, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 697, 698, 704, 712, 714, 730, 736, 738, 756, 771, 773, 774, 775, 776, 780, 782, 784, 785, 786, 787, 788, 790, 794, 798, 799, 800, 801, 805, 806], "2": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 115, 116, 117, 119, 120, 121, 128, 130, 131, 132, 134, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 262, 265, 269, 270, 271, 275, 278, 280, 282, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 330, 334, 335, 336, 337, 338, 339, 344, 345, 350, 351, 354, 355, 356, 357, 358, 360, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 420, 421, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 449, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 485, 488, 489, 491, 492, 493, 497, 498, 527, 528, 541, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 583, 585, 586, 589, 591, 592, 593, 594, 596, 597, 599, 600, 601, 602, 605, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 640, 643, 645, 646, 647, 650, 651, 652, 655, 657, 658, 659, 662, 663, 665, 666, 668, 669, 670, 671, 677, 681, 682, 688, 690, 695, 696, 697, 701, 704, 706, 711, 712, 715, 716, 718, 723, 724, 727, 728, 730, 732, 737, 738, 742, 743, 744, 749, 750, 762, 782, 784, 785, 789, 790, 793, 794, 796, 797, 800, 805], "5": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 24, 30, 31, 32, 33, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 53, 55, 59, 61, 62, 66, 67, 68, 71, 75, 79, 87, 88, 89, 90, 91, 96, 98, 100, 101, 104, 105, 106, 107, 109, 116, 135, 137, 138, 149, 151, 158, 159, 161, 162, 168, 171, 174, 177, 180, 182, 183, 184, 191, 206, 207, 209, 211, 212, 216, 217, 218, 219, 220, 222, 226, 228, 236, 246, 248, 250, 254, 262, 271, 278, 280, 281, 283, 287, 290, 291, 292, 302, 303, 305, 307, 308, 309, 310, 314, 315, 317, 327, 330, 334, 337, 345, 347, 353, 357, 358, 360, 369, 372, 382, 409, 416, 417, 418, 420, 421, 427, 428, 429, 431, 432, 435, 438, 440, 450, 456, 473, 479, 485, 492, 497, 498, 527, 528, 541, 545, 547, 548, 549, 550, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 583, 601, 602, 607, 616, 619, 624, 630, 631, 640, 646, 647, 650, 664, 668, 669, 670, 671, 673, 674, 675, 697, 698, 703, 704, 712, 715, 718, 727, 732, 738, 739, 774, 790, 794, 800, 801], "xyz": [4, 8, 9, 11, 12, 13, 14, 15, 468, 640, 645, 732, 737], "shape": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 76, 78, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 269, 271, 275, 278, 280, 283, 284, 289, 290, 291, 292, 293, 294, 296, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 342, 344, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 385, 387, 390, 391, 392, 393, 394, 395, 397, 401, 408, 416, 417, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 445, 449, 450, 451, 452, 454, 455, 456, 460, 461, 462, 463, 464, 467, 468, 472, 474, 475, 476, 479, 480, 481, 485, 488, 489, 491, 492, 493, 497, 498, 525, 527, 528, 539, 541, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 711, 712, 715, 716, 718, 723, 724, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 753, 784, 785, 789, 793, 794, 800, 801, 805], "3": [4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 116, 117, 118, 121, 130, 131, 132, 134, 135, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 196, 201, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 239, 241, 242, 243, 246, 248, 249, 250, 256, 257, 258, 260, 262, 265, 269, 270, 271, 275, 278, 279, 280, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 322, 324, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 342, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 420, 421, 424, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 449, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 485, 488, 489, 491, 492, 493, 497, 498, 525, 528, 541, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 580, 582, 583, 584, 585, 592, 594, 598, 599, 600, 601, 604, 605, 607, 608, 609, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 639, 641, 642, 643, 644, 647, 649, 650, 654, 655, 656, 657, 658, 659, 660, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 684, 686, 687, 688, 690, 692, 694, 696, 697, 700, 701, 704, 705, 711, 712, 715, 718, 723, 724, 727, 728, 733, 734, 735, 736, 739, 742, 747, 751, 762, 775, 784, 785, 789, 790, 793, 794, 796, 797, 805], "f64": [4, 6, 8, 9, 11, 12, 13, 14, 15, 21, 22, 24, 25, 27, 28, 32, 33, 36, 39, 47, 52, 53, 57, 58, 67, 68, 83, 84, 85, 98, 102, 105, 106, 115, 122, 123, 124, 125, 126, 127, 135, 137, 141, 142, 149, 152, 153, 155, 156, 157, 158, 159, 160, 168, 173, 180, 182, 183, 184, 187, 192, 193, 198, 199, 207, 208, 211, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 237, 238, 239, 243, 244, 251, 252, 259, 262, 269, 284, 290, 291, 296, 307, 313, 314, 315, 329, 330, 331, 332, 333, 334, 344, 351, 352, 357, 358, 368, 369, 373, 377, 416, 427, 429, 430, 432, 433, 434, 436, 437, 451, 452, 456, 463, 464, 488, 492, 498, 541, 559, 561, 562, 563, 564, 565, 568, 569, 601, 624, 697, 785, 800], "n": [5, 7, 15, 20, 31, 41, 44, 55, 64, 76, 87, 88, 94, 149, 150, 162, 171, 190, 207, 215, 229, 239, 248, 250, 254, 264, 281, 287, 309, 310, 322, 327, 357, 359, 372, 380, 401, 416, 438, 453, 457, 460, 462, 465, 473, 477, 504, 505, 525, 553, 554, 560, 570, 580, 584, 604, 609, 615, 619, 631, 657, 658, 669, 670, 672, 676, 700, 705, 711, 715, 727, 749, 750, 769, 773, 774, 783, 784, 795, 806], "int": [5, 7, 15, 16, 20, 29, 32, 33, 35, 43, 44, 45, 47, 53, 55, 56, 57, 60, 61, 62, 72, 74, 76, 79, 80, 81, 83, 85, 86, 87, 88, 95, 100, 102, 104, 107, 109, 113, 134, 138, 139, 140, 149, 150, 156, 157, 158, 162, 163, 164, 169, 170, 171, 174, 190, 207, 208, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 240, 244, 248, 249, 250, 254, 259, 272, 273, 274, 281, 285, 287, 295, 302, 303, 305, 307, 309, 310, 313, 317, 335, 336, 342, 345, 347, 348, 349, 357, 359, 366, 367, 368, 369, 372, 373, 374, 379, 380, 400, 401, 404, 405, 407, 409, 410, 412, 413, 414, 415, 416, 419, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 449, 454, 457, 459, 460, 461, 462, 473, 477, 484, 488, 494, 497, 524, 526, 527, 547, 550, 553, 554, 560, 570, 614, 615, 618, 619, 627, 628, 631, 632, 644, 648, 653, 655, 657, 658, 664, 665, 666, 669, 670, 710, 711, 714, 715, 723, 724, 727, 728, 736, 740, 745, 747, 749, 750, 756, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 780, 782, 783, 784, 786, 787, 788, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 804, 806], "number": [5, 7, 15, 16, 29, 30, 32, 33, 44, 54, 55, 61, 62, 76, 80, 81, 87, 100, 109, 113, 134, 143, 149, 150, 156, 157, 158, 162, 164, 169, 171, 180, 182, 189, 190, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 235, 248, 254, 271, 272, 273, 274, 281, 287, 295, 302, 303, 309, 357, 359, 366, 367, 368, 369, 372, 374, 380, 389, 401, 409, 410, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 445, 446, 449, 457, 460, 473, 477, 494, 537, 553, 554, 558, 560, 570, 585, 587, 592, 594, 601, 607, 608, 610, 615, 619, 627, 631, 632, 647, 650, 657, 658, 669, 670, 677, 679, 688, 690, 697, 703, 704, 706, 711, 715, 723, 727, 728, 739, 742, 749, 750, 769, 773, 774, 775, 784, 787, 791, 795, 799, 800, 806], "format": [6, 10, 30, 59, 109, 111, 271, 277, 292, 318, 600, 603, 605, 661, 699, 753, 772, 773, 774, 778, 784, 785], "liter": [6, 10, 56, 57, 60, 61, 64, 86, 90, 118, 119, 213, 325, 326, 441, 442, 484, 485, 524, 525, 526, 639, 651, 652, 731, 743, 744, 762, 775, 783, 793, 801, 805], "left": [6, 41, 42, 52, 53, 156, 157, 158, 173, 219, 220, 221, 222, 223, 225, 226, 227, 253, 279, 280, 284, 285, 367, 368, 369, 472, 488, 496, 525, 543, 648, 664, 740, 756, 796, 797], "center": [6, 156, 157, 158, 218, 219, 220, 221, 222, 223, 225, 226, 227, 367, 368, 369, 427, 428, 429, 430, 431, 432, 434, 435, 436], "right": [6, 8, 41, 42, 52, 53, 156, 157, 158, 219, 220, 221, 222, 223, 225, 226, 227, 239, 279, 280, 284, 285, 367, 368, 369, 453, 488, 525, 653, 745, 773, 774, 796, 797], "cell": 6, "align": [6, 664, 756], "rais": [6, 10, 74, 208, 470, 478, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 634, 661, 753, 762, 796, 797], "keyerror": [6, 10], "recognis": [6, 10, 798], "column_abc": 6, "column_xyz": 6, "column": [7, 8, 11, 12, 14, 19, 20, 25, 26, 27, 28, 29, 30, 35, 38, 40, 41, 42, 46, 47, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 70, 71, 72, 77, 78, 84, 85, 86, 90, 92, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 118, 119, 121, 130, 132, 159, 165, 186, 206, 209, 213, 215, 219, 220, 221, 222, 223, 225, 226, 227, 234, 241, 242, 246, 260, 268, 269, 270, 271, 278, 279, 280, 284, 285, 288, 289, 290, 291, 292, 293, 296, 298, 300, 301, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 322, 325, 326, 447, 468, 480, 481, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 524, 526, 531, 535, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 555, 567, 582, 585, 587, 588, 590, 592, 594, 595, 598, 599, 601, 607, 608, 610, 613, 634, 636, 657, 658, 661, 674, 677, 679, 683, 685, 688, 690, 691, 694, 695, 697, 703, 704, 706, 709, 749, 750, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 776, 777, 780, 781, 782, 784, 786, 787, 788, 791, 792, 793, 794, 795, 796, 800, 804, 805, 813], "If": [7, 19, 20, 31, 41, 42, 53, 59, 62, 64, 76, 83, 93, 94, 97, 109, 111, 112, 113, 121, 138, 139, 140, 165, 187, 195, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 235, 239, 240, 241, 242, 254, 279, 280, 284, 285, 288, 292, 305, 318, 322, 327, 328, 347, 348, 349, 378, 399, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 443, 453, 454, 466, 470, 473, 478, 480, 481, 483, 484, 486, 494, 498, 525, 546, 548, 549, 550, 567, 628, 647, 650, 655, 656, 657, 658, 661, 668, 724, 739, 742, 747, 748, 749, 750, 753, 762, 773, 774, 775, 776, 780, 782, 784, 786, 787, 788, 791], "i": [7, 19, 20, 27, 29, 37, 40, 41, 42, 43, 47, 48, 50, 53, 54, 57, 59, 62, 64, 66, 74, 76, 83, 86, 89, 91, 97, 98, 100, 101, 106, 109, 111, 112, 118, 119, 120, 121, 149, 156, 157, 158, 161, 167, 170, 172, 174, 187, 195, 206, 212, 214, 216, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 235, 239, 240, 241, 242, 258, 264, 269, 272, 278, 279, 280, 283, 285, 288, 292, 295, 304, 305, 311, 315, 318, 322, 326, 327, 328, 357, 366, 367, 368, 369, 371, 378, 379, 382, 383, 384, 386, 396, 398, 399, 421, 423, 425, 438, 439, 440, 441, 442, 443, 453, 454, 457, 466, 470, 476, 477, 478, 480, 484, 486, 490, 491, 492, 494, 496, 497, 498, 523, 525, 531, 532, 534, 535, 543, 545, 548, 549, 550, 554, 555, 557, 567, 597, 600, 616, 618, 628, 635, 640, 644, 645, 646, 648, 653, 655, 658, 661, 664, 668, 693, 696, 712, 714, 724, 732, 736, 737, 738, 740, 745, 747, 750, 756, 762, 773, 774, 776, 780, 782, 784, 785, 786, 787, 788, 789, 794, 798, 799, 800, 801, 808], "rang": [7, 29, 41, 173, 366, 416, 484, 492, 498, 524, 525, 526, 582, 594, 598, 599, 600, 605, 607, 674, 690, 694, 695, 696, 701, 703, 782], "100": [7, 428, 429, 431, 484, 664, 773, 774, 784, 787], "98": [7, 47, 241, 242, 249], "99": [7, 32, 33, 47, 50, 116, 162, 164, 241, 242, 249, 365, 372, 488], "i64": [7, 11, 19, 20, 21, 22, 23, 25, 27, 28, 30, 31, 33, 34, 38, 39, 40, 41, 42, 44, 46, 47, 48, 52, 53, 55, 56, 59, 60, 64, 65, 66, 67, 70, 71, 72, 73, 76, 78, 80, 81, 83, 84, 86, 87, 88, 90, 95, 97, 98, 99, 100, 101, 103, 105, 106, 107, 117, 120, 121, 134, 138, 145, 146, 147, 148, 150, 151, 159, 161, 162, 164, 165, 166, 169, 171, 172, 173, 174, 177, 180, 182, 183, 184, 186, 188, 191, 194, 195, 196, 197, 200, 201, 206, 207, 209, 210, 213, 214, 216, 217, 229, 231, 232, 234, 235, 236, 240, 241, 246, 247, 248, 249, 250, 255, 257, 260, 262, 269, 271, 275, 278, 280, 283, 284, 289, 292, 293, 294, 301, 302, 303, 305, 308, 310, 312, 314, 315, 317, 322, 327, 328, 347, 350, 353, 354, 355, 356, 358, 371, 372, 374, 375, 380, 382, 390, 401, 408, 424, 428, 431, 435, 438, 441, 442, 445, 449, 450, 454, 455, 460, 461, 462, 468, 474, 476, 479, 481, 489, 491, 493, 497, 528, 541, 545, 546, 547, 548, 549, 550, 555, 556, 557, 559, 560, 561, 562, 565, 567, 569, 570, 579, 583, 584, 586, 589, 591, 593, 596, 602, 604, 616, 617, 618, 621, 623, 625, 626, 629, 630, 633, 651, 652, 666, 668, 669, 670, 671, 673, 675, 676, 678, 684, 686, 689, 692, 698, 700, 712, 784, 789, 793, 794, 801, 805], "10": [7, 22, 31, 39, 41, 42, 44, 46, 47, 48, 61, 65, 67, 71, 72, 87, 106, 109, 113, 120, 128, 129, 130, 131, 132, 138, 143, 148, 150, 152, 153, 167, 170, 171, 173, 178, 189, 190, 193, 207, 220, 240, 248, 279, 280, 283, 294, 308, 315, 328, 347, 365, 371, 380, 390, 401, 403, 416, 441, 442, 460, 498, 525, 528, 553, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 609, 615, 619, 627, 628, 631, 664, 705, 711, 715, 723, 724, 727, 782, 784, 790, 795, 800, 801], "4": [7, 15, 19, 20, 21, 22, 24, 27, 30, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 61, 62, 64, 65, 66, 67, 71, 75, 79, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 115, 116, 120, 121, 131, 134, 135, 137, 138, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 160, 161, 163, 164, 168, 169, 171, 172, 173, 174, 183, 184, 189, 191, 193, 196, 206, 208, 209, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 232, 233, 236, 240, 241, 242, 243, 246, 248, 249, 250, 253, 262, 269, 271, 278, 279, 280, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 327, 330, 337, 344, 345, 347, 357, 358, 360, 371, 373, 374, 382, 385, 390, 392, 393, 394, 395, 397, 409, 416, 417, 418, 421, 430, 432, 433, 434, 435, 436, 438, 440, 450, 454, 455, 461, 462, 472, 479, 480, 485, 488, 491, 493, 497, 525, 528, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 582, 586, 592, 593, 594, 598, 599, 600, 601, 602, 605, 607, 608, 610, 615, 616, 619, 627, 628, 631, 639, 647, 648, 650, 653, 655, 657, 658, 661, 668, 669, 670, 677, 678, 683, 685, 688, 689, 690, 691, 695, 696, 697, 698, 699, 701, 703, 704, 711, 712, 715, 723, 724, 727, 731, 739, 740, 742, 745, 747, 749, 750, 753, 784, 790, 793, 794, 796, 797, 801, 805], "95": [7, 116], "96": [7, 116], "97": [7, 47, 116], "move": [8, 156, 157, 158, 219, 220, 222, 226, 367, 368, 369, 428, 429, 431, 435, 606, 702], "inlin": 8, "name": [8, 12, 14, 19, 20, 23, 26, 27, 35, 38, 52, 53, 59, 66, 70, 77, 90, 96, 97, 99, 105, 106, 107, 117, 159, 186, 196, 209, 246, 265, 268, 284, 285, 292, 298, 300, 306, 312, 315, 317, 321, 322, 324, 346, 376, 424, 468, 481, 482, 489, 495, 497, 498, 525, 531, 541, 547, 548, 549, 550, 553, 600, 605, 632, 634, 636, 665, 666, 667, 696, 701, 728, 757, 758, 759, 761, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 783, 784, 786, 787, 788, 791, 794, 795, 796, 797, 798, 799, 800, 801, 813], "parenthes": 8, "below": [9, 27, 40, 173, 269, 805], "when": [9, 13, 19, 20, 28, 29, 31, 33, 36, 41, 74, 113, 138, 139, 140, 156, 157, 158, 164, 195, 274, 322, 327, 347, 348, 349, 366, 367, 368, 369, 374, 441, 442, 480, 496, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 635, 661, 773, 774, 776, 780, 784, 786, 787, 800, 801, 803], "displai": [9, 13], "ascii_ful": 10, "ascii_no_bord": 10, "ascii_borders_onli": 10, "ascii_borders_only_condens": 10, "ascii_horizontal_onli": 10, "ascii_markdown": 10, "utf8_ful": 10, "utf8_full_condens": 10, "utf8_no_bord": 10, "utf8_borders_onli": 10, "utf8_horizontal_onli": 10, "noth": [10, 640, 644, 645, 646, 732, 736, 737, 738], "style": [10, 66], "border": 10, "line": [10, 773, 774, 775, 784], "onli": [10, 18, 20, 27, 40, 53, 57, 84, 86, 116, 137, 138, 139, 140, 168, 214, 256, 264, 269, 281, 285, 287, 306, 344, 347, 348, 349, 377, 423, 466, 480, 491, 597, 693, 773, 774, 775, 776, 780, 783, 784, 786, 787, 788, 793, 800, 801], "dens": [10, 212, 421], "row": [10, 15, 19, 20, 27, 31, 34, 36, 41, 43, 44, 49, 51, 53, 54, 55, 59, 62, 83, 87, 88, 91, 98, 100, 107, 109, 111, 113, 121, 161, 167, 171, 190, 207, 216, 240, 248, 264, 269, 272, 275, 276, 279, 281, 285, 286, 287, 288, 292, 305, 309, 310, 311, 317, 327, 371, 380, 401, 416, 425, 454, 460, 496, 534, 537, 540, 543, 547, 548, 550, 553, 557, 560, 570, 668, 669, 670, 773, 774, 775, 776, 780, 784, 786, 787, 788, 795, 799, 800], "space": 10, "horizont": [10, 36, 46, 100, 491, 493, 496, 497, 528, 543, 764, 767, 794], "markdown": 10, "compat": [10, 19, 113], "same": [10, 20, 98, 115, 120, 121, 161, 167, 218, 219, 220, 221, 222, 223, 225, 226, 227, 311, 323, 327, 328, 371, 427, 428, 429, 430, 431, 432, 434, 435, 436, 479, 480, 490, 557, 668, 796, 799], "No": 10, "other": [10, 19, 27, 31, 37, 52, 53, 59, 74, 120, 138, 139, 140, 151, 178, 242, 253, 269, 284, 285, 292, 316, 322, 327, 347, 348, 349, 360, 390, 440, 472, 479, 525, 613, 709, 773, 774, 775, 784, 796, 797, 813], "The": [10, 20, 41, 42, 43, 48, 53, 74, 99, 101, 113, 121, 134, 162, 167, 169, 170, 195, 212, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 239, 242, 262, 264, 272, 278, 279, 280, 281, 283, 285, 287, 288, 295, 312, 346, 372, 379, 382, 421, 427, 428, 429, 430, 431, 432, 434, 435, 436, 453, 486, 512, 515, 554, 557, 567, 582, 594, 597, 598, 600, 605, 607, 638, 641, 642, 647, 648, 653, 664, 668, 674, 690, 693, 694, 696, 701, 703, 730, 733, 734, 739, 740, 745, 756, 773, 780, 782, 784, 811, 816], "one": [10, 33, 34, 41, 42, 59, 66, 74, 92, 96, 116, 164, 218, 241, 242, 249, 268, 274, 275, 279, 280, 292, 316, 327, 374, 427, 481, 534, 555, 556, 567, 665, 757, 793, 794, 801], "more": [10, 20, 40, 54, 59, 62, 74, 76, 98, 111, 113, 121, 138, 139, 140, 187, 195, 229, 239, 255, 278, 292, 311, 328, 347, 348, 349, 399, 438, 453, 474, 540, 557, 668, 780, 794, 800, 801, 818], "semigraph": 10, "box": [10, 20], "draw": [10, 15, 16], "found": [10, 28, 109, 535, 646, 661, 666, 738], "unicod": 10, "block": [10, 317, 441, 442], "which": [10, 27, 31, 84, 98, 108, 109, 110, 111, 112, 113, 118, 176, 179, 180, 182, 183, 184, 269, 311, 318, 327, 387, 391, 392, 393, 394, 395, 441, 635, 773, 774, 775, 782, 784], "ar": [10, 20, 27, 29, 32, 36, 41, 42, 53, 54, 59, 74, 90, 94, 101, 113, 118, 147, 148, 152, 153, 155, 176, 178, 179, 180, 182, 183, 184, 187, 212, 215, 216, 218, 224, 239, 241, 242, 247, 269, 273, 279, 280, 281, 285, 287, 288, 292, 295, 316, 322, 325, 327, 355, 356, 365, 366, 376, 378, 387, 390, 391, 392, 393, 394, 395, 399, 421, 425, 427, 433, 453, 459, 470, 478, 480, 484, 486, 493, 525, 534, 540, 545, 547, 549, 550, 600, 605, 632, 647, 650, 696, 701, 728, 739, 742, 773, 774, 775, 782, 784, 786, 787, 791, 796, 797, 799, 800, 803, 811, 813, 816], "http": [10, 644, 736, 818], "en": 10, "wikipedia": 10, "org": 10, "wiki": 10, "drawing_charact": 10, "box_draw": 10, "hide": [11, 12, 13, 14], "etc": [11, 441, 442, 484, 548, 550, 773, 776, 780, 786, 788], "inform": [13, 138, 139, 140, 187, 239, 295, 347, 348, 349, 399, 453, 547], "separ": [14, 97, 109, 167, 493, 496, 620, 716], "between": [14, 68, 111, 135, 151, 174, 207, 211, 223, 296, 342, 360, 416, 420, 432, 491, 495, 568, 620, 638, 716, 730, 770, 771, 778, 791, 798, 799, 800, 801], "set_tbl_column_data_type_inlin": 14, "max": [15, 24, 33, 41, 42, 66, 113, 138, 139, 145, 164, 206, 212, 219, 231, 274, 280, 347, 348, 353, 358, 374, 421, 428, 443, 658, 667, 750, 800, 801], "both": [15, 41, 42, 52, 53, 74, 109, 120, 174, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 284, 285, 480, 525, 649, 654, 660], "element": [15, 122, 123, 124, 125, 126, 127, 141, 142, 144, 145, 146, 147, 148, 149, 160, 170, 178, 193, 207, 212, 215, 230, 236, 237, 238, 243, 251, 252, 254, 328, 329, 330, 331, 332, 333, 334, 351, 352, 353, 354, 355, 356, 357, 370, 375, 390, 403, 416, 421, 439, 450, 451, 452, 456, 457, 463, 464, 473, 474, 477, 616, 657, 658, 712, 749, 750, 769, 801, 806], "width": [16, 19, 648, 653, 664, 740, 745, 756, 773, 774], "char": [16, 480, 650, 742], "enabl": [17, 231, 443], "addit": [17, 798, 799], "verbos": 17, "debug": [17, 264, 272, 288], "log": [17, 155, 254, 365, 473], "if_set": 18, "dict": [18, 19, 64, 70, 77, 90, 91, 113, 288, 298, 300, 376, 515, 546, 547, 668, 773, 774, 775, 776, 777, 780, 781, 784, 786, 788, 800], "none": [18, 19, 20, 21, 24, 27, 32, 33, 41, 42, 43, 48, 52, 53, 59, 62, 63, 74, 76, 81, 83, 90, 92, 97, 98, 99, 100, 101, 106, 108, 109, 110, 111, 112, 113, 117, 120, 121, 131, 134, 138, 143, 152, 153, 156, 157, 158, 159, 162, 163, 164, 169, 170, 173, 180, 181, 182, 183, 184, 186, 189, 195, 205, 207, 213, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 233, 234, 235, 236, 240, 253, 262, 269, 273, 274, 279, 280, 283, 284, 285, 288, 292, 303, 304, 305, 311, 312, 315, 318, 321, 322, 328, 335, 336, 346, 347, 358, 360, 365, 367, 368, 369, 372, 373, 374, 378, 379, 381, 382, 394, 395, 399, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 446, 449, 450, 453, 454, 457, 465, 468, 472, 477, 478, 481, 483, 488, 493, 494, 498, 504, 513, 525, 526, 527, 541, 542, 546, 547, 548, 549, 550, 551, 554, 600, 605, 618, 628, 632, 638, 639, 641, 642, 643, 646, 647, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 664, 665, 666, 668, 696, 701, 714, 724, 728, 730, 731, 733, 734, 735, 738, 739, 740, 741, 742, 745, 746, 747, 749, 750, 751, 752, 753, 762, 763, 769, 772, 773, 774, 775, 776, 778, 780, 782, 783, 784, 786, 787, 788, 790, 792, 793, 796, 797, 798, 799, 800, 801, 803, 804, 806], "show": [18, 27, 54, 63, 269, 295, 304], "variabl": [18, 59, 92, 292, 467, 551], "chang": [18, 100, 101, 149, 186, 207, 219, 220, 221, 222, 223, 225, 226, 227, 357, 416, 448, 498, 600, 673, 696, 773, 774, 785], "restrict": [18, 658, 750], "return": [18, 20, 21, 25, 27, 28, 29, 30, 32, 33, 36, 44, 46, 52, 54, 55, 61, 62, 64, 65, 66, 74, 76, 87, 88, 94, 97, 98, 105, 109, 111, 112, 118, 119, 122, 123, 124, 125, 126, 127, 130, 132, 141, 142, 161, 167, 171, 174, 176, 177, 178, 179, 180, 182, 183, 184, 190, 194, 201, 215, 216, 229, 237, 238, 248, 249, 250, 251, 252, 254, 256, 257, 258, 264, 270, 272, 281, 287, 288, 294, 295, 304, 310, 311, 318, 324, 325, 326, 328, 335, 336, 338, 339, 358, 366, 371, 376, 378, 380, 381, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 401, 408, 425, 426, 438, 440, 442, 460, 462, 473, 475, 479, 483, 484, 485, 489, 490, 498, 524, 525, 526, 527, 534, 537, 540, 545, 546, 547, 548, 549, 550, 553, 554, 555, 557, 560, 564, 570, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 610, 611, 612, 614, 618, 619, 620, 631, 635, 638, 640, 642, 644, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 664, 669, 670, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 710, 714, 715, 716, 727, 730, 731, 732, 734, 736, 737, 738, 739, 740, 742, 745, 747, 748, 749, 750, 753, 756, 762, 763, 769, 772, 773, 774, 775, 776, 777, 780, 781, 784, 789, 795, 805, 806], "dictionari": [18, 19, 64, 90, 91, 358, 376, 546, 547, 550, 773, 774, 777, 781, 784], "includ": [18, 29, 41, 97, 100, 109, 174, 366, 478, 496, 601, 656, 657, 697, 748, 749, 800], "those": [18, 212, 421], "_have_": 18, "been": [18, 212, 421], "specif": [18, 218, 322, 427, 661, 753, 782, 793, 800], "set_stat": 18, "all_stat": 18, "sequenc": [19, 25, 27, 30, 31, 40, 41, 42, 52, 53, 59, 62, 64, 66, 78, 84, 92, 97, 98, 99, 100, 101, 106, 159, 178, 195, 271, 278, 279, 280, 284, 285, 301, 306, 315, 322, 327, 390, 442, 481, 482, 483, 486, 488, 489, 490, 491, 492, 493, 496, 497, 515, 541, 543, 546, 547, 548, 550, 554, 555, 667, 763, 764, 767, 789, 793, 794, 799, 800, 801], "np": [19, 322, 387, 391, 392, 393, 427, 548], "ndarrai": [19, 34, 93, 249, 322, 442, 461, 470, 548], "pa": [19, 545, 785], "pd": [19, 253, 472, 549, 775, 782], "pli": [19, 41, 42, 52, 66, 279, 280, 284, 496, 543, 568, 579, 580, 584, 604, 609, 615, 632, 641, 642, 671, 672, 676, 700, 705, 711, 728, 733, 734, 771], "columnstyp": 19, "orient": [19, 111, 548, 550], "two": [19, 36, 59, 66, 96, 116, 151, 241, 242, 249, 292, 360, 481, 495, 546, 548, 550, 555, 556, 557, 567, 668, 770, 782, 791, 793], "dimension": [19, 322, 546, 548, 550], "structur": [19, 31, 327, 533, 538, 539], "repres": [19, 109, 180, 182, 322, 442, 457, 477, 489, 513, 521, 525, 545, 546, 548, 549, 550, 762], "panda": [19, 94, 253, 471, 472, 549, 775, 782, 790], "variou": [19, 114, 322, 813], "form": [19, 100, 207, 322, 416], "must": [19, 41, 42, 53, 74, 159, 195, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 288, 322, 498, 546, 548, 550, 796], "contain": [19, 62, 66, 178, 295, 322, 376, 409, 466, 546, 549, 640, 643, 644, 645, 646, 658, 659, 732, 735, 736, 737, 738, 750, 751], "mai": [19, 20, 29, 31, 53, 80, 81, 100, 113, 149, 159, 162, 219, 220, 221, 222, 223, 225, 226, 227, 232, 233, 288, 302, 303, 317, 327, 357, 366, 372, 445, 446, 491, 496, 498, 543, 545, 580, 587, 600, 627, 668, 672, 679, 696, 723, 773, 776, 785, 786], "datatyp": [19, 20, 28, 36, 77, 109, 121, 135, 159, 195, 234, 253, 270, 288, 300, 322, 328, 342, 358, 364, 381, 384, 396, 398, 447, 472, 483, 489, 541, 547, 661, 668, 753, 762, 763, 769, 773, 774, 775, 777, 781, 798, 799, 800, 801, 806, 813], "pair": [19, 70, 298], "label": [19, 218, 219, 220, 221, 222, 223, 225, 226, 227, 295, 427, 428, 429, 430, 431, 432, 434, 435, 436, 498, 546, 548, 550], "result": [19, 31, 41, 62, 81, 109, 111, 112, 156, 157, 158, 187, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 231, 233, 261, 288, 295, 303, 318, 327, 367, 368, 369, 399, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 443, 446, 470, 496, 497, 546, 548, 550, 555, 656, 657, 748, 749, 763, 782, 784, 786, 788, 794, 801], "specifi": [19, 29, 33, 109, 156, 157, 158, 164, 215, 274, 322, 366, 367, 368, 369, 374, 525, 535, 546, 548, 550, 648, 653, 740, 745, 800], "overrid": [19, 546, 798, 799, 801], "alreadi": [19, 149, 357, 546, 616, 712], "present": [19, 178, 478, 546, 800], "match": [19, 33, 53, 74, 274, 285, 491, 537, 546, 548, 550, 639, 640, 643, 645, 646, 649, 651, 652, 654, 659, 660, 661, 731, 732, 735, 737, 738, 741, 743, 744, 746, 751, 752, 753, 796, 797], "dimens": [19, 216, 425, 546, 548, 550], "col": [19, 20, 34, 40, 41, 42, 50, 62, 65, 74, 84, 99, 105, 106, 109, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 165, 166, 167, 168, 172, 173, 174, 175, 177, 178, 180, 181, 182, 185, 186, 187, 188, 192, 193, 194, 197, 198, 199, 200, 202, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 275, 278, 280, 282, 294, 312, 314, 315, 425, 441, 442, 484, 485, 492, 493, 497, 527, 542, 544, 548, 550, 552, 555, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 630, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 693, 712, 728, 736, 738, 753, 771, 784, 793, 794, 799, 800, 805, 811], "whether": [19, 41, 42, 109, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 485, 525, 548, 550, 801], "interpret": [19, 548, 550, 773, 774, 784], "infer": [19, 20, 109, 216, 322, 425, 547, 548, 550, 661, 773, 774, 775, 784, 787, 798], "doe": [19, 31, 256, 272, 278, 288, 327, 378, 448, 478, 537, 542, 548, 550, 606, 609, 666, 702, 705, 773, 774, 775, 784, 796, 797], "yield": [19, 29, 31, 97, 327, 366, 548, 550, 773, 774, 784], "conclus": [19, 548, 550], "some": [19, 27, 269, 390, 773, 774, 784], "intern": [19, 32, 34, 39, 40, 46, 62, 78, 90, 105, 106, 151, 163, 174, 206, 208, 215, 230, 233, 240, 242, 249, 273, 275, 282, 295, 301, 303, 306, 314, 315, 373, 375, 446, 461, 483, 484, 485, 486, 488, 490, 492, 493, 495, 497, 524, 525, 526, 544, 545, 764, 767, 770, 775, 783, 789, 791, 793, 794, 796, 798, 800, 805], "convert": [19, 75, 90, 91, 92, 93, 94, 96, 469, 470, 471, 478, 549, 551, 632, 728, 760, 775, 782], "befor": [19, 31, 53, 99, 147, 148, 149, 207, 218, 219, 220, 221, 222, 223, 225, 226, 227, 247, 282, 285, 312, 327, 355, 356, 357, 416, 427, 428, 429, 430, 431, 432, 434, 435, 436, 459, 664, 756, 784], "collect": [19, 54, 89, 121, 206, 269, 271, 272, 275, 278, 283, 284, 289, 290, 291, 292, 293, 294, 296, 301, 302, 303, 305, 307, 308, 310, 313, 314, 315, 317, 484, 490, 492, 668, 783, 785, 793], "can": [19, 20, 28, 36, 40, 41, 62, 66, 84, 97, 100, 114, 121, 149, 159, 173, 186, 201, 214, 219, 220, 221, 222, 223, 225, 226, 227, 231, 234, 239, 258, 264, 279, 306, 317, 322, 328, 357, 408, 423, 441, 442, 443, 447, 453, 481, 484, 489, 497, 525, 533, 541, 555, 557, 597, 616, 632, 646, 668, 693, 712, 728, 738, 764, 773, 774, 775, 776, 784, 785, 786, 794, 799, 800, 801, 811], "lead": [19, 231, 249, 258, 288, 443, 649, 654, 660, 664, 668, 741, 752, 756, 764, 767, 791], "unexpect": [19, 536], "behavior": [19, 121, 483, 764, 767], "subclass": 19, "For": [19, 31, 42, 52, 53, 84, 135, 214, 239, 280, 285, 327, 423, 453, 470, 496, 543, 544, 557, 635, 668, 775], "mydatafram": 19, "pass": [19, 113, 172, 282, 288, 304, 328, 525, 546, 584, 676, 775, 799, 800, 801], "isinst": [19, 800, 801], "lazi": [19, 53, 121, 206, 262, 265, 269, 270, 271, 275, 278, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 484, 491, 525, 555, 668, 769, 784, 800, 806, 813, 815], "construct": [19, 277, 297, 322, 545, 546, 547, 548, 549, 550], "b": [19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 47, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 117, 120, 121, 131, 134, 135, 136, 143, 151, 152, 153, 159, 161, 163, 164, 165, 169, 170, 173, 176, 179, 180, 181, 182, 183, 184, 186, 189, 191, 196, 201, 205, 209, 217, 234, 240, 245, 246, 256, 258, 260, 262, 265, 269, 270, 271, 275, 278, 284, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 303, 305, 307, 308, 310, 312, 313, 314, 315, 317, 327, 358, 360, 365, 366, 374, 390, 398, 424, 440, 475, 480, 481, 488, 491, 493, 495, 497, 528, 541, 544, 545, 546, 547, 548, 549, 550, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 579, 613, 616, 620, 622, 651, 665, 666, 669, 670, 671, 712, 743, 770, 775, 791, 793, 794], "notic": [19, 322], "dtype": [19, 41, 42, 53, 94, 121, 122, 123, 124, 125, 126, 127, 130, 132, 135, 138, 139, 140, 141, 142, 147, 148, 159, 161, 167, 194, 195, 214, 215, 219, 220, 221, 222, 223, 225, 226, 227, 234, 237, 238, 247, 249, 251, 252, 253, 257, 258, 279, 280, 285, 322, 342, 346, 347, 348, 349, 355, 356, 366, 371, 381, 386, 426, 440, 447, 459, 470, 471, 472, 483, 492, 494, 541, 547, 583, 586, 589, 591, 593, 596, 602, 609, 611, 612, 613, 620, 638, 655, 675, 678, 684, 686, 689, 692, 698, 705, 707, 708, 709, 716, 730, 747, 753, 762, 763, 769, 773, 774, 784, 793, 798, 799, 800, 801, 806], "automat": [19, 322, 773, 774, 782, 784, 800, 801], "int64": [19, 28, 36, 41, 42, 65, 77, 89, 147, 148, 159, 214, 247, 253, 270, 279, 280, 294, 300, 322, 355, 356, 364, 423, 440, 459, 470, 471, 472, 541, 583, 586, 589, 591, 593, 596, 602, 675, 678, 684, 686, 689, 692, 698], "In": [19, 20, 29, 31, 41, 42, 62, 121, 241, 242, 279, 280, 322, 327, 366, 422, 634, 769, 788, 800, 801, 806], "order": [19, 40, 41, 42, 64, 66, 76, 98, 101, 130, 132, 136, 212, 229, 230, 231, 241, 242, 255, 256, 278, 279, 280, 306, 311, 337, 340, 421, 426, 438, 439, 443, 474, 475, 486, 579, 666, 671, 759, 796], "your": [19, 264, 281, 287, 288, 773, 774, 796, 797], "initi": [19, 496, 543], "list": [19, 23, 28, 29, 30, 34, 39, 41, 46, 61, 64, 75, 84, 90, 91, 97, 98, 99, 100, 106, 114, 116, 133, 159, 161, 167, 186, 195, 206, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 233, 241, 242, 249, 265, 268, 269, 270, 271, 275, 292, 311, 312, 315, 316, 322, 341, 345, 366, 371, 375, 381, 390, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 461, 469, 490, 492, 497, 498, 504, 528, 551, 554, 556, 567, 635, 636, 645, 656, 665, 666, 737, 748, 758, 759, 764, 767, 772, 773, 774, 776, 780, 782, 784, 793, 794, 799, 800, 801, 813], "col1": [19, 100], "float32": [19, 36, 109, 322, 386], "col2": [19, 100], "df2": [19, 31, 37, 103, 480, 491, 796], "f32": [19, 212, 234, 322, 421, 528, 616, 712], "Or": [19, 41, 42, 53, 101, 206, 279, 280, 285, 805], "valid": [19, 29, 149, 241, 357, 366, 378, 639, 640, 644, 645, 646, 731, 732, 736, 737, 738, 743, 744, 776, 780, 801], "df3": 19, "numpi": [19, 34, 93, 203, 204, 249, 322, 387, 391, 392, 393, 412, 413, 427, 461, 470, 478, 548, 790], "import": [19, 24, 41, 53, 94, 100, 101, 109, 288, 351, 384, 387, 391, 392, 393, 427, 451, 463, 504, 525, 527, 545, 548, 549, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 762, 782, 784, 785, 796, 797, 798, 799, 800, 801], "arrai": [19, 29, 89, 93, 138, 139, 140, 144, 145, 146, 147, 148, 193, 219, 220, 222, 225, 226, 227, 231, 322, 347, 348, 349, 353, 354, 355, 356, 366, 403, 428, 429, 431, 434, 435, 436, 443, 448, 466, 470, 478, 492, 512, 528, 545, 548, 613, 622, 623, 624, 625, 626, 629, 630, 640, 642, 644, 645, 646, 709, 718, 719, 720, 721, 722, 725, 726, 732, 734, 736, 737, 738, 773, 774], "df4": 19, "6": [19, 20, 23, 25, 26, 27, 28, 30, 31, 34, 35, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 50, 52, 55, 56, 57, 58, 59, 60, 63, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 105, 106, 107, 109, 121, 134, 135, 147, 148, 151, 155, 161, 163, 164, 169, 171, 173, 191, 206, 210, 212, 213, 216, 219, 220, 221, 222, 223, 225, 226, 227, 241, 242, 248, 250, 265, 269, 270, 271, 275, 278, 280, 283, 284, 292, 300, 301, 302, 303, 305, 310, 312, 314, 315, 317, 327, 345, 351, 355, 356, 358, 360, 371, 409, 421, 430, 432, 433, 434, 436, 440, 459, 481, 497, 528, 545, 547, 548, 549, 550, 555, 560, 567, 569, 570, 582, 597, 598, 599, 601, 608, 640, 647, 650, 669, 670, 693, 704, 732, 739, 793, 794], "c": [19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 39, 40, 41, 44, 46, 47, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 93, 94, 95, 97, 98, 100, 102, 103, 106, 109, 113, 121, 234, 256, 258, 262, 265, 269, 270, 271, 275, 278, 284, 292, 300, 301, 305, 315, 358, 398, 475, 480, 481, 488, 493, 497, 544, 547, 549, 558, 559, 560, 561, 562, 563, 565, 567, 569, 570, 613, 620, 622, 657, 661, 669, 670, 749, 753, 775, 784, 793, 794, 799], "attribut": [19, 114, 322, 504, 505, 512, 798, 813], "get": [19, 23, 28, 38, 39, 41, 42, 44, 45, 49, 51, 55, 61, 74, 77, 79, 83, 87, 92, 104, 116, 128, 129, 130, 131, 132, 144, 145, 146, 147, 148, 166, 171, 175, 177, 185, 188, 190, 197, 198, 199, 200, 203, 204, 211, 240, 244, 247, 248, 255, 259, 265, 270, 276, 279, 280, 281, 286, 287, 300, 305, 309, 322, 335, 336, 337, 338, 339, 340, 345, 353, 354, 355, 356, 364, 376, 380, 381, 385, 388, 397, 401, 404, 406, 407, 409, 411, 412, 413, 417, 418, 420, 454, 457, 460, 465, 466, 467, 474, 477, 478, 523, 542, 553, 560, 570, 572, 573, 574, 575, 576, 577, 578, 584, 617, 621, 622, 633, 634, 636, 647, 650, 669, 670, 676, 713, 717, 718, 729, 739, 742, 758, 764, 765, 766, 767, 777, 781, 792, 795, 802, 804], "height": [19, 27], "schema": [19, 20, 21, 22, 28, 262, 263, 270, 288, 350, 491, 538, 547, 634, 668, 773, 774, 777, 781, 784, 787, 800], "__init__": [19, 114, 322, 480, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 798], "f": [20, 24, 27, 55, 89, 97, 100, 121, 195, 196, 234, 269, 288, 315, 483, 492, 496, 543, 557, 632, 661, 668, 728, 753, 763], "callabl": [20, 36, 65, 121, 195, 196, 218, 288, 294, 328, 427, 483, 496, 543, 557, 632, 668, 728, 763, 784], "tupl": [20, 74, 75, 79, 174, 216, 295, 304, 425, 444, 782], "return_dtyp": [20, 121, 195, 328, 483, 763], "union": [20, 25, 27, 28, 30, 40, 56, 57, 59, 60, 62, 64, 70, 77, 78, 84, 86, 97, 99, 101, 106, 121, 135, 159, 178, 195, 240, 264, 269, 271, 272, 278, 288, 292, 295, 300, 301, 304, 306, 315, 322, 328, 390, 442, 481, 482, 483, 486, 489, 490, 491, 492, 493, 497, 512, 515, 523, 526, 527, 541, 546, 547, 555, 600, 605, 628, 661, 667, 668, 753, 763, 764, 767, 769, 789, 793, 794, 798, 799, 800, 801, 806], "inference_s": 20, "256": [20, 416], "custom": [20, 121, 195, 218, 288, 328, 427, 483, 557, 632, 668, 728, 763], "user": [20, 121, 231, 328, 443, 483, 557, 668], "defin": [20, 41, 42, 62, 109, 121, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 328, 483, 504, 525, 557, 668, 762, 798, 799, 800], "udf": [20, 121, 328, 483, 557, 668], "over": [20, 31, 40, 97, 121, 149, 164, 173, 195, 196, 218, 219, 220, 221, 222, 223, 225, 226, 227, 327, 328, 357, 427, 428, 429, 431, 435, 483, 496, 543, 554, 557, 567, 668, 763, 773, 774, 784, 800], "receiv": 20, "each": [20, 53, 121, 167, 212, 285, 295, 345, 421, 483, 557, 558, 560, 570, 619, 631, 645, 657, 658, 668, 669, 670, 715, 727, 737, 749, 750, 787, 796, 797, 799], "implement": [20, 113, 121, 441, 442, 557, 668], "logic": [20, 121, 253, 277, 284, 297, 318, 472, 557, 668], "python": [20, 75, 121, 195, 328, 469, 483, 514, 525, 557, 668, 680, 681, 682, 687, 773, 774, 790], "almost": [20, 121, 557, 668], "alwai": [20, 121, 288, 557, 634, 668, 773], "_significantly_": [20, 121, 557, 668], "slower": [20, 64, 101, 111, 121, 548, 550, 557, 668], "memori": [20, 31, 82, 113, 121, 213, 234, 327, 422, 447, 448, 491, 545, 548, 549, 550, 557, 567, 668, 773, 774, 776, 780, 784, 786, 787, 788], "intens": [20, 121, 557, 668], "than": [20, 40, 53, 74, 76, 100, 121, 229, 239, 241, 278, 285, 438, 453, 525, 540, 548, 550, 557, 648, 653, 658, 664, 668, 740, 745, 750, 756, 773, 774, 791, 794, 800, 801], "nativ": [20, 121, 557, 668, 773, 776, 780], "becaus": [20, 29, 41, 54, 100, 121, 279, 328, 366, 557, 616, 668, 712], "engin": [20, 121, 557, 668, 782], "run": [20, 54, 121, 149, 264, 272, 295, 304, 357, 490, 504, 557, 616, 668, 712, 783, 789, 817], "rust": [20, 109, 113, 121, 536, 557, 668, 776, 780], "forc": [20, 53, 121, 284, 285, 557, 668], "materi": [20, 121, 295, 557, 668], "parallelis": [20, 121, 557, 668], "cannot": [20, 76, 121, 229, 304, 438, 557, 657, 668, 749, 773, 774], "optimis": [20, 121, 441, 442, 557, 668], "wherev": [20, 121, 557, 668], "possibl": [20, 121, 194, 257, 322, 557, 634, 658, 668, 750, 773], "you": [20, 27, 31, 53, 62, 93, 97, 113, 121, 138, 139, 140, 159, 165, 195, 214, 219, 220, 221, 222, 223, 225, 226, 227, 264, 269, 281, 285, 287, 304, 322, 327, 347, 348, 349, 423, 470, 478, 484, 546, 557, 567, 616, 647, 650, 668, 712, 739, 742, 769, 773, 774, 775, 784, 806], "should": [20, 41, 53, 108, 109, 110, 111, 112, 113, 116, 121, 149, 180, 182, 218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 239, 268, 284, 285, 288, 304, 318, 328, 357, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 453, 557, 579, 609, 616, 654, 660, 668, 671, 705, 712, 741, 746, 752, 762, 769, 798, 799, 801, 806], "strongli": [20, 121, 557, 668], "prefer": [20, 31, 121, 218, 327, 427, 557, 668], "achiev": [20, 121, 557, 668], "best": [20, 121, 557, 668], "perform": [20, 41, 42, 53, 69, 113, 121, 279, 280, 285, 317, 533, 557, 668, 773, 774, 776, 780, 784, 786, 787, 788], "lambda": [20, 27, 36, 121, 156, 157, 158, 195, 196, 218, 269, 288, 328, 367, 368, 369, 497, 557, 632, 668, 728, 784, 794], "given": [20, 29, 74, 80, 81, 155, 162, 192, 212, 215, 216, 219, 220, 222, 225, 226, 227, 232, 233, 254, 302, 303, 319, 321, 328, 365, 366, 372, 402, 414, 421, 425, 428, 429, 431, 434, 435, 436, 445, 446, 473, 479, 481, 498, 604, 614, 627, 645, 661, 700, 710, 723, 737, 769, 773, 774, 784, 798, 799, 800, 801, 806], "tri": 20, "case": [20, 31, 41, 42, 195, 279, 280, 322, 327, 634, 635, 788, 805], "first": [20, 44, 53, 55, 61, 66, 97, 98, 101, 130, 131, 132, 149, 171, 177, 190, 264, 281, 285, 287, 311, 322, 337, 340, 357, 358, 380, 388, 401, 486, 488, 547, 553, 560, 567, 597, 616, 618, 619, 644, 646, 651, 652, 669, 693, 712, 714, 715, 736, 738, 743, 744, 773, 774, 775, 782, 784, 787], "determin": [20, 36, 41, 42, 97, 101, 215, 219, 220, 221, 222, 223, 225, 226, 227, 239, 279, 280, 453, 486, 491, 521, 547, 550, 579, 632, 634, 671, 728, 773, 774, 775, 780, 788], "frame": [20, 46, 62, 94, 100, 109, 282, 295, 490, 545, 554, 775, 796, 800], "level": [20, 36, 62, 113, 165, 281, 287, 784, 786, 787, 788, 800], "track": 20, "black": [20, 480], "arbitrarili": 20, "drop": [20, 26, 27, 98, 150, 152, 153, 269, 311, 359, 361, 615, 711], "rearrang": 20, "transform": [20, 195, 319, 662, 663], "add": [20, 31, 41, 106, 107, 209, 246, 279, 284, 314, 315, 316, 317, 321, 327, 527, 805], "new": [20, 25, 27, 46, 47, 62, 63, 70, 71, 88, 100, 105, 117, 161, 167, 173, 196, 250, 298, 310, 324, 328, 362, 371, 414, 424, 462, 468, 479, 651, 652, 657, 658, 665, 666, 668, 743, 744, 749, 750, 757, 759, 769, 806], "want": [20, 31, 62, 138, 139, 140, 165, 195, 219, 220, 221, 222, 223, 225, 226, 227, 264, 281, 287, 327, 347, 348, 349, 470], "preserv": 20, "syntax": [20, 62, 84, 304, 322], "instead": [20, 41, 57, 62, 64, 109, 111, 112, 130, 132, 273, 278, 279, 318, 337, 340, 441, 442, 484, 647, 739, 769, 780, 794, 800, 806], "foo": [20, 23, 25, 26, 27, 28, 31, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 57, 58, 60, 63, 64, 66, 68, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 99, 102, 103, 104, 109, 117, 138, 167, 171, 172, 208, 216, 232, 233, 248, 250, 265, 269, 270, 275, 282, 283, 284, 300, 301, 312, 315, 347, 481, 484, 489, 552, 555, 567, 597, 614, 617, 618, 621, 622, 638, 640, 641, 642, 645, 649, 654, 656, 658, 660, 662, 663, 693, 716, 732, 733, 734, 737, 750, 762, 771, 789, 805], "bar": [20, 23, 25, 26, 27, 28, 31, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 50, 52, 55, 56, 57, 58, 60, 63, 64, 66, 68, 70, 71, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 99, 102, 103, 109, 117, 172, 239, 265, 269, 270, 275, 282, 283, 284, 300, 301, 312, 453, 481, 555, 567, 622, 641, 642, 656, 658, 716, 733, 734, 750, 789, 805], "8": [20, 23, 24, 25, 26, 27, 28, 30, 34, 35, 37, 44, 46, 52, 56, 57, 58, 60, 68, 70, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 95, 100, 102, 103, 106, 109, 120, 131, 143, 149, 152, 153, 173, 189, 206, 208, 209, 216, 217, 220, 221, 223, 225, 227, 234, 240, 246, 250, 265, 269, 270, 271, 275, 284, 295, 300, 301, 310, 315, 357, 416, 427, 430, 432, 433, 434, 436, 497, 511, 520, 522, 528, 615, 616, 648, 653, 661, 679, 711, 712, 740, 745, 753, 790, 793, 794, 799, 800], "map": [20, 28, 70, 90, 196, 258, 270, 298, 483, 546, 547, 773, 774, 776, 777, 780, 781, 784, 786], "t": [20, 100, 149, 155, 156, 157, 158, 357, 365, 367, 368, 369, 440, 478, 483, 491, 616, 661, 712, 753, 775, 784, 805], "column_0": [20, 97, 548, 550], "column_1": [20, 97, 548, 550], "15": [20, 41, 42, 47, 149, 280, 357, 600, 605, 673, 696, 701], "24": [20, 29, 42, 147, 149, 280, 357, 586, 678], "It": [20, 121, 288, 322, 441, 442, 525, 557, 606, 634, 668, 702], "better": [20, 121, 258, 441, 442, 557, 668], "an": [20, 21, 22, 29, 32, 36, 41, 42, 53, 62, 64, 66, 72, 74, 89, 93, 100, 114, 117, 118, 121, 133, 135, 136, 138, 139, 140, 144, 145, 146, 147, 148, 149, 154, 165, 195, 196, 210, 218, 219, 220, 221, 222, 223, 225, 226, 227, 245, 249, 262, 263, 264, 272, 279, 280, 285, 288, 295, 304, 306, 316, 322, 341, 342, 343, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 363, 366, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 442, 458, 470, 478, 484, 489, 490, 525, 528, 529, 532, 533, 536, 545, 557, 567, 609, 616, 618, 635, 641, 645, 654, 660, 661, 668, 705, 712, 714, 733, 737, 741, 746, 752, 753, 762, 773, 774, 775, 782, 784, 786, 789, 799, 800, 801, 813], "select": [20, 53, 57, 62, 74, 83, 95, 99, 101, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 166, 167, 168, 169, 170, 172, 173, 175, 176, 178, 179, 181, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 255, 256, 257, 258, 259, 265, 282, 285, 305, 312, 441, 442, 454, 461, 481, 483, 484, 485, 489, 492, 497, 527, 541, 544, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 630, 632, 633, 638, 639, 640, 641, 642, 644, 645, 646, 648, 649, 653, 654, 656, 657, 658, 660, 662, 663, 665, 666, 712, 728, 736, 738, 772, 773, 774, 776, 780, 782, 784, 785, 793, 794, 813], "scalar": [20, 230, 439, 483], "9": [20, 36, 42, 44, 48, 87, 100, 103, 105, 106, 109, 120, 131, 143, 148, 152, 153, 173, 178, 189, 206, 216, 218, 220, 226, 236, 240, 250, 280, 283, 314, 315, 371, 390, 427, 435, 437, 450, 488, 492, 555, 569, 582, 598, 607, 608, 626, 629, 674, 683, 685, 691, 696, 697, 701, 703, 793], "14": [20, 173, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 673, 696, 790], "follow": [20, 41, 42, 53, 101, 121, 167, 212, 219, 220, 221, 222, 223, 225, 226, 227, 278, 279, 280, 285, 421, 441, 442, 483, 597, 600, 605, 693, 696, 701, 773, 774, 782, 784, 811, 816, 818], "creat": [21, 22, 41, 42, 63, 66, 101, 114, 133, 136, 154, 213, 245, 258, 262, 263, 266, 267, 279, 280, 322, 341, 343, 346, 350, 362, 363, 414, 422, 458, 470, 484, 492, 498, 524, 525, 526, 527, 545, 548, 550, 600, 605, 655, 696, 701, 747, 799, 800, 801], "empti": [21, 22, 50, 59, 109, 262, 263, 292, 322, 346, 350, 386, 533, 775, 789], "copi": [21, 22, 89, 262, 263, 324, 346, 350, 362, 466, 470, 545, 664, 756], "ident": [21, 22, 262, 263, 346, 350], "clone": [21, 93, 94, 262, 346, 469, 470, 478, 546, 547, 548, 549, 550], "cheap": [21, 22, 262, 263, 327, 346, 350], "deepcopi": [21, 22, 262, 263, 346, 350], "13": [21, 22, 32, 33, 39, 42, 47, 61, 106, 218, 220, 262, 280, 315, 328, 492, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 696, 701, 703], "clear": [22, 263, 350], "properti": [23, 28, 45, 77, 79, 104, 133, 136, 154, 245, 265, 270, 300, 341, 343, 363, 364, 376, 381, 411, 444, 458, 465, 758, 813], "7": [23, 24, 25, 26, 28, 30, 34, 35, 37, 41, 42, 44, 46, 48, 52, 56, 57, 58, 60, 63, 68, 70, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 93, 94, 95, 100, 101, 102, 103, 109, 148, 160, 171, 173, 206, 216, 220, 226, 248, 250, 265, 270, 271, 275, 280, 283, 284, 296, 300, 301, 310, 334, 435, 525, 582, 598, 600, 605, 608, 610, 674, 679, 704, 793], "ham": [23, 25, 26, 27, 28, 34, 35, 37, 43, 44, 46, 52, 56, 57, 58, 60, 63, 68, 70, 72, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 92, 93, 94, 95, 102, 103, 109, 265, 269, 270, 275, 284, 300, 301, 489], "appl": [23, 46, 52, 70, 72, 90, 209, 217, 246, 284, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 643, 659, 735, 751], "banana": [23, 90, 209, 217, 246, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569], "orang": [23, 480, 558, 559, 561, 562, 563, 565, 568, 569], "summari": [24, 358], "statist": [24, 113, 157, 158, 187, 219, 220, 221, 222, 223, 224, 225, 226, 227, 239, 358, 368, 369, 399, 433, 453, 773, 774], "datetim": [24, 41, 42, 53, 101, 109, 114, 154, 174, 219, 220, 221, 222, 223, 225, 226, 227, 253, 279, 280, 285, 322, 363, 384, 404, 407, 412, 413, 442, 465, 472, 488, 525, 527, 549, 614, 661, 710, 753, 762, 767], "date": [24, 41, 42, 53, 94, 219, 220, 221, 222, 223, 225, 226, 227, 253, 279, 280, 285, 384, 404, 407, 412, 413, 442, 472, 488, 504, 525, 580, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 614, 661, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 710, 753, 767, 773, 774, 784, 785, 813], "d": [24, 43, 44, 47, 52, 55, 87, 89, 100, 103, 106, 109, 167, 234, 284, 315, 480, 488, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 584, 640, 645, 657, 661, 676, 699, 732, 737, 749, 753, 785], "e": [24, 44, 55, 87, 89, 100, 106, 109, 155, 159, 167, 192, 231, 234, 239, 315, 365, 440, 443, 453, 470, 480, 541, 773, 774, 775, 776, 780, 786, 788], "usd": 24, "eur": [24, 798], "2020": [24, 42, 280, 583, 586, 589, 591, 593, 596, 602, 673, 675, 678, 684, 686, 689, 692, 698], "2021": [24, 41, 101, 384, 661, 679, 753, 762], "2022": [24, 525, 527, 661, 679, 753, 790], "count": [24, 41, 42, 53, 62, 63, 66, 97, 101, 107, 144, 189, 202, 205, 219, 220, 221, 222, 223, 225, 226, 227, 256, 258, 279, 280, 285, 317, 358, 410, 415, 475, 476, 557, 566, 597, 640, 668, 693, 732, 768, 773, 774, 776, 780, 784, 786, 787, 788], "null_count": [24, 27, 149, 357, 358], "mean": [24, 33, 66, 92, 113, 161, 164, 167, 220, 239, 274, 358, 371, 374, 378, 429, 453, 487, 551, 644, 736, 773, 774, 784], "266667": 24, "null": [24, 27, 33, 36, 37, 48, 52, 57, 58, 63, 68, 80, 81, 84, 85, 86, 90, 99, 102, 109, 117, 120, 130, 132, 134, 138, 143, 150, 152, 153, 156, 157, 158, 159, 162, 163, 164, 165, 169, 173, 180, 181, 182, 183, 184, 186, 189, 205, 207, 213, 218, 219, 220, 221, 222, 223, 225, 226, 227, 232, 233, 234, 236, 241, 253, 260, 269, 274, 283, 284, 302, 303, 306, 312, 328, 337, 340, 347, 359, 362, 367, 368, 369, 372, 374, 378, 394, 395, 415, 416, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 445, 446, 450, 470, 472, 478, 481, 488, 491, 492, 493, 541, 547, 563, 583, 586, 589, 591, 593, 596, 602, 615, 617, 618, 621, 627, 632, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 653, 655, 657, 658, 659, 664, 675, 678, 684, 686, 689, 692, 698, 711, 723, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 745, 747, 749, 750, 751, 762, 773, 774, 784, 793], "std": [24, 218, 358, 434], "101514": 24, "707107": [24, 157, 368], "min": [24, 33, 41, 42, 66, 113, 138, 140, 146, 164, 212, 222, 274, 280, 347, 349, 354, 358, 374, 421, 431, 789, 800, 801], "01": [24, 41, 42, 101, 280, 525, 527, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 661, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 753], "median": [24, 66, 221, 430], "": [25, 27, 29, 40, 41, 47, 52, 53, 71, 72, 88, 109, 159, 162, 187, 201, 203, 204, 206, 207, 214, 218, 242, 269, 278, 279, 285, 310, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 360, 364, 366, 368, 369, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 416, 417, 418, 420, 421, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 449, 450, 451, 452, 454, 455, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 497, 498, 527, 541, 544, 555, 584, 615, 619, 620, 627, 628, 631, 635, 647, 648, 650, 653, 655, 656, 658, 661, 664, 666, 667, 673, 676, 696, 701, 711, 715, 716, 718, 723, 724, 727, 731, 732, 733, 734, 735, 737, 739, 740, 742, 743, 745, 747, 750, 751, 753, 756, 759, 764, 767, 770, 773, 774, 794, 801], "place": [26, 46, 47, 71, 80, 81, 84, 103, 109, 130, 132, 232, 233, 302, 303, 306, 337, 340, 422, 424, 445, 446, 455, 620, 627, 716, 723], "subset": [27, 62, 92, 98, 269, 311, 551], "where": [27, 31, 59, 105, 155, 230, 239, 292, 327, 338, 365, 439, 453, 457, 477, 479, 485, 608, 704, 782, 791, 805], "appli": [27, 36, 65, 109, 157, 158, 195, 206, 218, 219, 220, 222, 226, 269, 281, 287, 288, 294, 368, 369, 427, 428, 429, 431, 435, 481, 485, 491, 496, 543, 555, 582, 585, 587, 588, 590, 592, 594, 595, 598, 599, 601, 607, 608, 610, 674, 677, 679, 683, 685, 688, 690, 691, 694, 695, 697, 703, 704, 706, 763, 784, 798, 800, 801, 813], "wise": [27, 36, 122, 123, 124, 125, 126, 127, 141, 142, 160, 193, 236, 237, 238, 251, 252, 269, 329, 330, 331, 332, 333, 334, 351, 352, 370, 403, 450, 451, 452, 463, 464, 496, 543], "singl": [27, 31, 38, 84, 165, 195, 213, 216, 260, 269, 306, 322, 327, 422, 425, 466, 483, 489, 491, 555, 597, 638, 654, 660, 667, 693, 730, 741, 746, 752, 763, 773, 774, 782, 783, 784, 799], "snippet": [27, 269], "how": [27, 52, 100, 150, 173, 215, 269, 284, 322, 359, 480, 491, 547, 550, 579, 615, 641, 671, 711, 733, 782], "could": [27, 41, 135, 269, 279, 342, 496, 521, 530, 543], "base": [27, 34, 41, 42, 155, 192, 193, 269, 275, 279, 280, 365, 402, 403, 479, 502, 567, 764, 767, 813], "condit": [27, 34, 74, 269, 275, 485, 643, 659], "filter": [27, 50, 260, 269, 272, 282, 441, 484, 557, 643, 659, 668, 784, 785], "fold": [27, 269, 488, 496, 635, 794], "acc": [27, 269, 496, 543], "is_nul": [27, 269], "expr": [27, 30, 32, 34, 40, 41, 42, 52, 62, 66, 74, 78, 84, 105, 106, 269, 271, 273, 275, 278, 279, 280, 284, 301, 303, 306, 314, 315, 357, 373, 446, 461, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 524, 525, 526, 527, 528, 541, 542, 543, 544, 552, 553, 555, 667, 712, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 783, 789, 791, 792, 793, 794, 795, 804, 805, 811], "also": [28, 40, 41, 42, 62, 84, 159, 173, 212, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 316, 421, 496, 525, 543, 581, 673, 800, 801, 811], "header": [28, 66, 97, 109, 113, 773, 774, 775, 784], "colnam": [28, 196, 270, 800], "float64": [28, 29, 36, 77, 109, 122, 123, 124, 125, 126, 127, 135, 141, 142, 159, 180, 182, 237, 238, 251, 252, 270, 300, 488, 541, 601, 697, 769, 800, 806], "unit": [29, 194, 257, 295, 322, 366, 465, 504, 505, 525, 580, 584, 604, 609, 635, 672, 676, 700, 705, 800, 801], "sizeunit": [29, 366], "float": [29, 32, 53, 68, 76, 81, 137, 138, 139, 140, 152, 153, 155, 156, 157, 158, 162, 163, 168, 173, 176, 179, 180, 182, 183, 184, 192, 208, 211, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 233, 273, 285, 296, 303, 304, 342, 344, 347, 348, 349, 360, 365, 366, 367, 368, 369, 372, 373, 377, 389, 399, 402, 404, 405, 406, 407, 412, 413, 419, 420, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 453, 457, 459, 477, 487, 488, 497, 498, 506, 507, 568, 601, 614, 697, 710, 764, 765, 766, 767, 771, 783, 785, 792, 794, 796, 797, 798, 800, 801, 804], "estim": [29, 157, 158, 187, 366, 368, 369, 399, 773, 774], "total": [29, 366], "heap": [29, 366], "alloc": [29, 69, 366, 773, 774], "size": [29, 41, 100, 113, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 279, 366, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 484, 773, 774, 799, 800, 801, 802], "byte": [29, 109, 366, 647, 650, 739, 742, 773, 774, 775, 776, 777, 780, 781, 784], "sum": [29, 36, 40, 42, 66, 121, 147, 148, 155, 165, 206, 219, 220, 222, 225, 226, 227, 260, 278, 280, 355, 356, 365, 366, 428, 429, 431, 434, 435, 436, 481, 496, 497, 543, 555, 767], "its": [29, 99, 312, 366], "buffer": [29, 366, 773, 774], "nest": [29, 366, 480, 512, 813], "multipl": [29, 31, 34, 41, 46, 64, 66, 84, 106, 159, 201, 216, 219, 220, 221, 222, 223, 225, 226, 227, 242, 268, 275, 279, 306, 315, 316, 327, 366, 408, 425, 486, 490, 491, 496, 541, 543, 555, 635, 667, 763, 773, 774, 784, 786, 788, 799, 801, 805], "bitmap": [29, 366], "therefor": [29, 366], "comput": [29, 53, 98, 113, 115, 122, 123, 124, 125, 126, 127, 141, 142, 144, 145, 146, 147, 148, 151, 155, 160, 187, 192, 193, 201, 207, 210, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 236, 237, 238, 239, 243, 251, 252, 282, 284, 285, 311, 316, 323, 329, 330, 331, 332, 333, 334, 351, 352, 353, 354, 355, 356, 360, 365, 366, 370, 399, 402, 403, 408, 416, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 450, 451, 452, 453, 456, 463, 464, 490, 491, 495, 528, 530, 568, 623, 624, 625, 719, 720, 721, 770, 791, 813, 815], "particular": [29, 366, 773, 776, 780, 786, 788], "structarrai": [29, 366], "upper": [29, 41, 174, 257, 279, 366, 484, 525, 773, 774], "bound": [29, 41, 174, 194, 257, 279, 366, 484, 525, 618, 714, 773, 774], "slice": [29, 218, 219, 220, 221, 222, 223, 225, 226, 227, 264, 272, 288, 295, 304, 366, 427, 428, 429, 430, 431, 432, 434, 435, 436, 490, 619, 631, 715, 727], "remain": [29, 40, 121, 278, 288, 366, 657, 658, 749, 750, 773, 774, 784], "constant": [29, 42, 280, 366], "unchang": [29, 121, 253, 288, 366, 472, 668], "howev": [29, 366], "smaller": [29, 113, 272, 366], "visibl": [29, 366], "capac": [29, 82, 366, 448], "ffi": [29, 366], "kb": [29, 366], "mb": [29, 366], "gb": [29, 366], "tb": [29, 366], "scale": [29, 366], "x": [29, 46, 49, 51, 52, 59, 121, 170, 195, 215, 239, 253, 284, 292, 305, 324, 328, 374, 398, 453, 472, 497, 613, 620, 657, 749, 773, 774, 784, 794, 799, 800], "revers": [29, 84, 130, 132, 144, 145, 146, 147, 148, 196, 209, 212, 231, 241, 242, 246, 254, 306, 337, 340, 353, 354, 355, 356, 421, 443, 455, 473, 486, 629, 725], "1_000_000": [29, 366], "y": [29, 49, 51, 52, 59, 215, 284, 292, 305, 324, 497, 613, 620, 661, 699, 753, 794, 799, 800], "v": [29, 113, 230, 439, 498], "1000": [29, 589, 664, 684, 775], "z": [29, 49, 51, 52, 59, 170, 215, 284, 292, 305, 374, 579, 613, 671, 799, 800], "uint32": [29, 130, 132, 215, 249, 253, 338, 342, 366, 440, 472, 523, 582, 585, 588, 590, 592, 594, 595, 598, 599, 601, 607, 608, 611, 612, 622, 640, 647, 650, 674, 677, 683, 685, 688, 690, 691, 694, 695, 697, 703, 704, 707, 708, 718, 732, 790], "25888898": 29, "689577102661133": 29, "long": [30, 59, 100, 271, 292], "largelist": 30, "letter": [30, 159, 245, 271, 541, 560, 570, 669, 670], "differ": [31, 41, 42, 97, 150, 203, 204, 256, 279, 280, 327, 359, 412, 413, 440, 542, 581, 582, 597, 598, 607, 615, 661, 673, 674, 693, 694, 703, 711, 753, 764, 767, 773], "vstack": [31, 491], "chunk": [31, 61, 113, 120, 213, 327, 345, 409, 422, 466, 554, 773, 774, 784, 786, 787, 788, 800, 801], "append": [31, 52, 53, 213, 284, 285, 800], "underli": [31, 89, 214, 228, 322, 327, 423, 437, 448, 465, 466, 470, 529, 536, 580, 581, 582, 585, 587, 588, 590, 592, 594, 595, 598, 599, 601, 607, 608, 609, 610, 672, 673, 674, 677, 679, 683, 685, 688, 690, 691, 694, 695, 697, 703, 704, 705, 706, 780, 800, 801], "locat": [31, 72, 95, 99, 312, 327, 442, 461], "thu": [31, 327, 784, 791], "caus": [31, 327, 536, 773, 774, 784], "realloc": [31, 327, 784, 786, 787], "have": [31, 69, 149, 156, 157, 158, 212, 304, 317, 327, 357, 367, 368, 369, 378, 421, 567, 635, 673, 773, 774, 775, 796, 800, 801, 803], "extra": [31, 64, 113, 327, 773, 775, 776, 780, 786, 788], "faster": [31, 100, 218, 256, 327, 328, 427, 650, 742], "queri": [31, 54, 264, 266, 267, 272, 281, 287, 295, 304, 317, 319, 327, 490, 646, 668, 738, 776, 782, 784, 786, 787, 788, 815, 817], "do": [31, 53, 89, 97, 100, 149, 264, 285, 288, 295, 304, 327, 357, 470, 478, 481, 490, 567, 616, 712, 784], "after": [31, 99, 212, 312, 327, 421, 664, 673, 756, 772, 773, 774, 776, 780, 784, 786, 787, 788], "instanc": [31, 36, 135, 219, 220, 221, 222, 223, 225, 226, 227, 288, 317, 327, 342, 496, 543, 635, 773, 774, 784, 800, 801], "dure": [31, 327, 773, 774, 784], "onlin": [31, 327], "rerun": [31, 327], "mani": [31, 327, 547, 550, 782], "time": [31, 41, 42, 53, 101, 253, 254, 264, 279, 280, 285, 295, 322, 327, 465, 472, 473, 490, 492, 493, 504, 505, 524, 525, 526, 527, 580, 581, 584, 597, 604, 606, 609, 613, 614, 661, 672, 673, 676, 693, 700, 702, 705, 709, 753, 783, 784, 813], "read": [31, 195, 272, 277, 297, 327, 554, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788], "file": [31, 108, 109, 110, 111, 112, 113, 272, 297, 318, 327, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788], "store": [31, 327], "them": [31, 41, 42, 53, 101, 203, 204, 279, 280, 285, 327, 412, 413, 492, 620, 716], "latter": [31, 327], "finish": [31, 327, 480, 530], "rechunk": [31, 327, 345, 409, 491, 545, 549, 773, 774, 776, 784, 786, 787, 788], "vertic": [31, 100, 103, 491, 638, 730, 764], "df1": [31, 37, 103, 480, 491, 796], "20": [31, 46, 47, 65, 67, 71, 72, 128, 129, 130, 132, 150, 170, 173, 294, 762], "30": [31, 41, 46, 65, 71, 72, 90, 106, 128, 129, 130, 132, 150, 170, 234, 294, 315, 498, 583, 599, 600, 605, 610, 673, 675, 696, 701], "40": [31, 65, 170, 294, 679], "50": [31, 138, 347, 547, 550], "60": [31, 601, 602, 661, 694, 697, 698, 753], "fill_valu": [32, 81, 100, 163, 233, 273, 303, 373, 446], "fill": [32, 33, 81, 100, 134, 162, 163, 164, 169, 173, 219, 220, 222, 225, 226, 227, 233, 273, 274, 303, 372, 373, 374, 414, 428, 429, 431, 434, 435, 436, 446, 491, 544, 648, 653, 664, 740, 745, 756, 769, 806], "point": [32, 54, 76, 137, 152, 153, 163, 168, 180, 182, 228, 229, 273, 288, 344, 373, 377, 389, 437, 438, 506, 507, 601, 697, 800, 801], "nan": [32, 152, 153, 163, 173, 180, 182, 183, 184, 203, 204, 273, 322, 330, 334, 361, 373, 392, 393, 412, 413, 427, 549, 791, 796, 797, 800], "evalu": [32, 34, 53, 57, 106, 149, 172, 174, 178, 275, 282, 284, 285, 314, 315, 338, 357, 479, 482, 484, 485, 528, 793], "replac": [32, 33, 72, 97, 105, 273, 314, 441, 442, 641, 652, 733, 744, 773, 774, 784], "Not": [32, 180, 182, 273], "miss": [32, 134, 169, 173, 180, 182, 273, 478, 491, 791], "To": [32, 152, 153, 164, 273, 794], "fill_nul": [32, 273, 661, 753], "strategi": [33, 52, 53, 61, 164, 274, 284, 285, 374, 491, 632, 728, 773, 798, 799, 800, 801], "fillnullstrategi": [33, 164, 274, 374], "limit": [33, 134, 138, 139, 140, 164, 169, 274, 281, 347, 348, 349, 374, 784], "matches_supertyp": [33, 274], "forward": [33, 53, 164, 169, 274, 285, 374], "backward": [33, 53, 113, 134, 164, 274, 285, 374], "zero": [33, 74, 89, 163, 164, 239, 274, 374, 453, 466, 470, 545, 664, 756, 772, 773, 774, 776, 780], "consecut": [33, 134, 164, 169, 274, 374, 638, 730], "supertyp": [33, 120, 274], "fill_nan": 33, "predic": [34, 74, 165, 260, 264, 272, 275, 288, 295, 304, 317, 375, 441, 442, 490, 784, 786, 787, 788, 805], "boolean": [34, 36, 57, 106, 118, 119, 165, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 260, 275, 315, 325, 326, 338, 375, 383, 385, 387, 388, 390, 391, 392, 393, 394, 395, 397, 417, 418, 441, 479, 485, 614, 710, 731, 813], "find": [35, 230, 439, 486, 491], "index": [35, 41, 42, 47, 53, 66, 72, 74, 83, 95, 101, 107, 116, 128, 129, 130, 131, 132, 219, 220, 221, 222, 223, 225, 226, 227, 240, 249, 279, 280, 285, 305, 317, 335, 336, 337, 338, 339, 340, 414, 442, 454, 461, 486, 523, 549, 597, 611, 612, 618, 628, 644, 655, 693, 707, 708, 714, 724, 736, 747, 790], "reduct": 36, "effect": [36, 317], "aggreg": [36, 40, 41, 56, 57, 58, 60, 62, 66, 67, 68, 85, 86, 100, 102, 116, 165, 186, 191, 195, 206, 218, 219, 220, 221, 222, 223, 225, 226, 227, 258, 288, 289, 290, 291, 293, 296, 307, 308, 313, 427, 428, 429, 431, 434, 435, 436, 491, 496, 497, 543, 555, 556, 559, 561, 567, 667, 761, 764, 767, 773, 774, 794, 813], "supercast": 36, "cast": [36, 41, 42, 57, 65, 94, 120, 136, 147, 148, 214, 247, 253, 279, 280, 294, 355, 356, 423, 459, 468, 472, 493, 545, 579, 580, 581, 646, 664, 671, 672, 673, 738, 803], "similar": [36, 53, 206, 285], "parent": 36, "rule": [36, 603, 699], "arithmet": 36, "int8": [36, 147, 148, 247, 355, 356, 426, 459], "take": [36, 88, 250, 310, 462, 479, 528, 542, 597, 606, 693, 702, 800], "A": [36, 41, 53, 64, 66, 90, 92, 100, 101, 109, 115, 176, 179, 180, 182, 186, 195, 196, 209, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 245, 246, 279, 285, 306, 319, 322, 427, 428, 429, 431, 434, 435, 436, 489, 490, 492, 501, 525, 528, 544, 551, 567, 583, 586, 589, 591, 593, 596, 602, 632, 635, 639, 640, 644, 645, 646, 664, 675, 678, 684, 686, 689, 692, 698, 728, 731, 732, 736, 737, 738, 743, 744, 753, 756, 773, 774, 784, 811], "s1": [36, 479, 797], "s2": [36, 322, 327, 345, 360, 390, 409, 440, 479, 797], "minimum": [36, 60, 113, 138, 140, 156, 157, 158, 200, 204, 212, 293, 347, 349, 367, 368, 369, 413, 418, 421, 687, 767, 799, 800, 801], "zip_with": 36, "concaten": [36, 345, 409, 491], "foo11": 36, "bar22": 36, "null_equ": [37, 440], "check": [37, 50, 118, 119, 174, 178, 288, 325, 326, 383, 384, 386, 389, 390, 396, 398, 440, 614, 639, 643, 659, 710, 731, 735, 751, 773, 774, 784, 796, 797], "equal": [37, 41, 53, 218, 219, 220, 221, 222, 223, 225, 226, 227, 279, 285, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 484, 647, 648, 653, 664, 739, 740, 745, 756, 773, 774, 784, 796, 797, 803], "compar": [37, 98, 311, 440, 796, 797], "consid": [37, 59, 100, 106, 138, 139, 140, 149, 219, 220, 221, 222, 223, 225, 226, 227, 241, 281, 287, 292, 315, 322, 347, 348, 349, 357, 440, 441, 442, 498, 555, 567, 600, 696, 785], "retriev": [38, 611, 612, 665, 707, 708, 757], "maintain_ord": [40, 64, 66, 98, 101, 116, 121, 249, 255, 278, 311, 474, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569], "start": [40, 41, 54, 83, 101, 107, 159, 174, 240, 278, 305, 317, 454, 489, 496, 541, 543, 582, 584, 585, 592, 594, 598, 599, 600, 601, 604, 605, 607, 608, 610, 628, 639, 643, 655, 659, 672, 673, 674, 676, 677, 683, 685, 688, 690, 691, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 724, 735, 747, 751, 772, 773, 774, 776, 780, 784, 786, 787, 788, 805], "group": [40, 41, 42, 62, 64, 66, 100, 101, 113, 116, 121, 206, 241, 242, 249, 278, 279, 280, 483, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 616, 644, 667, 668, 669, 670, 712, 736], "make": [40, 41, 42, 62, 69, 101, 157, 158, 215, 278, 279, 280, 368, 369, 491, 515, 545, 549, 606, 657, 664, 702, 749, 756, 773, 774, 776, 780, 782, 786, 788], "sure": [40, 69, 278, 484, 491, 545, 549, 773, 774, 776, 782], "consist": [40, 278], "expens": [40, 97, 278, 327, 773, 774, 780, 784, 787, 788], "work": [40, 42, 71, 98, 137, 138, 139, 140, 168, 255, 278, 280, 311, 344, 347, 348, 349, 377, 474, 616, 650, 666, 712, 742, 774, 775], "we": [40, 53, 84, 186, 285, 288, 328, 616, 712, 762, 773, 774, 775, 784, 805], "agg": [40, 41, 42, 116, 121, 165, 186, 241, 249, 260, 278, 280], "sort": [40, 41, 42, 53, 64, 66, 101, 130, 132, 165, 186, 231, 242, 258, 260, 279, 280, 285, 337, 340, 443, 474, 476, 486, 555, 560, 570, 579, 669, 670, 671], "11": [40, 42, 113, 152, 153, 173, 207, 226, 240, 278, 280, 328, 427, 489, 597, 600, 605, 664, 693, 696, 701, 794], "loop": 40, "sub_df": 40, "index_column": [41, 42, 279, 280], "everi": [41, 88, 91, 101, 144, 145, 146, 147, 148, 149, 161, 167, 250, 272, 279, 310, 353, 354, 355, 356, 357, 371, 462, 496, 600, 605, 611, 612, 615, 618, 619, 628, 631, 696, 701, 707, 708, 711, 714, 715, 724, 727, 773, 774, 784], "period": [41, 42, 80, 81, 101, 156, 157, 158, 207, 232, 233, 279, 280, 302, 303, 367, 368, 369, 416, 445, 446, 525, 600, 605, 627, 696, 701, 723], "offset": [41, 42, 83, 101, 107, 240, 279, 280, 305, 317, 454, 597, 600, 605, 628, 655, 693, 696, 701, 724, 747, 773, 774, 776, 780, 784, 786, 787, 788], "truncat": [41, 279, 295], "include_boundari": [41, 279], "close": [41, 42, 219, 220, 221, 222, 223, 225, 226, 227, 239, 279, 280, 453, 525], "closedwindow": [41, 42, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 525], "dynamicgroupbi": 41, "int32": [41, 42, 135, 253, 279, 280, 472, 547, 587, 610, 679, 706, 800, 801], "window": [41, 42, 149, 156, 157, 158, 206, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 279, 280, 357, 367, 368, 369, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 492, 525, 600, 605, 696, 701, 813], "calcul": [41, 150, 156, 157, 158, 187, 194, 224, 239, 257, 279, 359, 367, 368, 369, 399, 433, 453, 457, 477, 615, 711], "assign": [41, 212, 279, 421, 498, 657, 658, 749, 750, 799], "normal": [41, 155, 187, 239, 279, 365, 399, 453], "groupbi": [41, 42, 62, 116, 121, 149, 165, 186, 206, 241, 242, 249, 260, 279, 280, 357, 483, 616, 712, 813], "member": [41, 279, 390], "seen": [41, 134, 169, 279], "roll": [41, 42, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 279, 280, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 492], "slot": [41, 149, 150, 279, 357, 359, 615, 711], "interv": [41, 42, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 525, 600, 601, 605, 674, 676, 677, 683, 685, 688, 690, 691, 694, 695, 696, 697, 699, 700, 701, 703, 704, 706], "length": [41, 42, 83, 149, 218, 219, 220, 221, 222, 223, 225, 226, 227, 240, 279, 280, 295, 305, 345, 357, 400, 414, 427, 428, 429, 430, 431, 432, 434, 435, 436, 454, 491, 498, 600, 605, 628, 635, 648, 650, 653, 655, 664, 696, 701, 724, 740, 742, 745, 747, 756, 769, 787, 799, 806], "argument": [41, 42, 57, 65, 66, 86, 94, 101, 111, 113, 219, 220, 221, 222, 223, 225, 226, 227, 264, 272, 279, 280, 294, 318, 322, 490, 600, 605, 696, 701, 773, 778, 780], "languag": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 600, 605, 693, 696, 701, 784], "1n": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 600, 605, 693, 696, 701], "nanosecond": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 527, 597, 600, 601, 605, 693, 696, 697, 701], "1u": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 600, 605, 693, 696, 701], "microsecond": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 295, 526, 527, 597, 600, 601, 605, 693, 696, 701], "1m": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 589, 591, 596, 597, 600, 602, 605, 684, 686, 692, 693, 696, 698, 701], "millisecond": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 527, 597, 600, 605, 693, 696, 701], "second": [41, 42, 53, 101, 109, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 486, 525, 526, 527, 597, 600, 605, 661, 693, 696, 701], "minut": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 525, 526, 527, 597, 600, 605, 693, 696, 701], "1h": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 600, 605, 677, 693, 696, 701], "hour": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 525, 526, 527, 597, 600, 605, 693, 696, 701], "1d": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 525, 580, 586, 593, 597, 600, 605, 609, 672, 676, 678, 680, 681, 682, 687, 689, 693, 696, 699, 700, 701, 704, 705], "dai": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 516, 524, 525, 526, 527, 584, 594, 597, 598, 599, 600, 604, 605, 607, 608, 610, 693, 694, 696, 701, 704], "1w": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 600, 605, 693, 696, 701], "week": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 527, 597, 600, 605, 608, 693, 696, 701, 704], "1mo": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 525, 583, 597, 600, 605, 673, 675, 690, 693, 694, 695, 696, 701, 703], "calendar": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 503, 504, 587, 597, 600, 605, 610, 679, 693, 696, 701, 706], "month": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 524, 526, 582, 597, 600, 605, 674, 693, 696, 701], "1y": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 600, 605, 693, 696, 701, 706], "year": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 524, 526, 587, 597, 598, 600, 605, 607, 679, 693, 694, 696, 701, 703], "1i": [41, 42, 53, 101, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 285, 597, 693], "combin": [41, 42, 43, 53, 101, 279, 280, 285, 304, 538, 539, 555], "3d12h4m25": [41, 42, 53, 101, 279, 280, 285, 525, 600, 605, 696, 701], "12": [41, 42, 53, 101, 147, 207, 234, 279, 280, 285, 304, 328, 437, 498, 524, 525, 526, 585, 594, 599, 600, 605, 610, 690, 696, 701], "25": [41, 42, 53, 101, 105, 106, 279, 280, 285, 290, 313, 314, 315, 365, 416, 525, 600, 605, 610, 696, 701], "integ": [41, 42, 137, 168, 214, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 335, 336, 344, 377, 423, 442, 508, 509, 510, 511, 517, 518, 519, 520, 601, 697, 762, 799, 800], "10i": [41, 42, 279, 280], "often": [41, 42, 186, 215, 279, 280], "ascend": [41, 42, 279, 280, 486], "sens": [41, 42, 101, 279, 280, 773, 776, 780, 786, 788], "dynam": [41, 219, 220, 221, 222, 223, 225, 226, 227, 279], "indic": [41, 42, 176, 179, 180, 182, 183, 184, 219, 220, 221, 222, 223, 225, 226, 227, 230, 236, 249, 279, 280, 322, 387, 391, 392, 393, 394, 395, 439, 450, 461, 485, 551, 772, 773, 774, 776, 780, 784, 798, 799, 801], "need": [41, 42, 82, 93, 234, 279, 280, 447, 470, 647, 667, 739, 773, 774, 775, 796, 797], "temporarili": [41, 42, 279, 280, 480], "so": [41, 42, 66, 279, 280, 480, 486, 618, 714, 784], "matter": [41, 42, 279, 280], "neg": [41, 80, 81, 83, 232, 233, 240, 279, 302, 303, 305, 317, 445, 446, 454, 627, 628, 655, 723, 724, 747], "lower": [41, 68, 174, 194, 211, 214, 223, 272, 279, 296, 420, 423, 432, 484, 525, 568, 771, 784], "_lower_bound": [41, 279], "_upper_bound": [41, 279], "impact": [41, 279], "harder": [41, 279], "parallel": [41, 53, 54, 149, 279, 284, 285, 357, 490, 491, 554, 616, 712, 780, 782, 788, 813], "tempor": [41, 42, 219, 220, 221, 222, 223, 225, 226, 227, 279, 280, 525], "date_rang": [41, 101, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706], "low": [41, 484, 525, 601], "16": [41, 42, 105, 106, 173, 220, 280, 304, 314, 315, 416, 451, 463, 508, 517, 527, 528, 696, 701, 790], "high": [41, 484, 525, 601], "30m": 41, "\u03bc": [41, 42, 53, 101, 280, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706], "00": [41, 53, 101, 525, 527, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 661, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 753], "02": [41, 42, 101, 228, 280, 525, 527, 580, 584, 585, 586, 592, 593, 594, 601, 602, 604, 607, 609, 672, 673, 676, 677, 678, 680, 681, 682, 683, 685, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705], "03": [41, 42, 101, 280, 525, 580, 583, 584, 586, 593, 594, 600, 601, 602, 604, 605, 607, 609, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 703, 704, 705], "alia": [41, 42, 55, 99, 105, 106, 121, 132, 138, 144, 145, 146, 147, 148, 165, 167, 172, 177, 178, 189, 190, 206, 207, 214, 253, 260, 280, 282, 287, 312, 314, 315, 340, 401, 487, 488, 492, 493, 497, 527, 528, 544, 580, 582, 583, 584, 586, 589, 591, 593, 596, 597, 598, 601, 602, 604, 608, 609, 616, 637, 639, 640, 643, 645, 647, 650, 655, 657, 658, 659, 667, 672, 673, 676, 693, 700, 705, 712, 749, 750, 783, 793, 794], "time_min": 41, "time_max": 41, "23": [41, 42, 280, 526, 585, 600, 677, 790], "boundari": [41, 138, 139, 140, 347, 348, 349], "ad": [41, 97, 105, 120, 314, 496], "time_count": 41, "_lower_boundari": 41, "_upper_boundari": 41, "u32": [41, 63, 107, 116, 128, 129, 130, 131, 132, 143, 144, 189, 202, 205, 212, 253, 256, 317, 337, 338, 339, 342, 421, 472, 475, 476, 485, 558, 562, 565, 566, 569, 582, 585, 592, 594, 598, 599, 601, 607, 608, 611, 612, 622, 640, 647, 650, 674, 677, 683, 685, 688, 690, 691, 694, 695, 697, 703, 704, 718, 732, 739, 742], "end": [41, 159, 174, 281, 287, 489, 541, 628, 639, 643, 655, 659, 724, 735, 747, 751, 773, 774, 784], "lower_bound": 41, "upper_bound": 41, "time_agg_list": 41, "belong": 41, "kei": [41, 53, 64, 66, 70, 73, 285, 298, 567], "04": [41, 101, 525, 527, 582, 583, 586, 592, 593, 594, 598, 600, 601, 602, 607, 608, 609, 661, 673, 675, 678, 683, 685, 688, 689, 690, 691, 695, 697, 698, 699, 703, 704, 705, 753, 785], "idx": [41, 442, 632, 728], "arang": [41, 100, 557, 668], "eager": [41, 100, 484, 485, 762, 783, 793, 811, 813], "2i": 41, "3i": 41, "a_agg_list": 41, "rollinggroupbi": 42, "dynamic_groupbi": [42, 280], "now": [42, 280], "individu": [42, 121, 133, 136, 245, 280, 345, 645, 737, 800], "groupby_dynam": [42, 280], "45": [42, 280, 600, 605, 640, 645, 696, 701, 732, 737], "48": [42, 280], "42": [42, 43, 280, 379], "09": [42, 280, 674], "18": [42, 173, 280, 295, 600, 605, 609, 705], "19": [42, 53, 280, 600, 696, 701], "32": [42, 234, 280, 360, 416, 432, 506, 509, 518, 694, 790], "08": [42, 280, 525, 527, 600, 661, 696, 701, 753, 796, 797], "43": [42, 280], "dt": [42, 114, 280, 322, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 609, 610, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 811, 816], "with_column": [42, 65, 121, 135, 138, 170, 173, 174, 177, 180, 182, 183, 184, 206, 207, 253, 280, 294, 484, 488, 492, 493, 497, 528, 579, 616, 643, 647, 650, 651, 652, 655, 657, 658, 659, 661, 664, 666, 671, 712, 753, 793, 794, 805], "strptime": [42, 280, 603, 699], "out": [42, 176, 179, 280, 618, 714, 785, 790], "2d": [42, 93, 280, 674], "sum_a": [42, 280], "min_a": [42, 280], "max_a": [42, 280], "assert": [42, 280, 378, 796, 797, 799, 800, 801, 813], "to_list": [42, 280, 632, 728], "seed": [43, 76, 170, 229, 235, 379, 438, 449], "seed_1": [43, 170, 379], "seed_2": [43, 170, 379], "seed_3": [43, 170, 379], "hash": 43, "uint64": [43, 170, 214, 379, 423, 523, 611, 612, 707, 708], "random": [43, 76, 170, 212, 229, 235, 379, 421, 438, 449, 799, 800, 801], "u64": [43, 170, 214, 379], "4238614331852490969": 43, "17976148875586754089": 43, "4702262519505526977": 43, "18144177983981041107": 43, "in_plac": [46, 82, 103, 422, 424, 448, 455], "grown": 46, "stack": [46, 103, 491], "modifi": [46, 103, 424, 581, 609, 673, 705, 754, 755, 773, 774, 784], "insert": [47, 71, 97, 99, 230, 312, 439, 638, 664, 730, 756, 773, 774, 776, 780, 784, 786, 787, 788], "certain": [47, 101, 159, 264, 295, 322, 532, 541], "baz": [47, 48, 66, 99, 283, 312, 567, 656, 658, 750], "intermedi": [48, 283, 382], "linear": [48, 68, 173, 199, 211, 223, 283, 296, 382, 420, 432, 492, 493, 568, 613, 709, 771], "mask": [49, 51, 175, 177, 185, 375, 385, 388, 397, 417, 418, 441, 479, 614, 710, 731], "duplic": [49, 52, 53, 98, 175, 284, 285, 311, 385, 486, 531], "uniqu": [51, 62, 131, 177, 185, 202, 256, 258, 339, 358, 388, 397, 410, 475, 476, 566, 768, 798, 799, 801], "left_on": [52, 53, 284, 285], "right_on": [52, 53, 284, 285], "joinstrategi": [52, 284], "inner": [52, 151, 284, 322, 360, 381, 480, 512, 620, 716], "suffix": [52, 53, 180, 182, 183, 184, 217, 284, 285, 555, 643, 735], "_right": [52, 53, 284, 285], "like": [52, 212, 272, 297, 421, 525, 567, 616, 637, 712, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781], "fashion": [52, 264, 272, 295, 304, 490], "outer": [52, 284], "semi": [52, 284], "anti": [52, 284, 322, 441, 442], "cross": [52, 284], "join_asof": [52, 284], "categor": [52, 114, 136, 253, 322, 343, 472, 480, 551, 803], "see": [52, 133, 136, 138, 139, 140, 164, 173, 187, 195, 239, 245, 347, 348, 349, 399, 453, 603, 699, 775, 782, 796, 797, 800, 801, 818], "stringcach": 52, "other_df": [52, 284], "by_left": [53, 285], "by_right": [53, 285], "asofjoinstrategi": [53, 285], "toler": [53, 285, 796, 797], "allow_parallel": [53, 284, 285], "force_parallel": [53, 284, 285], "asof": [53, 285], "join": [53, 173, 206, 264, 272, 285, 295, 304, 480, 490], "nearest": [53, 68, 137, 168, 211, 223, 285, 296, 344, 377, 420, 432, 568, 771], "rather": [53, 285, 664, 756], "asof_join": 53, "search": [53, 285], "last": [53, 66, 84, 87, 98, 130, 132, 149, 248, 285, 306, 309, 311, 337, 340, 357, 460, 570, 582, 598, 607, 618, 631, 658, 670, 674, 694, 703, 714, 727, 750, 795], "whose": [53, 66, 159, 285, 541], "less": [53, 285, 648, 653, 658, 664, 740, 745, 750, 756, 784], "greater": [53, 239, 285, 453, 658, 750], "numer": [53, 57, 138, 139, 140, 215, 234, 285, 322, 347, 348, 349, 396, 440, 447, 813], "By": [53, 84, 285, 457, 470, 477, 762, 773, 774, 775], "done": [53, 120, 135, 285, 306, 342, 648, 653, 667, 740, 745, 773, 774, 784], "within": [53, 285, 512, 796, 797], "distanc": [53, 285], "durat": [53, 101, 253, 285, 472, 525, 583, 586, 589, 591, 593, 596, 602, 609, 675, 678, 684, 686, 689, 692, 698, 705], "allow": [53, 54, 76, 214, 229, 284, 285, 288, 316, 423, 438, 440, 480, 532, 597, 661, 693, 753, 784, 786, 787, 788, 800, 801], "physic": [53, 136, 253, 261, 284, 285, 472, 579, 671, 773, 774], "plan": [53, 54, 261, 266, 267, 277, 284, 285, 297, 304, 318], "up": [53, 137, 284, 285, 288, 344, 515, 664, 756], "gdp": 53, "2016": 53, "2017": 53, "2018": 53, "2019": 53, "record": 53, "jan": 53, "1st": 53, "4164": 53, "4411": 53, "4566": 53, "4696": 53, "popul": 53, "12th": 53, "82": 53, "66": [53, 432], "83": 53, "52": [53, 106, 228, 315], "05": [53, 101, 525, 583, 601, 673, 674, 675, 696, 701, 704, 785, 796, 797], "object": [54, 94, 113, 114, 133, 136, 154, 245, 278, 282, 297, 322, 341, 343, 363, 458, 466, 525, 546, 762, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 786, 788, 799, 800, 801, 813], "execut": [54, 261, 295, 491, 616, 712], "until": [54, 480], "request": 54, "either": [54, 57, 74, 86, 800], "call": [54, 328, 774, 800, 801, 808, 814, 815], "fetch": [54, 262, 264, 281, 287, 312, 554, 784], "small": [54, 241, 242, 272, 600, 605], "describe_plan": 54, "unoptim": [54, 267], "describe_optimized_plan": 54, "optim": [54, 69, 264, 266, 272, 288, 295, 304, 317, 490, 780, 784, 786, 787, 788], "show_graph": 54, "un": 54, "graphviz": [54, 304], "graph": [54, 282, 316, 490, 815], "advis": 54, "thei": [54, 159, 218, 427], "head": [55, 120, 190, 287, 401], "axi": [56, 57, 59, 60, 86, 292], "maximum": [56, 109, 138, 139, 197, 203, 212, 289, 347, 348, 404, 412, 417, 421, 611, 680, 707, 764, 773, 774, 784, 799, 800, 801], "null_strategi": [57, 86], "nullstrategi": [57, 86], "ignor": [57, 86, 111, 150, 203, 204, 264, 272, 318, 359, 412, 413, 490, 615, 711, 800, 801], "propag": [57, 86, 203, 204, 412, 413], "uint8": [57, 147, 148, 247, 355, 356, 459, 480, 798], "666667": [57, 156, 313], "id_var": [59, 292], "value_var": [59, 292], "variable_nam": [59, 292], "value_nam": [59, 292], "unpivot": [59, 292], "wide": [59, 100, 292], "leav": [59, 292], "identifi": [59, 292], "massag": [59, 292], "while": [59, 97, 292, 775, 800, 801], "measur": [59, 292], "just": [59, 292, 784], "non": [59, 207, 218, 219, 220, 221, 222, 223, 225, 226, 227, 292, 416, 427, 428, 429, 430, 431, 432, 434, 435, 436, 470, 488, 493, 640, 645, 732, 737], "give": [59, 187, 215, 292, 399, 584, 676, 776, 780, 786, 787, 788, 813], "chunkedarrai": [61, 322, 545], "One": [62, 66, 316, 322], "what": [62, 470, 478], "omit": [62, 799, 800, 801], "struct": [62, 96, 99, 114, 258, 312, 322, 496, 497, 632, 657, 658, 728, 749, 750, 813], "pack": 62, "expr_unique_subset": 62, "per": [62, 63, 109, 564, 566, 568, 571, 572, 573, 574, 575, 576, 577, 578, 616, 618, 712, 714, 799, 800], "df_nuniqu": 62, "context": [62, 114, 116, 121, 165, 241, 242, 258, 316, 480, 483, 494, 542, 616, 634, 712, 789, 811], "equival": [62, 650, 742, 754, 755], "df_agg_nuniqu": 62, "simpl": 62, "as_dict": 64, "split": [64, 167, 555, 657, 658, 749, 750], "partit": [64, 780, 782, 785], "keep": [64, 98, 101, 186, 311, 488, 773, 774, 784], "predict": [64, 66, 69, 101], "requir": [64, 94, 98, 106, 113, 156, 157, 158, 234, 255, 311, 315, 367, 368, 369, 447, 470, 474, 549, 661, 753, 796, 797], "distinct": [64, 212, 421, 524, 526, 527, 633, 729, 801], "k": [64, 187, 254, 399, 473, 579, 671], "l": [64, 167], "m": [64, 322, 465, 504, 505, 525, 527, 580, 584, 604, 609, 661, 672, 676, 699, 700, 705, 753], "func": [65, 294, 328], "arg": [65, 94, 114, 294, 328, 470, 480, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 544], "kwarg": [65, 94, 106, 114, 294, 315, 470, 480, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "self": [65, 206, 264, 272, 294, 295, 304, 327, 441, 442, 479, 490], "keyword": [65, 74, 294, 322, 780], "def": [65, 97, 294, 799, 800, 801], "cast_str_to_int": [65, 294], "col_nam": [65, 294], "aggregate_fn": 66, "pivotagg": 66, "sort_column": 66, "spreadsheet": [66, 775], "well": 66, "predefin": 66, "transpos": [66, 567], "discoveri": 66, "interpol": [68, 164, 199, 211, 223, 296, 420, 432, 568, 771], "interpolationmethod": [68, 211, 223, 296, 420, 432, 568, 771], "higher": [68, 113, 211, 223, 296, 420, 432, 568, 771], "midpoint": [68, 211, 223, 296, 420, 432, 568, 771], "contigu": [69, 491, 545, 549, 773, 774, 776, 784, 786, 787, 788], "subsequ": 69, "old": [70, 298], "new_col": 71, "val": [73, 253, 579, 671], "by_pred": 74, "accord": [74, 679], "param": [74, 800, 801], "mutual": 74, "exclus": 74, "addition": 74, "ensur": [74, 258, 288, 470, 476, 800, 801, 803], "clariti": 74, "suppli": 74, "error": [74, 135, 322, 342, 529, 620, 641, 646, 661, 668, 716, 733, 738, 753, 773, 774, 784], "anyth": 74, "toomanyrowsreturn": [74, 813], "norowsreturn": [74, 813], "inherit": 74, "rowsexcept": [74, 813], "columnar": [75, 548, 550], "frac": [76, 156, 157, 158, 229, 239, 254, 367, 368, 369, 438, 453, 473], "with_replac": [76, 229, 438], "shuffl": [76, 229, 438, 557, 668], "item": [76, 161, 167, 229, 371, 438, 491, 614, 618, 620, 658, 710, 714, 716, 750], "fraction": [76, 109, 207, 229, 416, 438, 601, 661, 697, 796, 797], "onc": [76, 229, 261, 438, 773, 774, 775], "gener": [76, 97, 229, 235, 438, 449, 632, 728, 782, 798, 799, 800, 801], "whenthen": [78, 301], "whenthenthen": [78, 301], "shift_and_fil": 80, "shift": [81, 150, 207, 233, 303, 359, 416, 446, 492, 615, 711], "shrink": [82, 234, 447, 448], "usag": [82, 448, 773, 774, 784, 800, 801], "fit": [82, 100, 234, 447, 448], "exact": [82, 661, 753, 799, 800, 801], "hold": [82, 489], "support": [83, 106, 113, 240, 305, 315, 322, 454, 491, 545, 628, 655, 724, 747, 775, 782, 798, 801], "nulls_last": [84, 130, 132, 241, 306, 337, 340], "accept": [84, 772, 773, 774, 776, 780], "descend": [84, 130, 132, 231, 306, 337, 340, 443], "ddof": [85, 102, 244, 259, 307, 313, 457, 477, 770, 791, 792, 804], "standard": [85, 157, 225, 239, 244, 307, 368, 453, 457, 587, 646, 679, 738, 790, 792], "deviat": [85, 157, 225, 244, 307, 368, 457, 792], "degre": [85, 102, 244, 259, 457, 477, 770, 791], "freedom": [85, 102, 244, 259, 457, 477, 770, 791], "21": 86, "nth": [88, 250, 310, 462, 658, 750], "arrow": [89, 110, 466, 470, 529, 545, 567, 776, 786], "mostli": [89, 165], "categoricaltyp": 89, "pyarrow": [89, 93, 94, 113, 322, 466, 469, 470, 545, 549, 773, 776, 780, 785, 790, 814], "large_str": 89, "as_seri": 90, "fruit": [90, 209, 217, 246, 643, 659, 735, 751], "car": [90, 209, 217, 246], "beetl": [90, 209, 217, 246], "audi": [90, 209, 217, 246], "28": [90, 609, 705], "300": [90, 428, 429, 431], "slow": [91, 149, 357, 547, 550, 773, 774, 784], "hot": 92, "encod": [92, 501, 522, 641, 733, 773, 774, 784], "dummi": [92, 467, 551], "foo_1": 92, "foo_2": 92, "bar_3": 92, "bar_4": 92, "ham_a": 92, "ham_b": 92, "u8": [92, 467, 480], "re": [93, 761], "attempt": [93, 470], "ll": [93, 470], "instal": [93, 94, 304, 470, 549, 773, 774, 776, 780, 782, 790], "numpy_arrai": 93, "date_as_object": 94, "sent": [94, 470], "datetime64": 94, "pandas_df": 94, "core": [94, 549], "three": [96, 793], "four": [96, 793], "five": 96, "num": [96, 174, 177, 664], "include_head": 97, "header_nam": 97, "column_nam": 97, "iter": [97, 149, 357], "diagon": [97, 491], "Will": [97, 264, 272, 295, 304, 322, 490, 764, 767], "veri": [97, 263, 350], "perhap": 97, "column_2": 97, "auto": [97, 780, 788], "name_gener": [97, 632, 728], "base_nam": 97, "my_column_": 97, "my_column_0": 97, "my_column_1": 97, "my_column_2": 97, "uniquekeepstrategi": [98, 311], "origin": [98, 186, 214, 311, 640, 644, 645, 646, 648, 653, 664, 732, 736, 737, 738, 740, 745, 756, 773, 774], "conjunct": 98, "fail": [98, 311, 328, 661, 753], "decompos": [99, 312], "field": [99, 109, 312, 496, 515, 632, 657, 658, 666, 728, 749, 750, 759], "t_a": [99, 312], "t_b": [99, 312], "t_c": [99, 312], "t_d": [99, 312], "womp": [99, 312], "t_": [99, 312], "t_struct": [99, 312], "step": [100, 484], "unstackdirect": 100, "without": [100, 149, 219, 220, 221, 222, 223, 225, 226, 227, 357, 362, 498, 600, 696, 777, 781, 785, 789], "much": [100, 149, 357], "pivot": [100, 813], "skip": [100, 328, 773, 774, 775, 784], "phase": 100, "direct": [100, 780, 782, 788], "don": [100, 149, 357, 440, 478, 483, 491, 616, 712], "experiment": [100, 106, 149, 219, 220, 221, 222, 223, 225, 226, 227, 315, 357, 498, 600, 696, 785], "subject": 100, "being": [100, 149, 219, 220, 221, 222, 223, 225, 226, 227, 357, 498, 600, 696, 773, 774, 784, 785, 805], "break": [100, 149, 219, 220, 221, 222, 223, 225, 226, 227, 357, 498, 600, 696, 785], "ascii_uppercas": 100, "g": [100, 159, 231, 234, 440, 443, 470, 541, 773, 774, 775, 776, 780, 786, 788], "h": [100, 167, 234], "col1_0": 100, "col1_1": 100, "col1_2": 100, "col2_0": 100, "col2_1": 100, "col2_2": 100, "time_column": 101, "regular": [101, 159, 489, 523, 541], "frequenc": 101, "ha": [101, 121, 149, 254, 262, 346, 357, 378, 389, 473, 483, 635, 668], "forward_fil": 101, "06": [101, 599, 610, 696, 704], "varianc": [102, 158, 187, 227, 259, 313, 369, 399, 436, 477, 804], "grow": 103, "b_squar": [105, 314], "36": [105, 314], "named_expr": [106, 315], "overwrit": [106, 272, 314, 315, 547, 773, 774, 784], "provid": [106, 315, 641, 642, 644, 646, 668, 733, 734, 736, 738, 773, 774, 782, 784, 800, 801, 818], "is_not": [106, 315], "opt": [106, 315], "via": [106, 315, 773, 774, 775, 784, 786, 788], "with_columns_kwarg": [106, 315], "row_nr": [107, 317, 442], "binaryio": [108, 110, 772, 773, 775, 776, 777, 780, 781], "bytesio": [108, 109, 110, 113, 772, 773, 774, 775, 776, 780], "path": [108, 109, 110, 111, 112, 113, 231, 297, 318, 443, 646, 738, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788], "compress": [108, 110, 113], "avrocompress": 108, "uncompress": [108, 110, 113, 776, 786], "write": [108, 109, 110, 111, 113, 138, 139, 140, 304, 318, 347, 348, 349], "apach": [108, 113, 772], "avro": [108, 772, 813], "written": [108, 109, 110, 111, 112, 113, 318], "snappi": [108, 113], "deflat": 108, "has_head": [109, 773, 774, 775, 784], "sep": [109, 493, 554, 773, 774, 784], "quot": [109, 773, 774, 784], "batch_siz": [109, 773, 774, 787], "1024": [109, 113, 773, 774, 787], "datetime_format": 109, "date_format": 109, "time_format": 109, "float_precis": 109, "null_valu": [109, 773, 774, 784], "textio": [109, 773], "_io": [109, 772, 775, 776], "pathlib": [109, 111, 112, 297, 318, 772, 775, 776, 777, 778, 779, 781, 784, 786, 787], "comma": 109, "csv": [109, 667, 773, 774, 775, 784, 813], "symbol": 109, "process": 109, "thread": [109, 554, 616, 712, 773, 774, 782, 802], "chrono": [109, 603, 661, 699, 753], "crate": 109, "precis": [109, 580, 661, 672], "timeunit": [109, 465, 504, 505, 525, 580, 604, 609, 672, 700, 705], "decim": [109, 228, 437], "dirpath": [109, 784], "new_fil": 109, "ipccompress": 110, "ipc": [110, 776, 777, 785, 786, 813], "binari": 110, "stream": [110, 264, 272, 295, 304, 490], "feather": [110, 776, 786, 813], "lz4": [110, 113], "zstd": [110, 113], "pretti": 111, "row_ori": 111, "json_lin": [111, 778], "to_str": [111, 318], "io": [111, 112, 297, 318, 778, 779, 818], "iobas": [111, 112, 297, 318, 778, 779], "serial": [111, 112], "represent": [111, 112, 253, 266, 267, 472, 579, 582, 585, 587, 588, 590, 592, 594, 595, 598, 599, 601, 607, 608, 610, 671, 674, 677, 679, 683, 685, 688, 690, 691, 694, 695, 697, 703, 704, 706, 815], "common": 111, "deprec": [111, 264, 272, 318, 490, 778, 808], "toggl": [111, 778, 803], "ndjson": [111, 778], "write_ndjson": 111, "newlin": [112, 779, 787], "delimit": [112, 638, 730, 773, 774, 779, 784, 787], "parquetcompress": 113, "compression_level": 113, "row_group_s": 113, "use_pyarrow": [113, 469, 773, 776, 780], "pyarrow_opt": [113, 780], "parquet": [113, 780, 781, 788, 813], "gzip": 113, "lzo": 113, "brotli": 113, "choos": 113, "good": 113, "fast": [113, 231, 443], "decompress": 113, "guarante": [113, 272, 773, 774], "deal": [113, 212, 322, 421, 661, 753], "older": 113, "reader": [113, 554, 774, 776, 780, 814], "disk": [113, 304], "22": [113, 489, 600, 605, 609, 661, 696, 701, 705, 753], "reduc": [113, 234, 405, 419, 447, 459, 562, 563, 565, 569, 773, 774, 780, 784, 786, 787, 788], "pressur": [113, 234, 447, 780, 787, 788], "improv": [113, 776, 786], "speed": 113, "64": [113, 208, 416, 507, 510, 519], "At": 113, "moment": [113, 187, 239, 399, 453], "featur": [113, 480], "write_t": 113, "arr": [114, 322, 470, 528, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 711, 712, 715, 716, 718, 723, 724, 727, 728, 811, 816], "namespac": [114, 133, 136, 154, 245, 322, 341, 343, 363, 458, 808, 813, 815], "relat": [114, 133, 136, 154, 245, 322, 341, 343, 363, 458], "cat": [114, 253, 322, 480, 493, 498, 579, 639, 662, 663, 671, 731, 811, 816], "meta": [114, 813], "absolut": [115, 323, 796, 797], "94": 116, "renam": [117, 196, 468, 637, 666, 759, 773, 774, 811], "confus": [118, 180, 182], "tt": 118, "tf": [118, 119], "ff": [118, 119], "upcast": 120, "tail": [120, 239, 453, 555], "project": [121, 241, 242, 264, 272, 288, 295, 304, 490, 784, 786, 787, 788], "depend": [121, 212, 421, 483, 542, 611, 612, 634, 707, 708, 790], "expect": [121, 288, 483, 534, 537, 540], "assum": [121, 288, 668], "a_times_2": 121, "invers": [122, 123, 124, 125, 126, 127, 329, 330, 331, 332, 333, 334], "cosin": [122, 123, 141, 142, 195, 329, 330, 351, 352], "570796": [122, 124, 329, 331], "hyperbol": [123, 125, 127, 142, 238, 252, 330, 332, 334, 352, 452, 464], "sine": [124, 125, 195, 237, 238, 331, 332, 451, 452], "881374": [125, 332], "tangent": [126, 127, 251, 252, 333, 334, 463, 464], "785398": [126, 333], "inf": [127, 176, 179, 334, 387, 391, 416, 498, 800, 801], "maxim": [128, 335, 562, 574], "minim": [129, 234, 336, 407, 447, 565, 577, 612, 708], "would": [130, 132, 212, 337, 340, 421, 470, 486, 618, 634, 714], "arg_sort": [132, 340], "exprlistnamespac": 133, "page": [133, 136, 245, 776, 786, 813], "full": [133, 136, 245, 504, 773, 774, 784], "detail": [133, 136, 245, 782, 796, 797, 818], "next": [134, 212, 421], "strict": [135, 322, 342, 440, 641, 661, 733, 753], "throw": [135, 322, 342, 646, 738], "due": [135, 342], "overflow": [135, 147, 148, 247, 322, 342, 355, 356, 459], "i32": [135, 234, 547, 610, 679, 706, 800, 805], "exprcatnamespac": 136, "set_ord": 136, "round": [137, 168, 251, 344, 377], "min_val": [138, 140, 347, 349], "max_val": [138, 139, 347, 348], "otherwis": [138, 139, 140, 156, 157, 158, 214, 328, 347, 348, 349, 367, 368, 369, 423, 441, 442, 805], "foo_clip": 138, "clip": [139, 140, 348, 349], "543081": [142, 352], "cumul": [144, 145, 146, 147, 148, 353, 354, 355, 356, 496, 497], "len": [144, 216, 425, 498, 648, 653, 664, 740, 745, 756, 799, 800], "a_revers": [144, 145, 146, 147, 148, 196, 217, 246], "product": [147, 151, 355, 360], "int16": [147, 148, 247, 355, 356, 459], "uint16": [147, 148, 247, 355, 356, 459], "prevent": [147, 148, 247, 355, 356, 459], "issu": [147, 148, 247, 355, 356, 459, 773, 774, 775, 784], "min_period": [149, 156, 157, 158, 218, 219, 220, 221, 222, 223, 225, 226, 227, 357, 367, 368, 369, 427, 428, 429, 430, 431, 432, 434, 435, 436], "slide": [149, 357], "increas": [149, 357, 780], "anoth": [149, 242, 328, 357, 440, 580, 606, 672, 702], "realli": [149, 357], "o": [149, 167, 254, 357, 473, 776, 786], "complex": [149, 254, 357, 473], "visit": [149, 357], "null_behavior": [150, 359, 615, 711], "nullbehavior": [150, 359, 615, 711], "th": [150, 239, 359, 453, 615, 711], "discret": [150, 155, 359, 365, 498, 615, 711], "handl": [150, 359, 615, 641, 664, 711, 733, 756, 773, 774, 784], "44": 151, "drop_nul": 152, "drop_nan": 153, "exprdatetimenamespac": 154, "718281828459045": [155, 192, 365, 402], "formula": [155, 365], "pk": [155, 365], "probabl": [155, 365, 769, 806], "doesn": [155, 365, 478, 784], "459148": 155, "754888": 155, "com": [156, 157, 158, 367, 368, 369, 644, 736], "span": [156, 157, 158, 367, 368, 369], "half_lif": [156, 157, 158, 367, 368, 369], "alpha": [156, 157, 158, 264, 272, 295, 304, 367, 368, 369, 490], "adjust": [156, 157, 158, 239, 367, 368, 369, 453], "exponenti": [156, 157, 158, 160, 367, 368, 369, 370], "weight": [156, 157, 158, 218, 219, 220, 221, 222, 223, 225, 226, 227, 239, 367, 368, 369, 427, 428, 429, 430, 431, 432, 434, 435, 436, 453], "averag": [156, 212, 367, 421], "decai": [156, 157, 158, 367, 368, 369], "term": [156, 157, 158, 367, 368, 369, 647, 650, 739, 742], "mass": [156, 157, 158, 367, 368, 369], "gamma": [156, 157, 158, 367, 368, 369], "foral": [156, 157, 158, 367, 368, 369], "geq": [156, 157, 158, 367, 368, 369], "theta": [156, 157, 158, 367, 368, 369], "half": [156, 157, 158, 367, 368, 369], "life": [156, 157, 158, 367, 368, 369], "exp": [156, 157, 158, 367, 368, 369], "ln": [156, 157, 158, 367, 368, 369], "smooth": [156, 157, 158, 367, 368, 369], "factor": [156, 157, 158, 253, 367, 368, 369, 472], "directli": [156, 157, 158, 367, 368, 369, 800, 801], "leq": [156, 157, 158, 367, 368, 369], "divid": [156, 157, 158, 187, 367, 368, 369, 399, 600, 605, 696, 701], "begin": [156, 157, 158, 367, 368, 369, 644, 736], "account": [156, 157, 158, 367, 368, 369, 597, 693], "imbal": [156, 157, 158, 367, 368, 369], "rel": [156, 157, 158, 367, 368, 369, 567, 597, 693, 796, 797], "ew": [156, 157, 158, 367, 368, 369], "w_i": [156, 157, 158, 367, 368, 369], "recurs": [156, 157, 158, 367, 368, 369], "y_0": [156, 157, 158, 367, 368, 369], "x_0": [156, 157, 158, 367, 368, 369], "y_t": [156, 157, 158, 367, 368, 369], "y_": [156, 157, 158, 367, 368, 369], "x_t": [156, 157, 158, 367, 368, 369], "observ": [156, 157, 158, 367, 368, 369], "428571": 156, "bia": [157, 158, 187, 224, 239, 368, 369, 399, 433, 453], "correct": [157, 158, 187, 224, 239, 288, 368, 369, 399, 433, 453, 775], "unbias": [157, 158, 368, 369], "963624": [157, 368], "928571": [158, 369], "wildcard": [159, 481, 489, 496, 541, 543, 811], "regex": [159, 489, 541, 639, 640, 643, 644, 645, 651, 652, 659, 731, 732, 735, 736, 737, 743, 744, 751], "aa": [159, 541], "ba": [159, 541], "cc": [159, 541], "718282": 160, "389056": 160, "54": 160, "59815": 160, "expand": [161, 167, 215, 371], "extend": [162, 327, 372], "group_col": [165, 260], "g1": [165, 206, 260], "g2": [165, 206, 260], "lt": [165, 260], "gte": [165, 260], "explod": 167, "turn": [167, 258, 264, 272, 288, 295, 490, 773, 774, 784, 803], "hello": [167, 481, 716], "world": [167, 716], "r": [167, 640, 644, 645, 651, 732, 736, 737, 743], "word": 167, "down": [168, 377, 784, 786, 787, 788], "latest": [169, 635], "4629889412789719550": 170, "6959506404929392568": 170, "16386608652769605760": 170, "11638928888656214026": 170, "11040941213715918520": 170, "fmt": [172, 282, 544, 603, 661, 699, 753], "cumsum": [172, 282], "regrid": 173, "grid": 173, "df_original_grid": 173, "grid_point": 173, "df_new_grid": 173, "include_bound": 174, "primit": [174, 178, 470], "exclud": [174, 489, 791, 800, 801], "finit": [176, 387, 791], "optional_memb": [178, 390], "infinit": [179, 391], "_isnan": 180, "b_isnan": 180, "negat": 181, "_is_not_nan": 182, "b_is_not_nan": 182, "_not_nul": 183, "a_not_nul": 183, "b_not_nul": 183, "_isnul": 184, "a_isnul": 184, "b_isnul": 184, "root": [186, 196, 209, 243, 246, 456, 636], "With": [186, 775], "fisher": [187, 239, 399, 453], "pearson": [187, 239, 399, 453, 770], "dataset": [187, 399, 773, 774, 784, 785, 813], "fourth": [187, 399], "central": [187, 239, 399, 453], "squar": [187, 243, 399, 456, 557, 668], "definit": [187, 399], "subtract": [187, 399], "distribut": [187, 239, 399, 453], "elimin": [187, 399], "come": [187, 399, 808, 814, 815], "bias": [187, 239, 399, 453], "scipi": [187, 239, 399, 453], "stat": [187, 239, 399, 453, 813], "153061": 187, "logarithm": [192, 193, 402, 403], "584963": 192, "30103": 193, "60206": 193, "lowest": 194, "9223372036854775808": 194, "agg_list": 195, "elementwis": [195, 218, 219, 220, 221, 222, 223, 225, 226, 227, 427, 428, 429, 430, 431, 432, 434, 435, 436, 481, 482], "third": 195, "parti": 195, "librari": [195, 529, 536, 818], "book": 195, "to_numpi": 195, "argmax": 195, "_revers": [196, 217, 246], "b_revers": [196, 217, 246], "most": [201, 207, 258, 408, 416, 476, 545, 635, 658, 750], "occur": [201, 212, 264, 272, 295, 304, 408, 421, 490], "poison": [203, 204, 412, 413], "encount": [203, 204, 412, 413, 529, 646, 738, 791], "nanmax": [203, 204, 412, 413], "wherea": [203, 204, 281, 287, 412, 413], "subgroup": 206, "postgr": [206, 782], "max_by_group": 206, "percentag": [207, 416, 798, 800, 801], "recent": [207, 416], "least": [207, 258, 416, 476, 534, 800], "previou": [207, 416], "percent": [207, 416], "090909": 207, "expon": 208, "power": 208, "27": [208, 569, 599, 610], "reverse_": 209, "reverse_a": 209, "reverse_fruit": 209, "reverse_b": 209, "reverse_car": 209, "rankmethod": [212, 421], "ti": [212, 421], "appropri": [212, 421], "ordin": [212, 421, 598, 694], "avail": [212, 272, 421, 554, 799, 808, 811, 814, 815, 816], "competit": [212, 421], "highest": [212, 257, 421, 791], "immedi": [212, 421, 793], "correspond": [212, 421, 587, 679], "repeat": [213, 215, 776, 786], "sign": [214, 423, 508, 509, 510, 511, 597, 664, 693, 756], "bit": [214, 423, 506, 507, 508, 509, 510, 511, 517, 518, 519, 520, 639, 731], "unsign": [214, 423, 517, 518, 519, 520], "64bit": [214, 423], "safe": [214, 423, 470], "coerc": 215, "coercion": [215, 264, 272, 295, 304, 490], "op": [215, 801], "dim": [216, 425], "flat": [216, 425], "fruits_revers": [217, 246], "cars_revers": [217, 246], "window_s": [218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "rolling_min": [218, 427], "rolling_max": [218, 427], "rolling_mean": [218, 427], "rolling_sum": [218, 427], "multipli": [218, 219, 220, 221, 222, 223, 225, 226, 227, 427, 428, 429, 430, 431, 432, 434, 435, 436], "358899": 218, "041452": 218, "567764": 218, "travers": [219, 220, 222, 225, 226, 227, 428, 429, 431, 434, 435, 436], "vector": [219, 220, 222, 225, 226, 227, 428, 429, 431, 434, 435, 436], "fix": [219, 220, 221, 222, 223, 225, 226, 227, 609, 705, 775, 799, 800], "5h": [219, 220, 221, 222, 223, 225, 226, 227], "groupby_rol": [219, 220, 221, 222, 223, 225, 226, 227, 279], "cach": [219, 220, 221, 222, 223, 225, 226, 227, 264, 272, 295, 304, 480, 490, 776, 784, 786, 788, 803], "quantil": [223, 432], "33": [223, 228, 432, 489], "skew": [224, 433], "527525": [225, 434], "333333": [227, 416, 436], "digit": [228, 437, 664, 732, 756], "17": [228, 351, 696], "maintain": [230, 255, 439, 474], "downstream": [231, 443], "code": [231, 443], "incorrect": [231, 443, 609, 668, 705], "care": [231, 443], "extrema": [234, 447], "112": 234, "129": 234, "i8": [234, 426], "i16": 234, "8589934592": 234, "1073741824": 234, "content": [235, 258, 449], "modul": 235, "175201": [238, 452], "sampl": [239, 453, 557, 668, 773, 774], "about": [239, 453, 547], "unimod": [239, 453], "continu": [239, 453], "skewtest": [239, 453], "enough": [239, 453, 616, 712], "speak": [239, 453], "coeffici": [239, 453], "g_1": [239, 453], "m_3": [239, 453], "m_2": [239, 453], "m_i": [239, 453], "sum_": [239, 453], "texttt": [239, 453], "k_3": [239, 453], "k_2": [239, 453], "sqrt": [239, 453], "343622": 239, "whole": [241, 242, 644, 736, 775], "larg": [241, 242, 567], "larger": [241, 791], "414214": [243, 456], "exprstringnamespac": 245, "to_uppercas": 245, "taken": [249, 628, 655, 724, 747], "56": [251, 790], "761594": [252, 464], "replic": [253, 472], "vals_phys": 253, "largest": [254, 473], "smallest": [254, 473], "appear": [256, 475], "value_count": 256, "might": [256, 634, 773, 774, 784], "id": [256, 258, 475, 557, 651, 652, 668], "9223372036854775807": 257, "multithread": 258, "off": [258, 264, 272, 288, 295, 490, 773, 774, 784, 803], "ldf": [261, 263, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 667, 668, 669, 670], "hit": 261, "node": [261, 282, 288, 295], "type_coercion": [264, 266, 272, 295, 304, 490], "predicate_pushdown": [264, 266, 272, 288, 295, 304, 490], "projection_pushdown": [264, 266, 272, 288, 295, 304, 490], "simplify_express": [264, 266, 272, 295, 304, 490], "string_cach": [264, 272, 490], "no_optim": [264, 272, 288, 295, 490], "slice_pushdown": [264, 266, 272, 288, 295, 304, 490], "common_subplan_elimin": [264, 266, 272, 295, 304, 490], "allow_stream": [264, 266, 272, 295, 304, 490], "huge": 264, "saver": 264, "pushdown": [264, 272, 288, 295, 304, 317, 441, 442, 490], "simplifi": [264, 272, 295, 304, 490], "pleas": [264, 272], "global": [264, 272, 480, 800, 803], "try": [264, 272, 295, 304, 490, 538, 539, 773, 774, 775, 776, 780, 784, 786, 788], "branch": [264, 272, 295, 304, 490], "subplan": [264, 272, 295, 304, 490], "part": [264, 272, 295, 304, 316, 490, 545, 657, 658, 674, 677, 683, 685, 688, 690, 691, 697, 706, 749, 750], "lf": [270, 275, 300, 321], "n_row": [272, 772, 773, 774, 776, 780, 784, 786, 787, 788], "500": [272, 428, 429, 431, 683, 685, 691, 697], "purpos": 272, "scan": [272, 281, 287, 547, 550, 773, 774, 780, 784, 785, 786, 787, 788], "help": [272, 811], "final": [272, 788], "influenc": [272, 288], "read_json": [277, 318], "lazygroupbi": [278, 279, 280], "NOT": [278, 666], "typeerror": 278, "subscript": 278, "load": [281, 287, 782, 813], "validate_output_schema": 288, "past": 288, "paramount": 288, "hard": 288, "bug": [288, 668], "caller": [288, 668], "invari": 288, "upheld": 288, "prune": 288, "show_plot": 295, "truncate_nod": 295, "figsiz": [295, 304], "gantt": 295, "chart": 295, "matplotlib": [295, 304], "plot": [295, 304], "from_json": 297, "write_json": 297, "output_path": 304, "raw_output": 304, "figur": 304, "dot": 304, "290994": 307, "extern": 316, "access": 316, "pars": [319, 661, 753, 773, 774, 775, 784, 786, 787], "under": [321, 811, 816], "datetimeindex": [322, 549], "nan_to_nul": 322, "dtype_if_empti": 322, "arraylik": 322, "position": 322, "posit": 322, "pattern": [322, 441, 442, 639, 640, 644, 645, 651, 652, 731, 732, 736, 737, 743, 744, 773, 774, 784, 786, 788], "scenario": 322, "through": [322, 782], "s3": [322, 785], "inner_dtyp": 322, "time_unit": [322, 504, 505, 525, 609, 705], "u": [322, 465, 504, 505, 525, 580, 584, 604, 609, 661, 672, 676, 700, 705, 783], "sr": 324, "new_aliased_sr": 324, "append_chunk": 327, "super": 327, "skip_nul": 328, "special": [328, 773, 774, 784], "141593": 329, "292432": 330, "549306": 334, "listnamespac": 341, "catnamespac": 343, "12345": [344, 377, 437], "56789": [344, 377, 437], "901234": [344, 377, 437], "concat": [345, 409, 492, 493], "math": [351, 451, 463], "pi": [351, 451, 463], "1232e": 351, "quick": 358, "mix": 358, "series_num": 358, "581139": 358, "series_str": 358, "datetimenamespac": 363, "005": 365, "06293300616044681": 365, "65": 365, "8568409950394724": 365, "4000000": 366, "814697265625": 366, "lit": [374, 496, 497, 543, 769, 794, 805, 806], "bitmask": 378, "swiftli": 378, "2374023516666777365": 379, "10386026231460783898": 379, "17796317186427479491": 379, "datelik": 384, "sublist": [390, 611, 612, 614, 615, 617, 618, 619, 620, 621, 628, 631, 707, 708, 710, 711, 713, 714, 715, 716, 717, 724, 727], "timedelta": [404, 407, 412, 413, 488, 525, 582, 584, 585, 592, 594, 597, 598, 599, 600, 601, 604, 605, 607, 608, 610, 680, 682, 687, 693, 696, 701], "166667": 416, "142857": 416, "125": 416, "128": 416, "512": 416, "peak": [417, 418], "nanstd": 427, "858612": 427, "200": [428, 429, 431], "400": [428, 429, 431], "150": 429, "250": 429, "350": 429, "450": 429, "381802": 433, "dev": 434, "57": 437, "frequent": [441, 442], "to_fram": [441, 442, 600, 605, 661, 665, 666, 749, 750, 753], "mutat": 442, "with_row_count": 442, "exactli": [448, 657, 658, 749, 750, 796, 797, 800, 801], "actual": [448, 775, 800, 801], "2246e": [451, 463], "syntact": [456, 497, 541, 542, 552, 771, 789, 794], "sugar": [456, 497, 541, 542, 552, 771, 789, 794], "delta": [457, 477, 505, 770, 791], "divisor": [457, 477], "stringnamespac": 458, "6331e16": 463, "lib": [466, 545], "int64arrai": 466, "a_1": [467, 657, 749], "a_2": 467, "a_3": 467, "123": [468, 640, 645, 652, 732, 737, 744], "456": 468, "convers": [469, 470, 661, 753, 813], "zero_copy_onli": 470, "writabl": 470, "complet": [470, 555], "view": 470, "know": [470, 478, 650, 742], "presenc": 470, "immut": 470, "made": 470, "ignore_nul": 478, "seriesview": 478, "unless": [478, 546], "manag": 480, "categori": [480, 498, 579, 671, 803, 813], "invalid": [480, 641, 646, 733, 738, 773, 774, 784], "outermost": 480, "exit": 480, "color": [480, 557, 668], "red": [480, 557, 668], "green": [480, 557, 668], "blue": 480, "yellow": 480, "succe": [480, 773, 774, 784], "df_join": 480, "thing": [481, 542, 784], "columnwis": [481, 482], "AND": 481, "bitwis": [481, 482], "OR": 482, "returns_scalar": 483, "Be": 484, "eagerli": [485, 783], "oppos": 485, "lazili": [485, 773, 774, 784, 786, 787, 788], "to_seri": [485, 632, 728], "argsort": 486, "hamburg": 489, "lazy_fram": 490, "threadpool": 490, "concatmethod": 491, "relev": 491, "lag": 492, "mimic": 492, "a_lag_": 492, "a_rol": 492, "dog": [493, 639, 662, 663, 731], "plai": 493, "swim": 493, "walk": 493, "full_sent": 493, "covari": 495, "intoexpr": [496, 543], "include_init": 496, "accumul": [496, 543], "fn": [496, 543], "new_valu": [496, 543], "across": [497, 794], "cumfold": 497, "bin": 498, "break_point_label": 498, "break_point": 498, "category_label": 498, "breakpoint": 498, "string_repr": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "tu": [504, 505, 580, 584, 604, 609, 672, 673, 676, 700, 705], "tz": [504, 581, 606, 673, 702], "time_zon": [504, 525], "timezon": [504, 525], "zoneinfo": 504, "available_timezon": 504, "wrap": 514, "arbitrari": [514, 800], "composit": 515, "static": [521, 668], "utf": 522, "polars_u64_idx": 523, "compon": [524, 526, 527, 601, 661, 697], "31": [524, 526, 582, 583, 594, 607, 661, 673, 674, 675, 753, 790], "granular": 525, "finer": 525, "permut": 525, "drang": 525, "1985": 525, "07": [525, 582, 598, 600, 605, 608, 661, 674, 704, 753], "59": [526, 592, 601, 688, 697], "999999": 526, "add_week": 527, "add_dai": 527, "add_second": 527, "add_millisecond": 527, "add_hour": 527, "add_millisec": 527, "ond": 527, "001": [527, 589, 591, 596, 684, 686, 692], "002": [527, 589, 591, 596, 684, 686, 692], "eval": 528, "rank": [528, 616, 712, 791], "concat_list": [528, 616, 712], "mathemat": 528, "a_b_doubl": 528, "panic": 536, "mismatch": 538, "incompat": 539, "fstring": 544, "placehold": 544, "hello_": 544, "_world": 544, "foo_": 544, "_bar_": 544, "foo_a_bar_1": 544, "foo_b_bar_2": 544, "foo_c_bar_3": 544, "closest": 545, "infer_schema_length": [547, 550, 773, 774, 775, 784, 787], "partial": 547, "let": 547, "3rd": 547, "unknown": [547, 762], "nan_to_non": 549, "pd_df": 549, "pd_seri": 549, "agg_group": 552, "ideal": [554, 567], "read_csv_batch": [554, 814], "tpch": [554, 774], "tables_scale_100": [554, 774], "lineitem": [554, 774, 782], "tbl": [554, 774], "parse_d": [554, 773, 774, 784], "idiomat": 555, "_sum": 555, "_tail_sum": 555, "bar_sum": 555, "bar_tail_sum": 555, "sub": [557, 643, 659, 735, 751], "triangl": [557, 668], "group_df": [557, 668], "nr": [560, 570, 669, 670], "833333": 563, "pivot_column": 567, "values_column": 567, "pivotop": 567, "categoricalord": [579, 671], "lexic": [579, 671], "lose": [580, 672], "2001": [580, 582, 584, 585, 592, 594, 597, 598, 599, 600, 601, 604, 605, 607, 608, 609, 610, 661, 672, 674, 676, 677, 680, 681, 682, 683, 685, 687, 688, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 753], "tu_m": [580, 672], "tu_n": [580, 672], "zone": [581, 606, 673, 702], "with_time_zon": [581, 673], "timestamp": [581, 673], "extract": [582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 601, 602, 607, 608, 610, 645, 646, 674, 675, 677, 678, 679, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 695, 697, 698, 703, 704, 706, 737, 738], "stop": [582, 584, 585, 592, 594, 598, 599, 600, 601, 604, 605, 607, 608, 610, 672, 673, 674, 676, 677, 683, 685, 688, 690, 691, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 772, 773, 774, 776, 780, 784, 786, 787, 788], "weekdai": [582, 598], "day_of_month": [582, 598, 608], "ordinal_dai": [582, 608], "day_of_year": [582, 598, 608], "diff": [583, 586, 589, 591, 593, 596, 602, 675, 678, 684, 686, 689, 692, 698], "days_diff": 583, "epochtimeunit": [584, 676], "sinc": [584, 676], "unix": [584, 676], "epoch_n": [584, 676], "epoch_": [584, 676], "978307200000000": [584, 604, 676, 700], "978307200": [584, 676], "978393600000000": [584, 604, 676, 700], "978393600": [584, 676], "978480000000000": [584, 604, 676, 700], "978480000": [584, 676], "hours_diff": 586, "iso": [587, 607, 679, 703], "microseconds_diff": 589, "1001": [589, 591, 596], "003": [589, 591, 596], "997": [589, 591, 596], "998": [589, 591, 596], "999": [589, 591, 596], "milliseconds_diff": 591, "minutes_diff": 593, "1440": [593, 689], "nanoseconds_diff": 596, "1000000": [596, 664, 692], "leap": [597, 693], "minu": [597, 693], "dictat": [597, 693], "2000": [597, 693], "2005": [597, 693], "date_plus_1i": [597, 693], "1y2mo": [597, 693], "date_min": 597, "1998": [597, 693], "2002": [597, 599, 610, 693, 706], "1999": [597, 693], "2003": [597, 693], "2004": [597, 693], "2006": [597, 693], "366": [598, 694], "180": [599, 610], "bucket": [600, 605, 696, 701], "eg": [600, 605, 661], "225": [600, 605], "frame_equ": [600, 605], "milli": [601, 697], "micro": [601, 697], "456789": 601, "654321": 601, "111110": 601, "765431": 601, "sec": 601, "11111": 601, "seconds_diff": 602, "timestamp_n": [604, 700], "timestamp_m": 604, "978307200000": 604, "978393600000": 604, "978480000000": 604, "naiv": [606, 702], "awar": [606, 702, 780], "53": [607, 703], "mondai": [608, 704], "sundai": [608, 704], "tu_u": [609, 705], "32971": [609, 705], "32974": [609, 705], "32976": [609, 705], "compil": [611, 612, 707, 708], "membership": [614, 710], "against": [616, 712, 817], "blindli": [616, 712], "worth": [616, 712], "n_field_strategi": [632, 728], "tostructstrategi": [632, 728], "first_non_nul": [632, 728], "max_width": [632, 728], "field_0": [632, 728], "field_1": [632, 728], "field_n": [632, 728], "col_name_": [632, 728], "col_name_0": [632, 728], "col_name_1": [632, 728], "col_name_2": [632, 728], "computeerror": [634, 813], "undo": 637, "keep_nam": 637, "substr": [639, 643, 651, 652, 656, 657, 658, 659, 731, 735, 743, 744, 748, 749, 750, 751], "treat": [639, 651, 652, 731, 743, 744], "starts_with": [639, 643, 735], "ends_with": [639, 659, 751], "crab": [639, 731], "rab": [639, 731], "success": [640, 645, 732, 737], "overlap": [640, 645, 732, 737], "captur": [640, 644, 645, 732, 736, 737], "bla": [640, 645, 732, 737], "asd": [640, 645, 732, 737], "678": [640, 645, 732, 737], "910t": [640, 645, 732, 737], "count_digit": 640, "transferencod": [641, 642, 733, 734], "hex": [641, 642, 733, 734], "base64": [641, 642, 733, 734], "thrown": [641, 733], "unabl": [641, 733], "unhandl": [641, 733], "666f6f": [641, 642, 733, 734], "626172": [641, 642, 733, 734], "mango": [643, 659, 735, 751], "go": [643, 735], "has_suffix": 643, "group_index": [644, 736], "target": [644, 661, 736, 753], "vote": [644, 736], "ballon_dor": [644, 736], "candid": [644, 736], "messi": [644, 736], "ref": [644, 736], "candidat": [644, 736], "jorginho": [644, 736], "ronaldo": [644, 736], "w": [644, 736], "extracted_nr": 645, "910": [645, 737], "json_path": [646, 738], "jsonpath": [646, 738], "regardless": [646, 738], "document": [646, 661, 738, 753, 775, 782], "here": [646, 738, 782, 799, 800, 801], "json_val": [646, 738], "n_char": [647, 739], "caf\u00e9": [647, 650, 739, 742], "345": [647, 650, 739, 742], "\u6771\u4eac": [647, 650, 739, 742], "nchar": [647, 650], "fillchar": [648, 653, 740, 745], "justifi": [648, 653, 740, 745], "pad": [648, 653, 664, 740, 745, 756], "cow": [648, 653, 740, 745], "monkei": [648, 653, 740, 745], "hippopotamu": [648, 653, 740, 745], "whitespac": [649, 654, 660, 741, 746, 752], "trail": [649, 654, 660, 746, 752], "text": [650, 651, 652, 742], "replace_al": [651, 743], "123abc": [651, 743], "abc456": [651, 743], "abcabc": [652, 744], "123a123": [652, 744], "bc": [652, 744], "trim": [654, 660, 741, 746, 752], "subslic": [655, 747], "pear": [655, 747], "papaya": [655, 747], "dragonfruit": [655, 747], "s_slice": 655, "ear": [655, 747], "aya": [655, 747], "uit": [655, 747], "ya": [655, 747], "onf": [655, 747], "inclus": [656, 657, 748, 749], "d_4": [657, 749], "_": [657, 749], "rename_field": [657, 658, 749, 750], "first_part": [657, 658, 749, 750], "second_part": [657, 658, 749, 750], "unnest": [657, 658, 749, 750], "remaind": [658, 750], "prefix": [659, 664, 751, 756], "app": [659, 751], "has_prefix": 659, "strftime": [661, 753], "anywher": [661, 753], "3f": 661, "sun": [661, 753], "jul": [661, 753, 790], "34": [661, 753], "lowercas": [662, 754], "variant": [662, 663], "uppercas": [663, 755], "10000": 664, "100000": 664, "0010": 664, "0001": 664, "00000": 664, "00001": 664, "to_struct": [665, 666], "my_struct": [665, 666, 793], "anymor": 666, "panicexcept": [666, 813], "describ": [667, 800], "scan_csv": [667, 773, 774], "n_uniqu": 667, "unique_nam": 667, "known": [668, 800], "epoch": 673, "1583020800": 673, "1585699200": 673, "1588291200": 673, "europ": 673, "london": 673, "gmt": 673, "bst": 673, "america": 673, "new_york": 673, "nyc": 673, "29": 673, "est": 673, "edt": 673, "1583002800": 673, "1585681200": 673, "1588273200": 673, "500m": [683, 685, 691, 697], "500000": 683, "2m": 688, "500000000": 691, "date_minus_1y_2mon": 693, "165": [696, 701], "series_equ": [696, 701], "timestamp_u": 700, "978307200000000000": 700, "978393600000000000": 700, "978480000000000000": 700, "export": 761, "allow_object": 762, "valueexcept": 762, "correl": [770, 791], "new_column": [773, 774, 775], "comment_char": [773, 774, 784], "quote_char": [773, 774, 784], "skip_row": [773, 774, 784], "ignore_error": [773, 774, 784], "n_thread": [773, 774], "8192": 773, "csvencod": [773, 774, 784], "low_memori": [773, 774, 780, 784, 787, 788], "storage_opt": [773, 776, 780, 786, 788], "skip_rows_after_head": [773, 774, 784], "row_count_nam": [773, 774, 776, 780, 784, 786, 787, 788], "row_count_offset": [773, 774, 776, 780, 784, 786, 787, 788], "sample_s": [773, 774], "eol_char": [773, 774, 784], "handler": [773, 774, 775], "builtin": [773, 774, 775], "open": [773, 774, 775, 776, 780, 786, 788], "stringio": [773, 774], "fsspec": [773, 774, 776, 780, 786, 788, 790], "remot": [773, 774, 776, 780], "autogener": [773, 774, 784], "column_x": [773, 774, 784], "enumer": [773, 774, 784], "shorter": [773, 774], "comment": [773, 774, 784], "escap": [773, 774, 784], "cpu": [773, 774], "system": [773, 774], "multi": [773, 774], "lossi": [773, 774, 784], "decod": [773, 774], "im": [773, 774], "parser": 773, "even": 773, "regard": [773, 791], "storag": [773, 776, 780, 786, 788], "connect": [773, 776, 780, 782, 785, 786, 788, 814], "host": [773, 776, 780, 786, 788], "port": [773, 776, 780, 782, 786, 788], "usernam": [773, 776, 780, 782, 786, 788], "password": [773, 776, 780, 782, 786, 788], "row_count": [773, 774, 776, 780, 784, 786, 787, 788], "glob": [773, 774, 784, 786, 788], "50000": 774, "batchedcsvread": [774, 813], "batch": [774, 787], "upon": 774, "creation": 774, "gather": 774, "next_batch": 774, "sheet_id": 775, "sheet_nam": 775, "xlsx2csv_option": 775, "read_csv_opt": 775, "excel": [775, 813], "xlsx": 775, "sheet": 775, "xlsx2csv": [775, 790], "read_csv": [775, 784], "skip_empty_lin": 775, "my": [775, 785], "datasheet": 775, "excel_fil": 775, "As": [775, 783], "look": 775, "twice": 775, "xl": 775, "xlsm": 775, "xlsb": 775, "odf": 775, "od": 775, "odt": 775, "from_panda": [775, 782], "memory_map": [776, 780, 786], "v2": [776, 786], "greatli": [776, 786], "read_ndjson": 778, "parallelstrategi": [780, 788], "directori": 780, "stabl": 780, "row_group": [780, 788], "read_tabl": 780, "connection_uri": 782, "partition_on": 782, "partition_rang": 782, "partition_num": 782, "protocol": 782, "mysql": 782, "sqlite": 782, "redshift": 782, "clickhous": 782, "databas": 782, "altern": 782, "solut": 782, "raw": 782, "connectorx": [782, 790], "uri": 782, "postgresql": 782, "server": 782, "backend": 782, "transfer": 782, "partition_col": 782, "explicitli": [782, 799, 800], "mode": 783, "polarsdatatyp": 784, "with_column_nam": 784, "push": [784, 786, 787, 788], "therebi": [784, 786, 787, 788], "potenti": [784, 786, 787, 788], "overhead": [784, 786, 787, 788], "updat": 784, "my_long_fil": 784, "breezah": 784, "terribl": 784, "mydf": 784, "write_csv": 784, "cloud": 785, "dset": 785, "folder": 785, "1970": 785, "version": 790, "stdout": 790, "info": 790, "platform": 790, "linux": 790, "microsoft": 790, "wsl2": 790, "x86_64": 790, "glibc2": 790, "main": 790, "gcc": 790, "20210110": 790, "propagate_nan": 791, "spearman": 791, "sever": 793, "a_and_b": 793, "get_column": 794, "check_dtyp": [796, 797], "check_exact": [796, 797], "check_column_nam": 796, "rtol": [796, 797], "1e": [796, 797], "atol": [796, 797], "nans_compare_equ": [796, 797], "assertionerror": [796, 797], "inexact": [796, 797], "check_nam": 797, "searchstrategi": [798, 800, 801], "null_prob": [798, 800, 801], "chanc": [798, 800, 801], "hypothesi": [798, 799, 800, 801, 818], "sampled_from": 798, "unique_small_int": 798, "ccy": 798, "gbp": 798, "jpy": 798, "min_col": [799, 800], "max_col": [799, 800], "_parametr": 799, "suitabl": 799, "standalon": [799, 800], "itself": 799, "explicit": 799, "mincol": 799, "control": 799, "especi": 799, "punctuat": 799, "test_special_char_colname_init": 799, "test_unique_xyz": 799, "assert_someth": 799, "min_siz": [800, 801], "max_siz": [800, 801], "include_col": 800, "allow_infin": [800, 801], "allowed_dtyp": [800, 801], "excluded_dtyp": [800, 801], "desir": 800, "n_chunk": [800, 801], "randomis": 800, "onto": 800, "exist": 800, "independ": [800, 801], "basi": 800, "pct": 800, "preced": 800, "disallow": [800, 801], "deploi": [800, 801], "decor": [800, 801], "characterist": [800, 801], "develop": [800, 801], "concret": [800, 801], "test_repr": [800, 801], "repr": [800, 801], "df_strategi": 800, "15836": 800, "1755e": 800, "38": 800, "575050513": 800, "constructor": [801, 813], "max_data_s": 801, "54666": 801, "35": 801, "6414": 801, "63290": 801, "pool": 802, "isn": 805, "thens": 805, "chain": 805, "favor": 808, "These": 811, "sometim": 811, "polar": [811, 813, 815, 817, 818], "overview": 813, "public": 813, "expos": 813, "descript": 813, "manipul": 813, "timeseri": 813, "unset": 813, "arrowerror": 813, "duplicateerror": 813, "invalidoperationerror": 813, "nodataerror": 813, "notfounderror": 813, "schemaerror": 813, "shapeerror": 813, "show_vers": 813, "sqlcontext": [813, 817], "readthedoc": 818}, "objects": {"polars.Config": [[1, 0, 1, "", "load"], [2, 0, 1, "", "restore_defaults"], [3, 0, 1, "", "save"], [4, 0, 1, "", "set_ascii_tables"], [5, 0, 1, "", "set_fmt_str_lengths"], [6, 0, 1, "", "set_tbl_cell_alignment"], [7, 0, 1, "", "set_tbl_cols"], [8, 0, 1, "", "set_tbl_column_data_type_inline"], [9, 0, 1, "", "set_tbl_dataframe_shape_below"], [10, 0, 1, "", "set_tbl_formatting"], [11, 0, 1, "", "set_tbl_hide_column_data_types"], [12, 0, 1, "", "set_tbl_hide_column_names"], [13, 0, 1, "", "set_tbl_hide_dataframe_shape"], [14, 0, 1, "", "set_tbl_hide_dtype_separator"], [15, 0, 1, "", "set_tbl_rows"], [16, 0, 1, "", "set_tbl_width_chars"], [17, 0, 1, "", "set_verbose"], [18, 0, 1, "", "state"]], "polars": [[19, 1, 1, "", "DataFrame"], [114, 1, 1, "", "Expr"], [815, 1, 1, "", "LazyFrame"], [817, 1, 1, "", "SQLContext"], [322, 1, 1, "", "Series"], [480, 1, 1, "", "StringCache"], [481, 3, 1, "", "all"], [482, 3, 1, "", "any"], [483, 3, 1, "", "apply"], [484, 3, 1, "", "arange"], [485, 3, 1, "", "arg_where"], [486, 3, 1, "", "argsort_by"], [487, 3, 1, "", "avg"], [488, 3, 1, "", "coalesce"], [489, 3, 1, "", "col"], [490, 3, 1, "", "collect_all"], [491, 3, 1, "", "concat"], [492, 3, 1, "", "concat_list"], [493, 3, 1, "", "concat_str"], [494, 3, 1, "", "count"], [495, 3, 1, "", "cov"], [496, 3, 1, "", "cumfold"], [497, 3, 1, "", "cumsum"], [498, 3, 1, "", "cut"], [524, 3, 1, "", "date"], [525, 3, 1, "", "date_range"], [526, 3, 1, "", "datetime"], [527, 3, 1, "", "duration"], [528, 3, 1, "", "element"], [541, 3, 1, "", "exclude"], [542, 3, 1, "", "first"], [543, 3, 1, "", "fold"], [544, 3, 1, "", "format"], [545, 3, 1, "", "from_arrow"], [546, 3, 1, "", "from_dict"], [547, 3, 1, "", "from_dicts"], [548, 3, 1, "", "from_numpy"], [549, 3, 1, "", "from_pandas"], [550, 3, 1, "", "from_records"], [551, 3, 1, "", "get_dummies"], [552, 3, 1, "", "groups"], [553, 3, 1, "", "head"], [761, 3, 1, "", "list"], [762, 3, 1, "", "lit"], [763, 3, 1, "", "map"], [764, 3, 1, "", "max"], [765, 3, 1, "", "mean"], [766, 3, 1, "", "median"], [767, 3, 1, "", "min"], [768, 3, 1, "", "n_unique"], [769, 3, 1, "", "ones"], [770, 3, 1, "", "pearson_corr"], [771, 3, 1, "", "quantile"], [772, 3, 1, "", "read_avro"], [773, 3, 1, "", "read_csv"], [774, 3, 1, "", "read_csv_batched"], [775, 3, 1, "", "read_excel"], [776, 3, 1, "", "read_ipc"], [777, 3, 1, "", "read_ipc_schema"], [778, 3, 1, "", "read_json"], [779, 3, 1, "", "read_ndjson"], [780, 3, 1, "", "read_parquet"], [781, 3, 1, "", "read_parquet_schema"], [782, 3, 1, "", "read_sql"], [783, 3, 1, "", "repeat"], [784, 3, 1, "", "scan_csv"], [785, 3, 1, "", "scan_ds"], [786, 3, 1, "", "scan_ipc"], [787, 3, 1, "", "scan_ndjson"], [788, 3, 1, "", "scan_parquet"], [789, 3, 1, "", "select"], [790, 3, 1, "", "show_versions"], [791, 3, 1, "", "spearman_rank_corr"], [792, 3, 1, "", "std"], [793, 3, 1, "", "struct"], [794, 3, 1, "", "sum"], [795, 3, 1, "", "tail"], [802, 3, 1, "", "threadpool_size"], [803, 3, 1, "", "toggle_string_cache"], [804, 3, 1, "", "var"], [805, 3, 1, "", "when"], [806, 3, 1, "", "zeros"]], "polars.DataFrame": [[19, 0, 1, "", "__init__"], [20, 0, 1, "", "apply"], [21, 0, 1, "", "cleared"], [22, 0, 1, "", "clone"], [23, 2, 1, "", "columns"], [24, 0, 1, "", "describe"], [25, 0, 1, "", "drop"], [26, 0, 1, "", "drop_in_place"], [27, 0, 1, "", "drop_nulls"], [28, 2, 1, "", "dtypes"], [29, 0, 1, "", "estimated_size"], [30, 0, 1, "", "explode"], [31, 0, 1, "", "extend"], [32, 0, 1, "", "fill_nan"], [33, 0, 1, "", "fill_null"], [34, 0, 1, "", "filter"], [35, 0, 1, "", "find_idx_by_name"], [36, 0, 1, "", "fold"], [37, 0, 1, "", "frame_equal"], [38, 0, 1, "", "get_column"], [39, 0, 1, "", "get_columns"], [40, 0, 1, "", "groupby"], [41, 0, 1, "", "groupby_dynamic"], [42, 0, 1, "", "groupby_rolling"], [43, 0, 1, "", "hash_rows"], [44, 0, 1, "", "head"], [45, 2, 1, "", "height"], [46, 0, 1, "", "hstack"], [47, 0, 1, "", "insert_at_idx"], [48, 0, 1, "", "interpolate"], [49, 0, 1, "", "is_duplicated"], [50, 0, 1, "", "is_empty"], [51, 0, 1, "", "is_unique"], [52, 0, 1, "", "join"], [53, 0, 1, "", "join_asof"], [54, 0, 1, "", "lazy"], [55, 0, 1, "", "limit"], [56, 0, 1, "", "max"], [57, 0, 1, "", "mean"], [58, 0, 1, "", "median"], [59, 0, 1, "", "melt"], [60, 0, 1, "", "min"], [61, 0, 1, "", "n_chunks"], [62, 0, 1, "", "n_unique"], [63, 0, 1, "", "null_count"], [64, 0, 1, "", "partition_by"], [65, 0, 1, "", "pipe"], [66, 0, 1, "", "pivot"], [67, 0, 1, "", "product"], [68, 0, 1, "", "quantile"], [69, 0, 1, "", "rechunk"], [70, 0, 1, "", "rename"], [71, 0, 1, "", "replace"], [72, 0, 1, "", "replace_at_idx"], [73, 0, 1, "", "reverse"], [74, 0, 1, "", "row"], [75, 0, 1, "", "rows"], [76, 0, 1, "", "sample"], [77, 2, 1, "", "schema"], [78, 0, 1, "", "select"], [79, 2, 1, "", "shape"], [80, 0, 1, "", "shift"], [81, 0, 1, "", "shift_and_fill"], [82, 0, 1, "", "shrink_to_fit"], [83, 0, 1, "", "slice"], [84, 0, 1, "", "sort"], [85, 0, 1, "", "std"], [86, 0, 1, "", "sum"], [87, 0, 1, "", "tail"], [88, 0, 1, "", "take_every"], [89, 0, 1, "", "to_arrow"], [90, 0, 1, "", "to_dict"], [91, 0, 1, "", "to_dicts"], [92, 0, 1, "", "to_dummies"], [93, 0, 1, "", "to_numpy"], [94, 0, 1, "", "to_pandas"], [95, 0, 1, "", "to_series"], [96, 0, 1, "", "to_struct"], [97, 0, 1, "", "transpose"], [98, 0, 1, "", "unique"], [99, 0, 1, "", "unnest"], [100, 0, 1, "", "unstack"], [101, 0, 1, "", "upsample"], [102, 0, 1, "", "var"], [103, 0, 1, "", "vstack"], [104, 2, 1, "", "width"], [105, 0, 1, "", "with_column"], [106, 0, 1, "", "with_columns"], [107, 0, 1, "", "with_row_count"], [108, 0, 1, "", "write_avro"], [109, 0, 1, "", "write_csv"], [110, 0, 1, "", "write_ipc"], [111, 0, 1, "", "write_json"], [112, 0, 1, "", "write_ndjson"], [113, 0, 1, "", "write_parquet"]], "polars.Expr": [[114, 0, 1, "", "__init__"], [115, 0, 1, "", "abs"], [116, 0, 1, "", "agg_groups"], [117, 0, 1, "", "alias"], [118, 0, 1, "", "all"], [119, 0, 1, "", "any"], [120, 0, 1, "", "append"], [121, 0, 1, "", "apply"], [122, 0, 1, "", "arccos"], [123, 0, 1, "", "arccosh"], [124, 0, 1, "", "arcsin"], [125, 0, 1, "", "arcsinh"], [126, 0, 1, "", "arctan"], [127, 0, 1, "", "arctanh"], [128, 0, 1, "", "arg_max"], [129, 0, 1, "", "arg_min"], [130, 0, 1, "", "arg_sort"], [131, 0, 1, "", "arg_unique"], [132, 0, 1, "", "argsort"], [133, 2, 1, "", "arr"], [134, 0, 1, "", "backward_fill"], [135, 0, 1, "", "cast"], [136, 2, 1, "", "cat"], [137, 0, 1, "", "ceil"], [138, 0, 1, "", "clip"], [139, 0, 1, "", "clip_max"], [140, 0, 1, "", "clip_min"], [141, 0, 1, "", "cos"], [142, 0, 1, "", "cosh"], [143, 0, 1, "", "count"], [144, 0, 1, "", "cumcount"], [145, 0, 1, "", "cummax"], [146, 0, 1, "", "cummin"], [147, 0, 1, "", "cumprod"], [148, 0, 1, "", "cumsum"], [149, 0, 1, "", "cumulative_eval"], [150, 0, 1, "", "diff"], [151, 0, 1, "", "dot"], [152, 0, 1, "", "drop_nans"], [153, 0, 1, "", "drop_nulls"], [154, 2, 1, "", "dt"], [155, 0, 1, "", "entropy"], [156, 0, 1, "", "ewm_mean"], [157, 0, 1, "", "ewm_std"], [158, 0, 1, "", "ewm_var"], [159, 0, 1, "", "exclude"], [160, 0, 1, "", "exp"], [161, 0, 1, "", "explode"], [162, 0, 1, "", "extend_constant"], [163, 0, 1, "", "fill_nan"], [164, 0, 1, "", "fill_null"], [165, 0, 1, "", "filter"], [166, 0, 1, "", "first"], [167, 0, 1, "", "flatten"], [168, 0, 1, "", "floor"], [169, 0, 1, "", "forward_fill"], [170, 0, 1, "", "hash"], [171, 0, 1, "", "head"], [172, 0, 1, "", "inspect"], [173, 0, 1, "", "interpolate"], [174, 0, 1, "", "is_between"], [175, 0, 1, "", "is_duplicated"], [176, 0, 1, "", "is_finite"], [177, 0, 1, "", "is_first"], [178, 0, 1, "", "is_in"], [179, 0, 1, "", "is_infinite"], [180, 0, 1, "", "is_nan"], [181, 0, 1, "", "is_not"], [182, 0, 1, "", "is_not_nan"], [183, 0, 1, "", "is_not_null"], [184, 0, 1, "", "is_null"], [185, 0, 1, "", "is_unique"], [186, 0, 1, "", "keep_name"], [187, 0, 1, "", "kurtosis"], [188, 0, 1, "", "last"], [189, 0, 1, "", "len"], [190, 0, 1, "", "limit"], [191, 0, 1, "", "list"], [192, 0, 1, "", "log"], [193, 0, 1, "", "log10"], [194, 0, 1, "", "lower_bound"], [195, 0, 1, "", "map"], [196, 0, 1, "", "map_alias"], [197, 0, 1, "", "max"], [198, 0, 1, "", "mean"], [199, 0, 1, "", "median"], [200, 0, 1, "", "min"], [201, 0, 1, "", "mode"], [202, 0, 1, "", "n_unique"], [203, 0, 1, "", "nan_max"], [204, 0, 1, "", "nan_min"], [205, 0, 1, "", "null_count"], [206, 0, 1, "", "over"], [207, 0, 1, "", "pct_change"], [208, 0, 1, "", "pow"], [209, 0, 1, "", "prefix"], [210, 0, 1, "", "product"], [211, 0, 1, "", "quantile"], [212, 0, 1, "", "rank"], [213, 0, 1, "", "rechunk"], [214, 0, 1, "", "reinterpret"], [215, 0, 1, "", "repeat_by"], [216, 0, 1, "", "reshape"], [217, 0, 1, "", "reverse"], [218, 0, 1, "", "rolling_apply"], [219, 0, 1, "", "rolling_max"], [220, 0, 1, "", "rolling_mean"], [221, 0, 1, "", "rolling_median"], [222, 0, 1, "", "rolling_min"], [223, 0, 1, "", "rolling_quantile"], [224, 0, 1, "", "rolling_skew"], [225, 0, 1, "", "rolling_std"], [226, 0, 1, "", "rolling_sum"], [227, 0, 1, "", "rolling_var"], [228, 0, 1, "", "round"], [229, 0, 1, "", "sample"], [230, 0, 1, "", "search_sorted"], [231, 0, 1, "", "set_sorted"], [232, 0, 1, "", "shift"], [233, 0, 1, "", "shift_and_fill"], [234, 0, 1, "", "shrink_dtype"], [235, 0, 1, "", "shuffle"], [236, 0, 1, "", "sign"], [237, 0, 1, "", "sin"], [238, 0, 1, "", "sinh"], [239, 0, 1, "", "skew"], [240, 0, 1, "", "slice"], [241, 0, 1, "", "sort"], [242, 0, 1, "", "sort_by"], [243, 0, 1, "", "sqrt"], [244, 0, 1, "", "std"], [245, 2, 1, "", "str"], [246, 0, 1, "", "suffix"], [247, 0, 1, "", "sum"], [248, 0, 1, "", "tail"], [249, 0, 1, "", "take"], [250, 0, 1, "", "take_every"], [251, 0, 1, "", "tan"], [252, 0, 1, "", "tanh"], [253, 0, 1, "", "to_physical"], [254, 0, 1, "", "top_k"], [255, 0, 1, "", "unique"], [256, 0, 1, "", "unique_counts"], [257, 0, 1, "", "upper_bound"], [258, 0, 1, "", "value_counts"], [259, 0, 1, "", "var"], [260, 0, 1, "", "where"]], "polars.LazyFrame": [[261, 0, 1, "", "cache"], [262, 0, 1, "", "cleared"], [263, 0, 1, "", "clone"], [264, 0, 1, "", "collect"], [265, 2, 1, "", "columns"], [266, 0, 1, "", "describe_optimized_plan"], [267, 0, 1, "", "describe_plan"], [268, 0, 1, "", "drop"], [269, 0, 1, "", "drop_nulls"], [270, 2, 1, "", "dtypes"], [271, 0, 1, "", "explode"], [272, 0, 1, "", "fetch"], [273, 0, 1, "", "fill_nan"], [274, 0, 1, "", "fill_null"], [275, 0, 1, "", "filter"], [276, 0, 1, "", "first"], [277, 0, 1, "", "from_json"], [278, 0, 1, "", "groupby"], [279, 0, 1, "", "groupby_dynamic"], [280, 0, 1, "", "groupby_rolling"], [281, 0, 1, "", "head"], [282, 0, 1, "", "inspect"], [283, 0, 1, "", "interpolate"], [284, 0, 1, "", "join"], [285, 0, 1, "", "join_asof"], [286, 0, 1, "", "last"], [287, 0, 1, "", "limit"], [288, 0, 1, "", "map"], [289, 0, 1, "", "max"], [290, 0, 1, "", "mean"], [291, 0, 1, "", "median"], [292, 0, 1, "", "melt"], [293, 0, 1, "", "min"], [294, 0, 1, "", "pipe"], [295, 0, 1, "", "profile"], [296, 0, 1, "", "quantile"], [297, 0, 1, "", "read_json"], [298, 0, 1, "", "rename"], [299, 0, 1, "", "reverse"], [300, 2, 1, "", "schema"], [301, 0, 1, "", "select"], [302, 0, 1, "", "shift"], [303, 0, 1, "", "shift_and_fill"], [304, 0, 1, "", "show_graph"], [305, 0, 1, "", "slice"], [306, 0, 1, "", "sort"], [307, 0, 1, "", "std"], [308, 0, 1, "", "sum"], [309, 0, 1, "", "tail"], [310, 0, 1, "", "take_every"], [311, 0, 1, "", "unique"], [312, 0, 1, "", "unnest"], [313, 0, 1, "", "var"], [314, 0, 1, "", "with_column"], [315, 0, 1, "", "with_columns"], [316, 0, 1, "", "with_context"], [317, 0, 1, "", "with_row_count"], [318, 0, 1, "", "write_json"]], "polars.SQLContext": [[319, 0, 1, "", "execute"], [320, 0, 1, "", "query"], [321, 0, 1, "", "register"]], "polars.Series": [[322, 0, 1, "", "__init__"], [323, 0, 1, "", "abs"], [324, 0, 1, "", "alias"], [325, 0, 1, "", "all"], [326, 0, 1, "", "any"], [327, 0, 1, "", "append"], [328, 0, 1, "", "apply"], [329, 0, 1, "", "arccos"], [330, 0, 1, "", "arccosh"], [331, 0, 1, "", "arcsin"], [332, 0, 1, "", "arcsinh"], [333, 0, 1, "", "arctan"], [334, 0, 1, "", "arctanh"], [335, 0, 1, "", "arg_max"], [336, 0, 1, "", "arg_min"], [337, 0, 1, "", "arg_sort"], [338, 0, 1, "", "arg_true"], [339, 0, 1, "", "arg_unique"], [340, 0, 1, "", "argsort"], [341, 2, 1, "", "arr"], [342, 0, 1, "", "cast"], [343, 2, 1, "", "cat"], [344, 0, 1, "", "ceil"], [345, 0, 1, "", "chunk_lengths"], [346, 0, 1, "", "cleared"], [347, 0, 1, "", "clip"], [348, 0, 1, "", "clip_max"], [349, 0, 1, "", "clip_min"], [350, 0, 1, "", "clone"], [351, 0, 1, "", "cos"], [352, 0, 1, "", "cosh"], [353, 0, 1, "", "cummax"], [354, 0, 1, "", "cummin"], [355, 0, 1, "", "cumprod"], [356, 0, 1, "", "cumsum"], [357, 0, 1, "", "cumulative_eval"], [358, 0, 1, "", "describe"], [359, 0, 1, "", "diff"], [360, 0, 1, "", "dot"], [361, 0, 1, "", "drop_nans"], [362, 0, 1, "", "drop_nulls"], [363, 2, 1, "", "dt"], [364, 2, 1, "", "dtype"], [365, 0, 1, "", "entropy"], [366, 0, 1, "", "estimated_size"], [367, 0, 1, "", "ewm_mean"], [368, 0, 1, "", "ewm_std"], [369, 0, 1, "", "ewm_var"], [370, 0, 1, "", "exp"], [371, 0, 1, "", "explode"], [372, 0, 1, "", "extend_constant"], [373, 0, 1, "", "fill_nan"], [374, 0, 1, "", "fill_null"], [375, 0, 1, "", "filter"], [376, 2, 1, "", "flags"], [377, 0, 1, "", "floor"], [378, 0, 1, "", "has_validity"], [379, 0, 1, "", "hash"], [380, 0, 1, "", "head"], [381, 2, 1, "", "inner_dtype"], [382, 0, 1, "", "interpolate"], [383, 0, 1, "", "is_boolean"], [384, 0, 1, "", "is_datelike"], [385, 0, 1, "", "is_duplicated"], [386, 0, 1, "", "is_empty"], [387, 0, 1, "", "is_finite"], [388, 0, 1, "", "is_first"], [389, 0, 1, "", "is_float"], [390, 0, 1, "", "is_in"], [391, 0, 1, "", "is_infinite"], [392, 0, 1, "", "is_nan"], [393, 0, 1, "", "is_not_nan"], [394, 0, 1, "", "is_not_null"], [395, 0, 1, "", "is_null"], [396, 0, 1, "", "is_numeric"], [397, 0, 1, "", "is_unique"], [398, 0, 1, "", "is_utf8"], [399, 0, 1, "", "kurtosis"], [400, 0, 1, "", "len"], [401, 0, 1, "", "limit"], [402, 0, 1, "", "log"], [403, 0, 1, "", "log10"], [404, 0, 1, "", "max"], [405, 0, 1, "", "mean"], [406, 0, 1, "", "median"], [407, 0, 1, "", "min"], [408, 0, 1, "", "mode"], [409, 0, 1, "", "n_chunks"], [410, 0, 1, "", "n_unique"], [411, 2, 1, "", "name"], [412, 0, 1, "", "nan_max"], [413, 0, 1, "", "nan_min"], [414, 0, 1, "", "new_from_index"], [415, 0, 1, "", "null_count"], [416, 0, 1, "", "pct_change"], [417, 0, 1, "", "peak_max"], [418, 0, 1, "", "peak_min"], [419, 0, 1, "", "product"], [420, 0, 1, "", "quantile"], [421, 0, 1, "", "rank"], [422, 0, 1, "", "rechunk"], [423, 0, 1, "", "reinterpret"], [424, 0, 1, "", "rename"], [425, 0, 1, "", "reshape"], [426, 0, 1, "", "reverse"], [427, 0, 1, "", "rolling_apply"], [428, 0, 1, "", "rolling_max"], [429, 0, 1, "", "rolling_mean"], [430, 0, 1, "", "rolling_median"], [431, 0, 1, "", "rolling_min"], [432, 0, 1, "", "rolling_quantile"], [433, 0, 1, "", "rolling_skew"], [434, 0, 1, "", "rolling_std"], [435, 0, 1, "", "rolling_sum"], [436, 0, 1, "", "rolling_var"], [437, 0, 1, "", "round"], [438, 0, 1, "", "sample"], [439, 0, 1, "", "search_sorted"], [440, 0, 1, "", "series_equal"], [441, 0, 1, "", "set"], [442, 0, 1, "", "set_at_idx"], [443, 0, 1, "", "set_sorted"], [444, 2, 1, "", "shape"], [445, 0, 1, "", "shift"], [446, 0, 1, "", "shift_and_fill"], [447, 0, 1, "", "shrink_dtype"], [448, 0, 1, "", "shrink_to_fit"], [449, 0, 1, "", "shuffle"], [450, 0, 1, "", "sign"], [451, 0, 1, "", "sin"], [452, 0, 1, "", "sinh"], [453, 0, 1, "", "skew"], [454, 0, 1, "", "slice"], [455, 0, 1, "", "sort"], [456, 0, 1, "", "sqrt"], [457, 0, 1, "", "std"], [458, 2, 1, "", "str"], [459, 0, 1, "", "sum"], [460, 0, 1, "", "tail"], [461, 0, 1, "", "take"], [462, 0, 1, "", "take_every"], [463, 0, 1, "", "tan"], [464, 0, 1, "", "tanh"], [465, 2, 1, "", "time_unit"], [466, 0, 1, "", "to_arrow"], [467, 0, 1, "", "to_dummies"], [468, 0, 1, "", "to_frame"], [469, 0, 1, "", "to_list"], [470, 0, 1, "", "to_numpy"], [471, 0, 1, "", "to_pandas"], [472, 0, 1, "", "to_physical"], [473, 0, 1, "", "top_k"], [474, 0, 1, "", "unique"], [475, 0, 1, "", "unique_counts"], [476, 0, 1, "", "value_counts"], [477, 0, 1, "", "var"], [478, 0, 1, "", "view"], [479, 0, 1, "", "zip_with"]], "polars.StringCache": [[480, 0, 1, "", "__init__"]], "polars.datatypes": [[499, 1, 1, "", "Binary"], [500, 1, 1, "", "Boolean"], [501, 1, 1, "", "Categorical"], [502, 1, 1, "", "DataType"], [503, 1, 1, "", "Date"], [504, 1, 1, "", "Datetime"], [505, 1, 1, "", "Duration"], [506, 1, 1, "", "Float32"], [507, 1, 1, "", "Float64"], [508, 1, 1, "", "Int16"], [509, 1, 1, "", "Int32"], [510, 1, 1, "", "Int64"], [511, 1, 1, "", "Int8"], [512, 1, 1, "", "List"], [513, 1, 1, "", "Null"], [514, 1, 1, "", "Object"], [515, 1, 1, "", "Struct"], [516, 1, 1, "", "Time"], [517, 1, 1, "", "UInt16"], [518, 1, 1, "", "UInt32"], [519, 1, 1, "", "UInt64"], [520, 1, 1, "", "UInt8"], [521, 1, 1, "", "Unknown"], [522, 1, 1, "", "Utf8"], [523, 3, 1, "", "get_idx_type"]], "polars.datatypes.Binary": [[499, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[500, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[501, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[502, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[503, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[504, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[505, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[506, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[507, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[508, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[509, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[510, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[511, 0, 1, "", "__init__"]], "polars.datatypes.List": [[512, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[513, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[514, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[515, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[516, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[517, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[518, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[519, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[520, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[521, 0, 1, "", "__init__"]], "polars.datatypes.Utf8": [[522, 0, 1, "", "__init__"]], "polars.exceptions": [[529, 4, 1, "", "ArrowError"], [530, 4, 1, "", "ComputeError"], [531, 4, 1, "", "DuplicateError"], [532, 4, 1, "", "InvalidOperationError"], [533, 4, 1, "", "NoDataError"], [534, 4, 1, "", "NoRowsReturned"], [535, 4, 1, "", "NotFoundError"], [536, 4, 1, "", "PanicException"], [537, 4, 1, "", "RowsException"], [538, 4, 1, "", "SchemaError"], [539, 4, 1, "", "ShapeError"], [540, 4, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[554, 0, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[555, 0, 1, "", "agg"], [556, 0, 1, "", "agg_list"], [557, 0, 1, "", "apply"], [558, 0, 1, "", "count"], [559, 0, 1, "", "first"], [560, 0, 1, "", "head"], [561, 0, 1, "", "last"], [562, 0, 1, "", "max"], [563, 0, 1, "", "mean"], [564, 0, 1, "", "median"], [565, 0, 1, "", "min"], [566, 0, 1, "", "n_unique"], [567, 0, 1, "", "pivot"], [568, 0, 1, "", "quantile"], [569, 0, 1, "", "sum"], [570, 0, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[571, 0, 1, "", "count"], [572, 0, 1, "", "first"], [573, 0, 1, "", "last"], [574, 0, 1, "", "max"], [575, 0, 1, "", "mean"], [576, 0, 1, "", "median"], [577, 0, 1, "", "min"], [578, 0, 1, "", "sum"]], "polars.internals.expr.categorical.ExprCatNameSpace": [[579, 0, 1, "", "set_ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace": [[580, 0, 1, "", "cast_time_unit"], [581, 0, 1, "", "cast_time_zone"], [582, 0, 1, "", "day"], [583, 0, 1, "", "days"], [584, 0, 1, "", "epoch"], [585, 0, 1, "", "hour"], [586, 0, 1, "", "hours"], [587, 0, 1, "", "iso_year"], [588, 0, 1, "", "microsecond"], [589, 0, 1, "", "microseconds"], [590, 0, 1, "", "millisecond"], [591, 0, 1, "", "milliseconds"], [592, 0, 1, "", "minute"], [593, 0, 1, "", "minutes"], [594, 0, 1, "", "month"], [595, 0, 1, "", "nanosecond"], [596, 0, 1, "", "nanoseconds"], [597, 0, 1, "", "offset_by"], [598, 0, 1, "", "ordinal_day"], [599, 0, 1, "", "quarter"], [600, 0, 1, "", "round"], [601, 0, 1, "", "second"], [602, 0, 1, "", "seconds"], [603, 0, 1, "", "strftime"], [604, 0, 1, "", "timestamp"], [605, 0, 1, "", "truncate"], [606, 0, 1, "", "tz_localize"], [607, 0, 1, "", "week"], [608, 0, 1, "", "weekday"], [609, 0, 1, "", "with_time_unit"], [610, 0, 1, "", "year"]], "polars.internals.expr.list.ExprListNameSpace": [[611, 0, 1, "", "arg_max"], [612, 0, 1, "", "arg_min"], [613, 0, 1, "", "concat"], [614, 0, 1, "", "contains"], [615, 0, 1, "", "diff"], [616, 0, 1, "", "eval"], [617, 0, 1, "", "first"], [618, 0, 1, "", "get"], [619, 0, 1, "", "head"], [620, 0, 1, "", "join"], [621, 0, 1, "", "last"], [622, 0, 1, "", "lengths"], [623, 0, 1, "", "max"], [624, 0, 1, "", "mean"], [625, 0, 1, "", "min"], [626, 0, 1, "", "reverse"], [627, 0, 1, "", "shift"], [628, 0, 1, "", "slice"], [629, 0, 1, "", "sort"], [630, 0, 1, "", "sum"], [631, 0, 1, "", "tail"], [632, 0, 1, "", "to_struct"], [633, 0, 1, "", "unique"]], "polars.internals.expr.meta.ExprMetaNameSpace": [[634, 0, 1, "", "output_name"], [635, 0, 1, "", "pop"], [636, 0, 1, "", "root_names"], [637, 0, 1, "", "undo_aliases"]], "polars.internals.expr.string.ExprStringNameSpace": [[638, 0, 1, "", "concat"], [639, 0, 1, "", "contains"], [640, 0, 1, "", "count_match"], [641, 0, 1, "", "decode"], [642, 0, 1, "", "encode"], [643, 0, 1, "", "ends_with"], [644, 0, 1, "", "extract"], [645, 0, 1, "", "extract_all"], [646, 0, 1, "", "json_path_match"], [647, 0, 1, "", "lengths"], [648, 0, 1, "", "ljust"], [649, 0, 1, "", "lstrip"], [650, 0, 1, "", "n_chars"], [651, 0, 1, "", "replace"], [652, 0, 1, "", "replace_all"], [653, 0, 1, "", "rjust"], [654, 0, 1, "", "rstrip"], [655, 0, 1, "", "slice"], [656, 0, 1, "", "split"], [657, 0, 1, "", "split_exact"], [658, 0, 1, "", "splitn"], [659, 0, 1, "", "starts_with"], [660, 0, 1, "", "strip"], [661, 0, 1, "", "strptime"], [662, 0, 1, "", "to_lowercase"], [663, 0, 1, "", "to_uppercase"], [664, 0, 1, "", "zfill"]], "polars.internals.expr.struct.ExprStructNameSpace": [[665, 0, 1, "", "field"], [666, 0, 1, "", "rename_fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[667, 0, 1, "", "agg"], [668, 0, 1, "", "apply"], [669, 0, 1, "", "head"], [670, 0, 1, "", "tail"]], "polars.internals.series.categorical.CatNameSpace": [[671, 0, 1, "", "set_ordering"]], "polars.internals.series.datetime.DateTimeNameSpace": [[672, 0, 1, "", "cast_time_unit"], [673, 0, 1, "", "cast_time_zone"], [674, 0, 1, "", "day"], [675, 0, 1, "", "days"], [676, 0, 1, "", "epoch"], [677, 0, 1, "", "hour"], [678, 0, 1, "", "hours"], [679, 0, 1, "", "iso_year"], [680, 0, 1, "", "max"], [681, 0, 1, "", "mean"], [682, 0, 1, "", "median"], [683, 0, 1, "", "microsecond"], [684, 0, 1, "", "microseconds"], [685, 0, 1, "", "millisecond"], [686, 0, 1, "", "milliseconds"], [687, 0, 1, "", "min"], [688, 0, 1, "", "minute"], [689, 0, 1, "", "minutes"], [690, 0, 1, "", "month"], [691, 0, 1, "", "nanosecond"], [692, 0, 1, "", "nanoseconds"], [693, 0, 1, "", "offset_by"], [694, 0, 1, "", "ordinal_day"], [695, 0, 1, "", "quarter"], [696, 0, 1, "", "round"], [697, 0, 1, "", "second"], [698, 0, 1, "", "seconds"], [699, 0, 1, "", "strftime"], [700, 0, 1, "", "timestamp"], [701, 0, 1, "", "truncate"], [702, 0, 1, "", "tz_localize"], [703, 0, 1, "", "week"], [704, 0, 1, "", "weekday"], [705, 0, 1, "", "with_time_unit"], [706, 0, 1, "", "year"]], "polars.internals.series.list.ListNameSpace": [[707, 0, 1, "", "arg_max"], [708, 0, 1, "", "arg_min"], [709, 0, 1, "", "concat"], [710, 0, 1, "", "contains"], [711, 0, 1, "", "diff"], [712, 0, 1, "", "eval"], [713, 0, 1, "", "first"], [714, 0, 1, "", "get"], [715, 0, 1, "", "head"], [716, 0, 1, "", "join"], [717, 0, 1, "", "last"], [718, 0, 1, "", "lengths"], [719, 0, 1, "", "max"], [720, 0, 1, "", "mean"], [721, 0, 1, "", "min"], [722, 0, 1, "", "reverse"], [723, 0, 1, "", "shift"], [724, 0, 1, "", "slice"], [725, 0, 1, "", "sort"], [726, 0, 1, "", "sum"], [727, 0, 1, "", "tail"], [728, 0, 1, "", "to_struct"], [729, 0, 1, "", "unique"]], "polars.internals.series.string.StringNameSpace": [[730, 0, 1, "", "concat"], [731, 0, 1, "", "contains"], [732, 0, 1, "", "count_match"], [733, 0, 1, "", "decode"], [734, 0, 1, "", "encode"], [735, 0, 1, "", "ends_with"], [736, 0, 1, "", "extract"], [737, 0, 1, "", "extract_all"], [738, 0, 1, "", "json_path_match"], [739, 0, 1, "", "lengths"], [740, 0, 1, "", "ljust"], [741, 0, 1, "", "lstrip"], [742, 0, 1, "", "n_chars"], [743, 0, 1, "", "replace"], [744, 0, 1, "", "replace_all"], [745, 0, 1, "", "rjust"], [746, 0, 1, "", "rstrip"], [747, 0, 1, "", "slice"], [748, 0, 1, "", "split"], [749, 0, 1, "", "split_exact"], [750, 0, 1, "", "splitn"], [751, 0, 1, "", "starts_with"], [752, 0, 1, "", "strip"], [753, 0, 1, "", "strptime"], [754, 0, 1, "", "to_lowercase"], [755, 0, 1, "", "to_uppercase"], [756, 0, 1, "", "zfill"]], "polars.internals.series.struct.StructNameSpace": [[757, 0, 1, "", "field"], [758, 2, 1, "", "fields"], [759, 0, 1, "", "rename_fields"], [760, 0, 1, "", "to_frame"]], "polars.testing": [[796, 3, 1, "", "assert_frame_equal"], [797, 3, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[798, 1, 1, "", "column"], [799, 3, 1, "", "columns"], [800, 3, 1, "", "dataframes"], [801, 3, 1, "", "series"]], "polars.testing.parametric.column": [[798, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 807, 812], "load": [1, 807], "restore_default": 2, "save": [3, 807], "set_ascii_t": 4, "set_fmt_str_length": 5, "set_tbl_cell_align": 6, "set_tbl_col": 7, "set_tbl_column_data_type_inlin": 8, "set_tbl_dataframe_shape_below": 9, "set_tbl_format": 10, "set_tbl_hide_column_data_typ": 11, "set_tbl_hide_column_nam": 12, "set_tbl_hide_dataframe_shap": 13, "set_tbl_hide_dtype_separ": 14, "set_tbl_row": 15, "set_tbl_width_char": 16, "set_verbos": 17, "state": [18, 807], "datafram": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 800, 808], "appli": [20, 121, 328, 483, 557, 668, 808, 811, 815], "clear": [21, 262, 346], "clone": [22, 263, 350], "column": [23, 265, 798, 799, 811], "describ": [24, 358], "drop": [25, 268], "drop_in_plac": 26, "drop_nul": [27, 153, 269, 362], "dtype": [28, 270, 364], "estimated_s": [29, 366], "explod": [30, 161, 271, 371], "extend": 31, "fill_nan": [32, 163, 273, 373], "fill_nul": [33, 164, 274, 374], "filter": [34, 165, 275, 375], "find_idx_by_nam": 35, "fold": [36, 543], "frame_equ": 37, "get_column": [38, 39], "groupbi": [40, 278, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 667, 668, 669, 670, 808, 815], "groupby_dynam": [41, 279], "groupby_rol": [42, 280], "hash_row": 43, "head": [44, 171, 281, 380, 553, 560, 619, 669, 715], "height": 45, "hstack": 46, "insert_at_idx": 47, "interpol": [48, 173, 283, 382], "is_dupl": [49, 175, 385], "is_empti": [50, 386], "is_uniqu": [51, 185, 397], "join": [52, 284, 620, 716], "join_asof": [53, 285], "lazi": [54, 812], "limit": [55, 190, 287, 401], "max": [56, 197, 289, 404, 562, 574, 623, 680, 719, 764], "mean": [57, 198, 290, 405, 563, 575, 624, 681, 720, 765], "median": [58, 199, 291, 406, 564, 576, 682, 766], "melt": [59, 292], "min": [60, 200, 293, 407, 565, 577, 625, 687, 721, 767], "n_chunk": [61, 409], "n_uniqu": [62, 202, 410, 566, 768], "null_count": [63, 205, 415], "partition_bi": 64, "pipe": [65, 294], "pivot": [66, 567, 571, 572, 573, 574, 575, 576, 577, 578, 808], "product": [67, 210, 419], "quantil": [68, 211, 296, 420, 568, 771], "rechunk": [69, 213, 422], "renam": [70, 298, 424], "replac": [71, 651, 743], "replace_at_idx": 72, "revers": [73, 217, 299, 426, 626, 722], "row": [74, 75], "sampl": [76, 229, 438], "schema": [77, 300], "select": [78, 301, 789, 808, 811, 815, 816], "shape": [79, 444], "shift": [80, 232, 302, 445, 627, 723], "shift_and_fil": [81, 233, 303, 446], "shrink_to_fit": [82, 448], "slice": [83, 240, 305, 454, 628, 655, 724, 747], "sort": [84, 241, 306, 455, 629, 725], "std": [85, 244, 307, 457, 792], "sum": [86, 247, 308, 459, 569, 578, 630, 726, 794], "tail": [87, 248, 309, 460, 570, 631, 670, 727, 795], "take_everi": [88, 250, 310, 462], "to_arrow": [89, 466], "to_dict": [90, 91], "to_dummi": [92, 467], "to_numpi": [93, 470], "to_panda": [94, 471], "to_seri": 95, "to_struct": [96, 632, 728], "transpos": 97, "uniqu": [98, 255, 311, 474, 633, 729], "unnest": [99, 312], "unstack": 100, "upsampl": 101, "var": [102, 259, 313, 477, 804], "vstack": 103, "width": 104, "with_column": [105, 106, 314, 315], "with_row_count": [107, 317], "write_avro": 108, "write_csv": 109, "write_ipc": 110, "write_json": [111, 318], "write_ndjson": 112, "write_parquet": 113, "expr": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "ab": [115, 323], "agg_group": 116, "alia": [117, 324], "all": [118, 325, 481], "ani": [119, 326, 482], "append": [120, 327], "arcco": [122, 329], "arccosh": [123, 330], "arcsin": [124, 331], "arcsinh": [125, 332], "arctan": [126, 333], "arctanh": [127, 334], "arg_max": [128, 335, 611, 707], "arg_min": [129, 336, 612, 708], "arg_sort": [130, 337], "arg_uniqu": [131, 339], "argsort": [132, 340], "arr": [133, 341], "backward_fil": 134, "cast": [135, 342], "cat": [136, 343], "ceil": [137, 344], "clip": [138, 347], "clip_max": [139, 348], "clip_min": [140, 349], "co": [141, 351], "cosh": [142, 352], "count": [143, 494, 558, 571], "cumcount": 144, "cummax": [145, 353], "cummin": [146, 354], "cumprod": [147, 355], "cumsum": [148, 356, 497], "cumulative_ev": [149, 357], "diff": [150, 359, 615, 711], "dot": [151, 360], "drop_nan": [152, 361], "dt": [154, 363], "entropi": [155, 365], "ewm_mean": [156, 367], "ewm_std": [157, 368], "ewm_var": [158, 369], "exclud": [159, 541], "exp": [160, 370], "extend_const": [162, 372], "first": [166, 276, 542, 559, 572, 617, 713], "flatten": 167, "floor": [168, 377], "forward_fil": 169, "hash": [170, 379], "inspect": [172, 282], "is_between": 174, "is_finit": [176, 387], "is_first": [177, 388], "is_in": [178, 390], "is_infinit": [179, 391], "is_nan": [180, 392], "is_not": 181, "is_not_nan": [182, 393], "is_not_nul": [183, 394], "is_nul": [184, 395], "keep_nam": 186, "kurtosi": [187, 399], "last": [188, 286, 561, 573, 621, 717], "len": [189, 400], "list": [191, 512, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 761, 811, 816], "log": [192, 402], "log10": [193, 403], "lower_bound": 194, "map": [195, 288, 763], "map_alia": 196, "mode": [201, 408], "nan_max": [203, 412], "nan_min": [204, 413], "over": 206, "pct_chang": [207, 416], "pow": 208, "prefix": 209, "rank": [212, 421], "reinterpret": [214, 423], "repeat_bi": 215, "reshap": [216, 425], "rolling_appli": [218, 427], "rolling_max": [219, 428], "rolling_mean": [220, 429], "rolling_median": [221, 430], "rolling_min": [222, 431], "rolling_quantil": [223, 432], "rolling_skew": [224, 433], "rolling_std": [225, 434], "rolling_sum": [226, 435], "rolling_var": [227, 436], "round": [228, 437, 600, 696], "search_sort": [230, 439], "set_sort": [231, 443], "shrink_dtyp": [234, 447], "shuffl": [235, 449], "sign": [236, 450], "sin": [237, 451], "sinh": [238, 452], "skew": [239, 453], "sort_bi": 242, "sqrt": [243, 456], "str": [245, 458], "suffix": 246, "take": [249, 461], "tan": [251, 463], "tanh": [252, 464], "to_phys": [253, 472], "top_k": [254, 473], "unique_count": [256, 475], "upper_bound": 257, "value_count": [258, 476], "where": 260, "lazyfram": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 667, 668, 669, 670, 815], "cach": 261, "collect": 264, "describe_optimized_plan": 266, "describe_plan": 267, "fetch": 272, "from_json": 277, "profil": 295, "read_json": [297, 778], "show_graph": 304, "with_context": 316, "sqlcontext": [319, 320, 321], "execut": 319, "queri": 320, "regist": 321, "seri": [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 801, 816], "arg_tru": 338, "chunk_length": 345, "flag": 376, "has_valid": 378, "inner_dtyp": 381, "is_boolean": 383, "is_datelik": 384, "is_float": 389, "is_numer": 396, "is_utf8": 398, "name": [411, 811], "new_from_index": 414, "peak_max": 417, "peak_min": 418, "series_equ": 440, "set": [441, 807], "set_at_idx": 442, "time_unit": 465, "to_fram": [468, 760], "to_list": 469, "view": 478, "zip_with": 479, "stringcach": 480, "arang": 484, "arg_wher": 485, "argsort_bi": 486, "avg": 487, "coalesc": 488, "col": 489, "collect_al": 490, "concat": [491, 613, 638, 709, 730], "concat_list": 492, "concat_str": 493, "cov": 495, "cumfold": 496, "cut": 498, "datatyp": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "binari": 499, "boolean": [500, 811, 816], "categor": [501, 579, 671], "date": [503, 524, 809], "datetim": [504, 526, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706], "durat": [505, 527], "float32": 506, "float64": 507, "int16": 508, "int32": 509, "int64": 510, "int8": 511, "null": 513, "object": 514, "struct": [515, 665, 666, 757, 758, 759, 760, 793, 811, 816], "time": [516, 809], "uint16": 517, "uint32": 518, "uint64": 519, "uint8": 520, "unknown": 521, "utf8": 522, "get_idx_typ": 523, "date_rang": 525, "element": 528, "except": [529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 810], "arrowerror": 529, "computeerror": 530, "duplicateerror": 531, "invalidoperationerror": 532, "nodataerror": 533, "norowsreturn": 534, "notfounderror": 535, "panicexcept": 536, "rowsexcept": 537, "schemaerror": 538, "shapeerror": 539, "toomanyrowsreturn": 540, "format": 544, "from_arrow": 545, "from_dict": [546, 547], "from_numpi": 548, "from_panda": 549, "from_record": 550, "get_dummi": 551, "group": 552, "intern": [554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760], "batch": 554, "batchedcsvread": [554, 814], "next_batch": 554, "agg": [555, 667], "agg_list": 556, "pivotop": [571, 572, 573, 574, 575, 576, 577, 578], "exprcatnamespac": 579, "set_ord": [579, 671], "exprdatetimenamespac": [580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610], "cast_time_unit": [580, 672], "cast_time_zon": [581, 673], "dai": [582, 583, 674, 675], "epoch": [584, 676], "hour": [585, 586, 677, 678], "iso_year": [587, 679], "microsecond": [588, 589, 683, 684], "millisecond": [590, 591, 685, 686], "minut": [592, 593, 688, 689], "month": [594, 690], "nanosecond": [595, 596, 691, 692], "offset_bi": [597, 693], "ordinal_dai": [598, 694], "quarter": [599, 695], "second": [601, 602, 697, 698], "strftime": [603, 699], "timestamp": [604, 700], "truncat": [605, 701], "tz_local": [606, 702], "week": [607, 703], "weekdai": [608, 704], "with_time_unit": [609, 705], "year": [610, 706], "exprlistnamespac": [611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "contain": [614, 639, 710, 731], "eval": [616, 712], "get": [618, 714], "length": [622, 647, 718, 739], "meta": [634, 635, 636, 637, 811], "exprmetanamespac": [634, 635, 636, 637], "output_nam": 634, "pop": 635, "root_nam": 636, "undo_alias": 637, "string": [638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 811, 816], "exprstringnamespac": [638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664], "count_match": [640, 732], "decod": [641, 733], "encod": [642, 734], "ends_with": [643, 735], "extract": [644, 736], "extract_al": [645, 737], "json_path_match": [646, 738], "ljust": [648, 740], "lstrip": [649, 741], "n_char": [650, 742], "replace_al": [652, 744], "rjust": [653, 745], "rstrip": [654, 746], "split": [656, 748], "split_exact": [657, 749], "splitn": [658, 750], "starts_with": [659, 751], "strip": [660, 752], "strptime": [661, 753], "to_lowercas": [662, 754], "to_uppercas": [663, 755], "zfill": [664, 756], "exprstructnamespac": [665, 666], "field": [665, 757, 758], "rename_field": [666, 759], "lazygroupbi": [667, 668, 669, 670], "catnamespac": 671, "datetimenamespac": [672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706], "listnamespac": [707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729], "stringnamespac": [730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756], "structnamespac": [757, 758, 759, 760], "lit": 762, "ones": 769, "pearson_corr": 770, "read_avro": 772, "read_csv": 773, "read_csv_batch": 774, "read_excel": 775, "read_ipc": 776, "read_ipc_schema": 777, "read_ndjson": 779, "read_parquet": 780, "read_parquet_schema": 781, "read_sql": 782, "repeat": 783, "scan_csv": 784, "scan_d": 785, "scan_ipc": 786, "scan_ndjson": 787, "scan_parquet": 788, "show_vers": 790, "spearman_rank_corr": 791, "test": [796, 797, 798, 799, 800, 801, 818], "assert_frame_equ": 796, "assert_series_equ": 797, "parametr": [798, 799, 800, 801], "threadpool_s": 802, "toggle_string_cach": 803, "when": 805, "zero": 806, "option": 807, "unset": 807, "current": 807, "constructor": [808, 811, 816], "attribut": [808, 811, 815, 816], "convers": [808, 812, 815, 816], "aggreg": [808, 811, 815, 816], "descript": [808, 815, 816], "stat": [808, 815, 816], "comput": [808, 811, 816], "manipul": [808, 811, 815, 816], "variou": [808, 811, 815, 816], "data": 809, "type": 809, "numer": 809, "nest": 809, "other": 809, "function": [809, 811, 812], "express": 811, "window": 811, "timeseri": [811, 816], "categori": [811, 816], "eager": 812, "parallel": 812, "api": 813, "refer": 813, "input": 814, "output": 814, "csv": 814, "feather": 814, "ipc": 814, "parquet": 814, "sql": [814, 817], "json": 814, "avro": 814, "excel": 814, "dataset": 814, "method": 817, "assert": 818, "properti": 818, "base": 818, "strategi": 818, "helper": 818, "util": 819}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Config.load": [[1, "polars-config-load"]], "polars.Config.restore_defaults": [[2, "polars-config-restore-defaults"]], "polars.Config.save": [[3, "polars-config-save"]], "polars.Config.set_ascii_tables": [[4, "polars-config-set-ascii-tables"]], "polars.Config.set_fmt_str_lengths": [[5, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_cell_alignment": [[6, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_cols": [[7, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_column_data_type_inline": [[8, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_dataframe_shape_below": [[9, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_formatting": [[10, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_column_data_types": [[11, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[12, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dataframe_shape": [[13, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[14, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_rows": [[15, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_width_chars": [[16, "polars-config-set-tbl-width-chars"]], "polars.Config.set_verbose": [[17, "polars-config-set-verbose"]], "polars.Config.state": [[18, "polars-config-state"]], "polars.DataFrame": [[19, "polars-dataframe"]], "polars.DataFrame.apply": [[20, "polars-dataframe-apply"]], "polars.DataFrame.cleared": [[21, "polars-dataframe-cleared"]], "polars.DataFrame.clone": [[22, "polars-dataframe-clone"]], "polars.DataFrame.columns": [[23, "polars-dataframe-columns"]], "polars.DataFrame.describe": [[24, "polars-dataframe-describe"]], "polars.DataFrame.drop": [[25, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[26, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop_nulls": [[27, "polars-dataframe-drop-nulls"]], "polars.DataFrame.dtypes": [[28, "polars-dataframe-dtypes"]], "polars.DataFrame.estimated_size": [[29, "polars-dataframe-estimated-size"]], "polars.DataFrame.explode": [[30, "polars-dataframe-explode"]], "polars.DataFrame.extend": [[31, "polars-dataframe-extend"]], "polars.DataFrame.fill_nan": [[32, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[33, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[34, "polars-dataframe-filter"]], "polars.DataFrame.find_idx_by_name": [[35, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.fold": [[36, "polars-dataframe-fold"]], "polars.DataFrame.frame_equal": [[37, "polars-dataframe-frame-equal"]], "polars.DataFrame.get_column": [[38, "polars-dataframe-get-column"]], "polars.DataFrame.get_columns": [[39, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby": [[40, "polars-dataframe-groupby"]], "polars.DataFrame.groupby_dynamic": [[41, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.groupby_rolling": [[42, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hash_rows": [[43, "polars-dataframe-hash-rows"]], "polars.DataFrame.head": [[44, "polars-dataframe-head"]], "polars.DataFrame.height": [[45, "polars-dataframe-height"]], "polars.DataFrame.hstack": [[46, "polars-dataframe-hstack"]], "polars.DataFrame.insert_at_idx": [[47, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.interpolate": [[48, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[49, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_empty": [[50, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[51, "polars-dataframe-is-unique"]], "polars.DataFrame.join": [[52, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[53, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[54, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[55, "polars-dataframe-limit"]], "polars.DataFrame.max": [[56, "polars-dataframe-max"]], "polars.DataFrame.mean": [[57, "polars-dataframe-mean"]], "polars.DataFrame.median": [[58, "polars-dataframe-median"]], "polars.DataFrame.melt": [[59, "polars-dataframe-melt"]], "polars.DataFrame.min": [[60, "polars-dataframe-min"]], "polars.DataFrame.n_chunks": [[61, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[62, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[63, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[64, "polars-dataframe-partition-by"]], "polars.DataFrame.pipe": [[65, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[66, "polars-dataframe-pivot"]], "polars.DataFrame.product": [[67, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[68, "polars-dataframe-quantile"]], "polars.DataFrame.rechunk": [[69, "polars-dataframe-rechunk"]], "polars.DataFrame.rename": [[70, "polars-dataframe-rename"]], "polars.DataFrame.replace": [[71, "polars-dataframe-replace"]], "polars.DataFrame.replace_at_idx": [[72, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.reverse": [[73, "polars-dataframe-reverse"]], "polars.DataFrame.row": [[74, "polars-dataframe-row"]], "polars.DataFrame.rows": [[75, "polars-dataframe-rows"]], "polars.DataFrame.sample": [[76, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[77, "polars-dataframe-schema"]], "polars.DataFrame.select": [[78, "polars-dataframe-select"]], "polars.DataFrame.shape": [[79, "polars-dataframe-shape"]], "polars.DataFrame.shift": [[80, "polars-dataframe-shift"]], "polars.DataFrame.shift_and_fill": [[81, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shrink_to_fit": [[82, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.slice": [[83, "polars-dataframe-slice"]], "polars.DataFrame.sort": [[84, "polars-dataframe-sort"]], "polars.DataFrame.std": [[85, "polars-dataframe-std"]], "polars.DataFrame.sum": [[86, "polars-dataframe-sum"]], "polars.DataFrame.tail": [[87, "polars-dataframe-tail"]], "polars.DataFrame.take_every": [[88, "polars-dataframe-take-every"]], "polars.DataFrame.to_arrow": [[89, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[90, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[91, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dummies": [[92, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_numpy": [[93, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[94, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[95, "polars-dataframe-to-series"]], "polars.DataFrame.to_struct": [[96, "polars-dataframe-to-struct"]], "polars.DataFrame.transpose": [[97, "polars-dataframe-transpose"]], "polars.DataFrame.unique": [[98, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[99, "polars-dataframe-unnest"]], "polars.DataFrame.unstack": [[100, "polars-dataframe-unstack"]], "polars.DataFrame.upsample": [[101, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[102, "polars-dataframe-var"]], "polars.DataFrame.vstack": [[103, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[104, "polars-dataframe-width"]], "polars.DataFrame.with_column": [[105, "polars-dataframe-with-column"]], "polars.DataFrame.with_columns": [[106, "polars-dataframe-with-columns"]], "polars.DataFrame.with_row_count": [[107, "polars-dataframe-with-row-count"]], "polars.DataFrame.write_avro": [[108, "polars-dataframe-write-avro"]], "polars.DataFrame.write_csv": [[109, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ipc": [[110, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[111, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[112, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_parquet": [[113, "polars-dataframe-write-parquet"]], "polars.Expr": [[114, "polars-expr"]], "polars.Expr.abs": [[115, "polars-expr-abs"]], "polars.Expr.agg_groups": [[116, "polars-expr-agg-groups"]], "polars.Expr.alias": [[117, "polars-expr-alias"]], "polars.Expr.all": [[118, "polars-expr-all"]], "polars.Expr.any": [[119, "polars-expr-any"]], "polars.Expr.append": [[120, "polars-expr-append"]], "polars.Expr.apply": [[121, "polars-expr-apply"]], "polars.Expr.arccos": [[122, "polars-expr-arccos"]], "polars.Expr.arccosh": [[123, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[124, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[125, "polars-expr-arcsinh"]], "polars.Expr.arctan": [[126, "polars-expr-arctan"]], "polars.Expr.arctanh": [[127, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[128, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[129, "polars-expr-arg-min"]], "polars.Expr.arg_sort": [[130, "polars-expr-arg-sort"]], "polars.Expr.arg_unique": [[131, "polars-expr-arg-unique"]], "polars.Expr.argsort": [[132, "polars-expr-argsort"]], "polars.Expr.arr": [[133, "polars-expr-arr"]], "polars.Expr.backward_fill": [[134, "polars-expr-backward-fill"]], "polars.Expr.cast": [[135, "polars-expr-cast"]], "polars.Expr.cat": [[136, "polars-expr-cat"]], "polars.Expr.ceil": [[137, "polars-expr-ceil"]], "polars.Expr.clip": [[138, "polars-expr-clip"]], "polars.Expr.clip_max": [[139, "polars-expr-clip-max"]], "polars.Expr.clip_min": [[140, "polars-expr-clip-min"]], "polars.Expr.cos": [[141, "polars-expr-cos"]], "polars.Expr.cosh": [[142, "polars-expr-cosh"]], "polars.Expr.count": [[143, "polars-expr-count"]], "polars.Expr.cumcount": [[144, "polars-expr-cumcount"]], "polars.Expr.cummax": [[145, "polars-expr-cummax"]], "polars.Expr.cummin": [[146, "polars-expr-cummin"]], "polars.Expr.cumprod": [[147, "polars-expr-cumprod"]], "polars.Expr.cumsum": [[148, "polars-expr-cumsum"]], "polars.Expr.cumulative_eval": [[149, "polars-expr-cumulative-eval"]], "polars.Expr.diff": [[150, "polars-expr-diff"]], "polars.Expr.dot": [[151, "polars-expr-dot"]], "polars.Expr.drop_nans": [[152, "polars-expr-drop-nans"]], "polars.Expr.drop_nulls": [[153, "polars-expr-drop-nulls"]], "polars.Expr.dt": [[154, "polars-expr-dt"]], "polars.Expr.entropy": [[155, "polars-expr-entropy"]], "polars.Expr.ewm_mean": [[156, "polars-expr-ewm-mean"]], "polars.Expr.ewm_std": [[157, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[158, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[159, "polars-expr-exclude"]], "polars.Expr.exp": [[160, "polars-expr-exp"]], "polars.Expr.explode": [[161, "polars-expr-explode"]], "polars.Expr.extend_constant": [[162, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[163, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[164, "polars-expr-fill-null"]], "polars.Expr.filter": [[165, "polars-expr-filter"]], "polars.Expr.first": [[166, "polars-expr-first"]], "polars.Expr.flatten": [[167, "polars-expr-flatten"]], "polars.Expr.floor": [[168, "polars-expr-floor"]], "polars.Expr.forward_fill": [[169, "polars-expr-forward-fill"]], "polars.Expr.hash": [[170, "polars-expr-hash"]], "polars.Expr.head": [[171, "polars-expr-head"]], "polars.Expr.inspect": [[172, "polars-expr-inspect"]], "polars.Expr.interpolate": [[173, "polars-expr-interpolate"]], "polars.Expr.is_between": [[174, "polars-expr-is-between"]], "polars.Expr.is_duplicated": [[175, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[176, "polars-expr-is-finite"]], "polars.Expr.is_first": [[177, "polars-expr-is-first"]], "polars.Expr.is_in": [[178, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[179, "polars-expr-is-infinite"]], "polars.Expr.is_nan": [[180, "polars-expr-is-nan"]], "polars.Expr.is_not": [[181, "polars-expr-is-not"]], "polars.Expr.is_not_nan": [[182, "polars-expr-is-not-nan"]], "polars.Expr.is_not_null": [[183, "polars-expr-is-not-null"]], "polars.Expr.is_null": [[184, "polars-expr-is-null"]], "polars.Expr.is_unique": [[185, "polars-expr-is-unique"]], "polars.Expr.keep_name": [[186, "polars-expr-keep-name"]], "polars.Expr.kurtosis": [[187, "polars-expr-kurtosis"]], "polars.Expr.last": [[188, "polars-expr-last"]], "polars.Expr.len": [[189, "polars-expr-len"]], "polars.Expr.limit": [[190, "polars-expr-limit"]], "polars.Expr.list": [[191, "polars-expr-list"]], "polars.Expr.log": [[192, "polars-expr-log"]], "polars.Expr.log10": [[193, "polars-expr-log10"]], "polars.Expr.lower_bound": [[194, "polars-expr-lower-bound"]], "polars.Expr.map": [[195, "polars-expr-map"]], "polars.Expr.map_alias": [[196, "polars-expr-map-alias"]], "polars.Expr.max": [[197, "polars-expr-max"]], "polars.Expr.mean": [[198, "polars-expr-mean"]], "polars.Expr.median": [[199, "polars-expr-median"]], "polars.Expr.min": [[200, "polars-expr-min"]], "polars.Expr.mode": [[201, "polars-expr-mode"]], "polars.Expr.n_unique": [[202, "polars-expr-n-unique"]], "polars.Expr.nan_max": [[203, "polars-expr-nan-max"]], "polars.Expr.nan_min": [[204, "polars-expr-nan-min"]], "polars.Expr.null_count": [[205, "polars-expr-null-count"]], "polars.Expr.over": [[206, "polars-expr-over"]], "polars.Expr.pct_change": [[207, "polars-expr-pct-change"]], "polars.Expr.pow": [[208, "polars-expr-pow"]], "polars.Expr.prefix": [[209, "polars-expr-prefix"]], "polars.Expr.product": [[210, "polars-expr-product"]], "polars.Expr.quantile": [[211, "polars-expr-quantile"]], "polars.Expr.rank": [[212, "polars-expr-rank"]], "polars.Expr.rechunk": [[213, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[214, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[215, "polars-expr-repeat-by"]], "polars.Expr.reshape": [[216, "polars-expr-reshape"]], "polars.Expr.reverse": [[217, "polars-expr-reverse"]], "polars.Expr.rolling_apply": [[218, "polars-expr-rolling-apply"]], "polars.Expr.rolling_max": [[219, "polars-expr-rolling-max"]], "polars.Expr.rolling_mean": [[220, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median": [[221, "polars-expr-rolling-median"]], "polars.Expr.rolling_min": [[222, "polars-expr-rolling-min"]], "polars.Expr.rolling_quantile": [[223, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_skew": [[224, "polars-expr-rolling-skew"]], "polars.Expr.rolling_std": [[225, "polars-expr-rolling-std"]], "polars.Expr.rolling_sum": [[226, "polars-expr-rolling-sum"]], "polars.Expr.rolling_var": [[227, "polars-expr-rolling-var"]], "polars.Expr.round": [[228, "polars-expr-round"]], "polars.Expr.sample": [[229, "polars-expr-sample"]], "polars.Expr.search_sorted": [[230, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[231, "polars-expr-set-sorted"]], "polars.Expr.shift": [[232, "polars-expr-shift"]], "polars.Expr.shift_and_fill": [[233, "polars-expr-shift-and-fill"]], "polars.Expr.shrink_dtype": [[234, "polars-expr-shrink-dtype"]], "polars.Expr.shuffle": [[235, "polars-expr-shuffle"]], "polars.Expr.sign": [[236, "polars-expr-sign"]], "polars.Expr.sin": [[237, "polars-expr-sin"]], "polars.Expr.sinh": [[238, "polars-expr-sinh"]], "polars.Expr.skew": [[239, "polars-expr-skew"]], "polars.Expr.slice": [[240, "polars-expr-slice"]], "polars.Expr.sort": [[241, "polars-expr-sort"]], "polars.Expr.sort_by": [[242, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[243, "polars-expr-sqrt"]], "polars.Expr.std": [[244, "polars-expr-std"]], "polars.Expr.str": [[245, "polars-expr-str"]], "polars.Expr.suffix": [[246, "polars-expr-suffix"]], "polars.Expr.sum": [[247, "polars-expr-sum"]], "polars.Expr.tail": [[248, "polars-expr-tail"]], "polars.Expr.take": [[249, "polars-expr-take"]], "polars.Expr.take_every": [[250, "polars-expr-take-every"]], "polars.Expr.tan": [[251, "polars-expr-tan"]], "polars.Expr.tanh": [[252, "polars-expr-tanh"]], "polars.Expr.to_physical": [[253, "polars-expr-to-physical"]], "polars.Expr.top_k": [[254, "polars-expr-top-k"]], "polars.Expr.unique": [[255, "polars-expr-unique"]], "polars.Expr.unique_counts": [[256, "polars-expr-unique-counts"]], "polars.Expr.upper_bound": [[257, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[258, "polars-expr-value-counts"]], "polars.Expr.var": [[259, "polars-expr-var"]], "polars.Expr.where": [[260, "polars-expr-where"]], "polars.LazyFrame.cache": [[261, "polars-lazyframe-cache"]], "polars.LazyFrame.cleared": [[262, "polars-lazyframe-cleared"]], "polars.LazyFrame.clone": [[263, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[264, "polars-lazyframe-collect"]], "polars.LazyFrame.columns": [[265, "polars-lazyframe-columns"]], "polars.LazyFrame.describe_optimized_plan": [[266, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.describe_plan": [[267, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.drop": [[268, "polars-lazyframe-drop"]], "polars.LazyFrame.drop_nulls": [[269, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[270, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[271, "polars-lazyframe-explode"]], "polars.LazyFrame.fetch": [[272, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_nan": [[273, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[274, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[275, "polars-lazyframe-filter"]], "polars.LazyFrame.first": [[276, "polars-lazyframe-first"]], "polars.LazyFrame.from_json": [[277, "polars-lazyframe-from-json"]], "polars.LazyFrame.groupby": [[278, "polars-lazyframe-groupby"]], "polars.LazyFrame.groupby_dynamic": [[279, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.groupby_rolling": [[280, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.head": [[281, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[282, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[283, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join": [[284, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[285, "polars-lazyframe-join-asof"]], "polars.LazyFrame.last": [[286, "polars-lazyframe-last"]], "polars.LazyFrame.limit": [[287, "polars-lazyframe-limit"]], "polars.LazyFrame.map": [[288, "polars-lazyframe-map"]], "polars.LazyFrame.max": [[289, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[290, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[291, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[292, "polars-lazyframe-melt"]], "polars.LazyFrame.min": [[293, "polars-lazyframe-min"]], "polars.LazyFrame.pipe": [[294, "polars-lazyframe-pipe"]], "polars.LazyFrame.profile": [[295, "polars-lazyframe-profile"]], "polars.LazyFrame.quantile": [[296, "polars-lazyframe-quantile"]], "polars.LazyFrame.read_json": [[297, "polars-lazyframe-read-json"]], "polars.LazyFrame.rename": [[298, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[299, "polars-lazyframe-reverse"]], "polars.LazyFrame.schema": [[300, "polars-lazyframe-schema"]], "polars.LazyFrame.select": [[301, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[302, "polars-lazyframe-shift"]], "polars.LazyFrame.shift_and_fill": [[303, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.show_graph": [[304, "polars-lazyframe-show-graph"]], "polars.LazyFrame.slice": [[305, "polars-lazyframe-slice"]], "polars.LazyFrame.sort": [[306, "polars-lazyframe-sort"]], "polars.LazyFrame.std": [[307, "polars-lazyframe-std"]], "polars.LazyFrame.sum": [[308, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[309, "polars-lazyframe-tail"]], "polars.LazyFrame.take_every": [[310, "polars-lazyframe-take-every"]], "polars.LazyFrame.unique": [[311, "polars-lazyframe-unique"]], "polars.LazyFrame.unnest": [[312, "polars-lazyframe-unnest"]], "polars.LazyFrame.var": [[313, "polars-lazyframe-var"]], "polars.LazyFrame.with_column": [[314, "polars-lazyframe-with-column"]], "polars.LazyFrame.with_columns": [[315, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_context": [[316, "polars-lazyframe-with-context"]], "polars.LazyFrame.with_row_count": [[317, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.write_json": [[318, "polars-lazyframe-write-json"]], "polars.SQLContext.execute": [[319, "polars-sqlcontext-execute"]], "polars.SQLContext.query": [[320, "polars-sqlcontext-query"]], "polars.SQLContext.register": [[321, "polars-sqlcontext-register"]], "polars.Series": [[322, "polars-series"]], "polars.Series.abs": [[323, "polars-series-abs"]], "polars.Series.alias": [[324, "polars-series-alias"]], "polars.Series.all": [[325, "polars-series-all"]], "polars.Series.any": [[326, "polars-series-any"]], "polars.Series.append": [[327, "polars-series-append"]], "polars.Series.apply": [[328, "polars-series-apply"]], "polars.Series.arccos": [[329, "polars-series-arccos"]], "polars.Series.arccosh": [[330, "polars-series-arccosh"]], "polars.Series.arcsin": [[331, "polars-series-arcsin"]], "polars.Series.arcsinh": [[332, "polars-series-arcsinh"]], "polars.Series.arctan": [[333, "polars-series-arctan"]], "polars.Series.arctanh": [[334, "polars-series-arctanh"]], "polars.Series.arg_max": [[335, "polars-series-arg-max"]], "polars.Series.arg_min": [[336, "polars-series-arg-min"]], "polars.Series.arg_sort": [[337, "polars-series-arg-sort"]], "polars.Series.arg_true": [[338, "polars-series-arg-true"]], "polars.Series.arg_unique": [[339, "polars-series-arg-unique"]], "polars.Series.argsort": [[340, "polars-series-argsort"]], "polars.Series.arr": [[341, "polars-series-arr"]], "polars.Series.cast": [[342, "polars-series-cast"]], "polars.Series.cat": [[343, "polars-series-cat"]], "polars.Series.ceil": [[344, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[345, "polars-series-chunk-lengths"]], "polars.Series.cleared": [[346, "polars-series-cleared"]], "polars.Series.clip": [[347, "polars-series-clip"]], "polars.Series.clip_max": [[348, "polars-series-clip-max"]], "polars.Series.clip_min": [[349, "polars-series-clip-min"]], "polars.Series.clone": [[350, "polars-series-clone"]], "polars.Series.cos": [[351, "polars-series-cos"]], "polars.Series.cosh": [[352, "polars-series-cosh"]], "polars.Series.cummax": [[353, "polars-series-cummax"]], "polars.Series.cummin": [[354, "polars-series-cummin"]], "polars.Series.cumprod": [[355, "polars-series-cumprod"]], "polars.Series.cumsum": [[356, "polars-series-cumsum"]], "polars.Series.cumulative_eval": [[357, "polars-series-cumulative-eval"]], "polars.Series.describe": [[358, "polars-series-describe"]], "polars.Series.diff": [[359, "polars-series-diff"]], "polars.Series.dot": [[360, "polars-series-dot"]], "polars.Series.drop_nans": [[361, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[362, "polars-series-drop-nulls"]], "polars.Series.dt": [[363, "polars-series-dt"]], "polars.Series.dtype": [[364, "polars-series-dtype"]], "polars.Series.entropy": [[365, "polars-series-entropy"]], "polars.Series.estimated_size": [[366, "polars-series-estimated-size"]], "polars.Series.ewm_mean": [[367, "polars-series-ewm-mean"]], "polars.Series.ewm_std": [[368, "polars-series-ewm-std"]], "polars.Series.ewm_var": [[369, "polars-series-ewm-var"]], "polars.Series.exp": [[370, "polars-series-exp"]], "polars.Series.explode": [[371, "polars-series-explode"]], "polars.Series.extend_constant": [[372, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[373, "polars-series-fill-nan"]], "polars.Series.fill_null": [[374, "polars-series-fill-null"]], "polars.Series.filter": [[375, "polars-series-filter"]], "polars.Series.flags": [[376, "polars-series-flags"]], "polars.Series.floor": [[377, "polars-series-floor"]], "polars.Series.has_validity": [[378, "polars-series-has-validity"]], "polars.Series.hash": [[379, "polars-series-hash"]], "polars.Series.head": [[380, "polars-series-head"]], "polars.Series.inner_dtype": [[381, "polars-series-inner-dtype"]], "polars.Series.interpolate": [[382, "polars-series-interpolate"]], "polars.Series.is_boolean": [[383, "polars-series-is-boolean"]], "polars.Series.is_datelike": [[384, "polars-series-is-datelike"]], "polars.Series.is_duplicated": [[385, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[386, "polars-series-is-empty"]], "polars.Series.is_finite": [[387, "polars-series-is-finite"]], "polars.Series.is_first": [[388, "polars-series-is-first"]], "polars.Series.is_float": [[389, "polars-series-is-float"]], "polars.Series.is_in": [[390, "polars-series-is-in"]], "polars.Series.is_infinite": [[391, "polars-series-is-infinite"]], "polars.Series.is_nan": [[392, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[393, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[394, "polars-series-is-not-null"]], "polars.Series.is_null": [[395, "polars-series-is-null"]], "polars.Series.is_numeric": [[396, "polars-series-is-numeric"]], "polars.Series.is_unique": [[397, "polars-series-is-unique"]], "polars.Series.is_utf8": [[398, "polars-series-is-utf8"]], "polars.Series.kurtosis": [[399, "polars-series-kurtosis"]], "polars.Series.len": [[400, "polars-series-len"]], "polars.Series.limit": [[401, "polars-series-limit"]], "polars.Series.log": [[402, "polars-series-log"]], "polars.Series.log10": [[403, "polars-series-log10"]], "polars.Series.max": [[404, "polars-series-max"]], "polars.Series.mean": [[405, "polars-series-mean"]], "polars.Series.median": [[406, "polars-series-median"]], "polars.Series.min": [[407, "polars-series-min"]], "polars.Series.mode": [[408, "polars-series-mode"]], "polars.Series.n_chunks": [[409, "polars-series-n-chunks"]], "polars.Series.n_unique": [[410, "polars-series-n-unique"]], "polars.Series.name": [[411, "polars-series-name"]], "polars.Series.nan_max": [[412, "polars-series-nan-max"]], "polars.Series.nan_min": [[413, "polars-series-nan-min"]], "polars.Series.new_from_index": [[414, "polars-series-new-from-index"]], "polars.Series.null_count": [[415, "polars-series-null-count"]], "polars.Series.pct_change": [[416, "polars-series-pct-change"]], "polars.Series.peak_max": [[417, "polars-series-peak-max"]], "polars.Series.peak_min": [[418, "polars-series-peak-min"]], "polars.Series.product": [[419, "polars-series-product"]], "polars.Series.quantile": [[420, "polars-series-quantile"]], "polars.Series.rank": [[421, "polars-series-rank"]], "polars.Series.rechunk": [[422, "polars-series-rechunk"]], "polars.Series.reinterpret": [[423, "polars-series-reinterpret"]], "polars.Series.rename": [[424, "polars-series-rename"]], "polars.Series.reshape": [[425, "polars-series-reshape"]], "polars.Series.reverse": [[426, "polars-series-reverse"]], "polars.Series.rolling_apply": [[427, "polars-series-rolling-apply"]], "polars.Series.rolling_max": [[428, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[429, "polars-series-rolling-mean"]], "polars.Series.rolling_median": [[430, "polars-series-rolling-median"]], "polars.Series.rolling_min": [[431, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[432, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[433, "polars-series-rolling-skew"]], "polars.Series.rolling_std": [[434, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[435, "polars-series-rolling-sum"]], "polars.Series.rolling_var": [[436, "polars-series-rolling-var"]], "polars.Series.round": [[437, "polars-series-round"]], "polars.Series.sample": [[438, "polars-series-sample"]], "polars.Series.search_sorted": [[439, "polars-series-search-sorted"]], "polars.Series.series_equal": [[440, "polars-series-series-equal"]], "polars.Series.set": [[441, "polars-series-set"]], "polars.Series.set_at_idx": [[442, "polars-series-set-at-idx"]], "polars.Series.set_sorted": [[443, "polars-series-set-sorted"]], "polars.Series.shape": [[444, "polars-series-shape"]], "polars.Series.shift": [[445, "polars-series-shift"]], "polars.Series.shift_and_fill": [[446, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[447, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[448, "polars-series-shrink-to-fit"]], "polars.Series.shuffle": [[449, "polars-series-shuffle"]], "polars.Series.sign": [[450, "polars-series-sign"]], "polars.Series.sin": [[451, "polars-series-sin"]], "polars.Series.sinh": [[452, "polars-series-sinh"]], "polars.Series.skew": [[453, "polars-series-skew"]], "polars.Series.slice": [[454, "polars-series-slice"]], "polars.Series.sort": [[455, "polars-series-sort"]], "polars.Series.sqrt": [[456, "polars-series-sqrt"]], "polars.Series.std": [[457, "polars-series-std"]], "polars.Series.str": [[458, "polars-series-str"]], "polars.Series.sum": [[459, "polars-series-sum"]], "polars.Series.tail": [[460, "polars-series-tail"]], "polars.Series.take": [[461, "polars-series-take"]], "polars.Series.take_every": [[462, "polars-series-take-every"]], "polars.Series.tan": [[463, "polars-series-tan"]], "polars.Series.tanh": [[464, "polars-series-tanh"]], "polars.Series.time_unit": [[465, "polars-series-time-unit"]], "polars.Series.to_arrow": [[466, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[467, "polars-series-to-dummies"]], "polars.Series.to_frame": [[468, "polars-series-to-frame"]], "polars.Series.to_list": [[469, "polars-series-to-list"]], "polars.Series.to_numpy": [[470, "polars-series-to-numpy"]], "polars.Series.to_pandas": [[471, "polars-series-to-pandas"]], "polars.Series.to_physical": [[472, "polars-series-to-physical"]], "polars.Series.top_k": [[473, "polars-series-top-k"]], "polars.Series.unique": [[474, "polars-series-unique"]], "polars.Series.unique_counts": [[475, "polars-series-unique-counts"]], "polars.Series.value_counts": [[476, "polars-series-value-counts"]], "polars.Series.var": [[477, "polars-series-var"]], "polars.Series.view": [[478, "polars-series-view"]], "polars.Series.zip_with": [[479, "polars-series-zip-with"]], "polars.StringCache": [[480, "polars-stringcache"]], "polars.all": [[481, "polars-all"]], "polars.any": [[482, "polars-any"]], "polars.apply": [[483, "polars-apply"]], "polars.arange": [[484, "polars-arange"]], "polars.arg_where": [[485, "polars-arg-where"]], "polars.argsort_by": [[486, "polars-argsort-by"]], "polars.avg": [[487, "polars-avg"]], "polars.coalesce": [[488, "polars-coalesce"]], "polars.col": [[489, "polars-col"]], "polars.collect_all": [[490, "polars-collect-all"]], "polars.concat": [[491, "polars-concat"]], "polars.concat_list": [[492, "polars-concat-list"]], "polars.concat_str": [[493, "polars-concat-str"]], "polars.count": [[494, "polars-count"]], "polars.cov": [[495, "polars-cov"]], "polars.cumfold": [[496, "polars-cumfold"]], "polars.cumsum": [[497, "polars-cumsum"]], "polars.cut": [[498, "polars-cut"]], "polars.datatypes.Binary": [[499, "polars-datatypes-binary"]], "polars.datatypes.Boolean": [[500, "polars-datatypes-boolean"]], "polars.datatypes.Categorical": [[501, "polars-datatypes-categorical"]], "polars.datatypes.DataType": [[502, "polars-datatypes-datatype"]], "polars.datatypes.Date": [[503, "polars-datatypes-date"]], "polars.datatypes.Datetime": [[504, "polars-datatypes-datetime"]], "polars.datatypes.Duration": [[505, "polars-datatypes-duration"]], "polars.datatypes.Float32": [[506, "polars-datatypes-float32"]], "polars.datatypes.Float64": [[507, "polars-datatypes-float64"]], "polars.datatypes.Int16": [[508, "polars-datatypes-int16"]], "polars.datatypes.Int32": [[509, "polars-datatypes-int32"]], "polars.datatypes.Int64": [[510, "polars-datatypes-int64"]], "polars.datatypes.Int8": [[511, "polars-datatypes-int8"]], "polars.datatypes.List": [[512, "polars-datatypes-list"]], "polars.datatypes.Null": [[513, "polars-datatypes-null"]], "polars.datatypes.Object": [[514, "polars-datatypes-object"]], "polars.datatypes.Struct": [[515, "polars-datatypes-struct"]], "polars.datatypes.Time": [[516, "polars-datatypes-time"]], "polars.datatypes.UInt16": [[517, "polars-datatypes-uint16"]], "polars.datatypes.UInt32": [[518, "polars-datatypes-uint32"]], "polars.datatypes.UInt64": [[519, "polars-datatypes-uint64"]], "polars.datatypes.UInt8": [[520, "polars-datatypes-uint8"]], "polars.datatypes.Unknown": [[521, "polars-datatypes-unknown"]], "polars.datatypes.Utf8": [[522, "polars-datatypes-utf8"]], "polars.datatypes.get_idx_type": [[523, "polars-datatypes-get-idx-type"]], "polars.date": [[524, "polars-date"]], "polars.date_range": [[525, "polars-date-range"]], "polars.datetime": [[526, "polars-datetime"]], "polars.duration": [[527, "polars-duration"]], "polars.element": [[528, "polars-element"]], "polars.exceptions.ArrowError": [[529, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[530, "polars-exceptions-computeerror"]], "polars.exceptions.DuplicateError": [[531, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[532, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.NoDataError": [[533, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturned": [[534, "polars-exceptions-norowsreturned"]], "polars.exceptions.NotFoundError": [[535, "polars-exceptions-notfounderror"]], "polars.exceptions.PanicException": [[536, "polars-exceptions-panicexception"]], "polars.exceptions.RowsException": [[537, "polars-exceptions-rowsexception"]], "polars.exceptions.SchemaError": [[538, "polars-exceptions-schemaerror"]], "polars.exceptions.ShapeError": [[539, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[540, "polars-exceptions-toomanyrowsreturned"]], "polars.exclude": [[541, "polars-exclude"]], "polars.first": [[542, "polars-first"]], "polars.fold": [[543, "polars-fold"]], "polars.format": [[544, "polars-format"]], "polars.from_arrow": [[545, "polars-from-arrow"]], "polars.from_dict": [[546, "polars-from-dict"]], "polars.from_dicts": [[547, "polars-from-dicts"]], "polars.from_numpy": [[548, "polars-from-numpy"]], "polars.from_pandas": [[549, "polars-from-pandas"]], "polars.from_records": [[550, "polars-from-records"]], "polars.get_dummies": [[551, "polars-get-dummies"]], "polars.groups": [[552, "polars-groups"]], "polars.head": [[553, "polars-head"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[554, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[555, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[556, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[557, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.count": [[558, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.dataframe.groupby.GroupBy.first": [[559, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.head": [[560, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.last": [[561, "polars-internals-dataframe-groupby-groupby-last"]], "polars.internals.dataframe.groupby.GroupBy.max": [[562, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[563, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.median": [[564, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.min": [[565, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[566, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[567, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[568, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[569, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[570, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.pivot.PivotOps.count": [[571, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.pivot.PivotOps.first": [[572, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.pivot.PivotOps.last": [[573, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.internals.dataframe.pivot.PivotOps.max": [[574, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[575, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.internals.dataframe.pivot.PivotOps.median": [[576, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.internals.dataframe.pivot.PivotOps.min": [[577, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[578, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering": [[579, "polars-internals-expr-categorical-exprcatnamespace-set-ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit": [[580, "polars-internals-expr-datetime-exprdatetimenamespace-cast-time-unit"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone": [[581, "polars-internals-expr-datetime-exprdatetimenamespace-cast-time-zone"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.day": [[582, "polars-internals-expr-datetime-exprdatetimenamespace-day"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.days": [[583, "polars-internals-expr-datetime-exprdatetimenamespace-days"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch": [[584, "polars-internals-expr-datetime-exprdatetimenamespace-epoch"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour": [[585, "polars-internals-expr-datetime-exprdatetimenamespace-hour"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours": [[586, "polars-internals-expr-datetime-exprdatetimenamespace-hours"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year": [[587, "polars-internals-expr-datetime-exprdatetimenamespace-iso-year"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond": [[588, "polars-internals-expr-datetime-exprdatetimenamespace-microsecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds": [[589, "polars-internals-expr-datetime-exprdatetimenamespace-microseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond": [[590, "polars-internals-expr-datetime-exprdatetimenamespace-millisecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds": [[591, "polars-internals-expr-datetime-exprdatetimenamespace-milliseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute": [[592, "polars-internals-expr-datetime-exprdatetimenamespace-minute"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes": [[593, "polars-internals-expr-datetime-exprdatetimenamespace-minutes"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.month": [[594, "polars-internals-expr-datetime-exprdatetimenamespace-month"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond": [[595, "polars-internals-expr-datetime-exprdatetimenamespace-nanosecond"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds": [[596, "polars-internals-expr-datetime-exprdatetimenamespace-nanoseconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by": [[597, "polars-internals-expr-datetime-exprdatetimenamespace-offset-by"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day": [[598, "polars-internals-expr-datetime-exprdatetimenamespace-ordinal-day"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter": [[599, "polars-internals-expr-datetime-exprdatetimenamespace-quarter"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.round": [[600, "polars-internals-expr-datetime-exprdatetimenamespace-round"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.second": [[601, "polars-internals-expr-datetime-exprdatetimenamespace-second"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds": [[602, "polars-internals-expr-datetime-exprdatetimenamespace-seconds"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime": [[603, "polars-internals-expr-datetime-exprdatetimenamespace-strftime"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp": [[604, "polars-internals-expr-datetime-exprdatetimenamespace-timestamp"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate": [[605, "polars-internals-expr-datetime-exprdatetimenamespace-truncate"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.tz_localize": [[606, "polars-internals-expr-datetime-exprdatetimenamespace-tz-localize"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.week": [[607, "polars-internals-expr-datetime-exprdatetimenamespace-week"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday": [[608, "polars-internals-expr-datetime-exprdatetimenamespace-weekday"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit": [[609, "polars-internals-expr-datetime-exprdatetimenamespace-with-time-unit"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace.year": [[610, "polars-internals-expr-datetime-exprdatetimenamespace-year"]], "polars.internals.expr.list.ExprListNameSpace.arg_max": [[611, "polars-internals-expr-list-exprlistnamespace-arg-max"]], "polars.internals.expr.list.ExprListNameSpace.arg_min": [[612, "polars-internals-expr-list-exprlistnamespace-arg-min"]], "polars.internals.expr.list.ExprListNameSpace.concat": [[613, "polars-internals-expr-list-exprlistnamespace-concat"]], "polars.internals.expr.list.ExprListNameSpace.contains": [[614, "polars-internals-expr-list-exprlistnamespace-contains"]], "polars.internals.expr.list.ExprListNameSpace.diff": [[615, "polars-internals-expr-list-exprlistnamespace-diff"]], "polars.internals.expr.list.ExprListNameSpace.eval": [[616, "polars-internals-expr-list-exprlistnamespace-eval"]], "polars.internals.expr.list.ExprListNameSpace.first": [[617, "polars-internals-expr-list-exprlistnamespace-first"]], "polars.internals.expr.list.ExprListNameSpace.get": [[618, "polars-internals-expr-list-exprlistnamespace-get"]], "polars.internals.expr.list.ExprListNameSpace.head": [[619, "polars-internals-expr-list-exprlistnamespace-head"]], "polars.internals.expr.list.ExprListNameSpace.join": [[620, "polars-internals-expr-list-exprlistnamespace-join"]], "polars.internals.expr.list.ExprListNameSpace.last": [[621, "polars-internals-expr-list-exprlistnamespace-last"]], "polars.internals.expr.list.ExprListNameSpace.lengths": [[622, "polars-internals-expr-list-exprlistnamespace-lengths"]], "polars.internals.expr.list.ExprListNameSpace.max": [[623, "polars-internals-expr-list-exprlistnamespace-max"]], "polars.internals.expr.list.ExprListNameSpace.mean": [[624, "polars-internals-expr-list-exprlistnamespace-mean"]], "polars.internals.expr.list.ExprListNameSpace.min": [[625, "polars-internals-expr-list-exprlistnamespace-min"]], "polars.internals.expr.list.ExprListNameSpace.reverse": [[626, "polars-internals-expr-list-exprlistnamespace-reverse"]], "polars.internals.expr.list.ExprListNameSpace.shift": [[627, "polars-internals-expr-list-exprlistnamespace-shift"]], "polars.internals.expr.list.ExprListNameSpace.slice": [[628, "polars-internals-expr-list-exprlistnamespace-slice"]], "polars.internals.expr.list.ExprListNameSpace.sort": [[629, "polars-internals-expr-list-exprlistnamespace-sort"]], "polars.internals.expr.list.ExprListNameSpace.sum": [[630, "polars-internals-expr-list-exprlistnamespace-sum"]], "polars.internals.expr.list.ExprListNameSpace.tail": [[631, "polars-internals-expr-list-exprlistnamespace-tail"]], "polars.internals.expr.list.ExprListNameSpace.to_struct": [[632, "polars-internals-expr-list-exprlistnamespace-to-struct"]], "polars.internals.expr.list.ExprListNameSpace.unique": [[633, "polars-internals-expr-list-exprlistnamespace-unique"]], "polars.internals.expr.meta.ExprMetaNameSpace.output_name": [[634, "polars-internals-expr-meta-exprmetanamespace-output-name"]], "polars.internals.expr.meta.ExprMetaNameSpace.pop": [[635, "polars-internals-expr-meta-exprmetanamespace-pop"]], "polars.internals.expr.meta.ExprMetaNameSpace.root_names": [[636, "polars-internals-expr-meta-exprmetanamespace-root-names"]], "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases": [[637, "polars-internals-expr-meta-exprmetanamespace-undo-aliases"]], "polars.internals.expr.string.ExprStringNameSpace.concat": [[638, "polars-internals-expr-string-exprstringnamespace-concat"]], "polars.internals.expr.string.ExprStringNameSpace.contains": [[639, "polars-internals-expr-string-exprstringnamespace-contains"]], "polars.internals.expr.string.ExprStringNameSpace.count_match": [[640, "polars-internals-expr-string-exprstringnamespace-count-match"]], "polars.internals.expr.string.ExprStringNameSpace.decode": [[641, "polars-internals-expr-string-exprstringnamespace-decode"]], "polars.internals.expr.string.ExprStringNameSpace.encode": [[642, "polars-internals-expr-string-exprstringnamespace-encode"]], "polars.internals.expr.string.ExprStringNameSpace.ends_with": [[643, "polars-internals-expr-string-exprstringnamespace-ends-with"]], "polars.internals.expr.string.ExprStringNameSpace.extract": [[644, "polars-internals-expr-string-exprstringnamespace-extract"]], "polars.internals.expr.string.ExprStringNameSpace.extract_all": [[645, "polars-internals-expr-string-exprstringnamespace-extract-all"]], "polars.internals.expr.string.ExprStringNameSpace.json_path_match": [[646, "polars-internals-expr-string-exprstringnamespace-json-path-match"]], "polars.internals.expr.string.ExprStringNameSpace.lengths": [[647, "polars-internals-expr-string-exprstringnamespace-lengths"]], "polars.internals.expr.string.ExprStringNameSpace.ljust": [[648, "polars-internals-expr-string-exprstringnamespace-ljust"]], "polars.internals.expr.string.ExprStringNameSpace.lstrip": [[649, "polars-internals-expr-string-exprstringnamespace-lstrip"]], "polars.internals.expr.string.ExprStringNameSpace.n_chars": [[650, "polars-internals-expr-string-exprstringnamespace-n-chars"]], "polars.internals.expr.string.ExprStringNameSpace.replace": [[651, "polars-internals-expr-string-exprstringnamespace-replace"]], "polars.internals.expr.string.ExprStringNameSpace.replace_all": [[652, "polars-internals-expr-string-exprstringnamespace-replace-all"]], "polars.internals.expr.string.ExprStringNameSpace.rjust": [[653, "polars-internals-expr-string-exprstringnamespace-rjust"]], "polars.internals.expr.string.ExprStringNameSpace.rstrip": [[654, "polars-internals-expr-string-exprstringnamespace-rstrip"]], "polars.internals.expr.string.ExprStringNameSpace.slice": [[655, "polars-internals-expr-string-exprstringnamespace-slice"]], "polars.internals.expr.string.ExprStringNameSpace.split": [[656, "polars-internals-expr-string-exprstringnamespace-split"]], "polars.internals.expr.string.ExprStringNameSpace.split_exact": [[657, "polars-internals-expr-string-exprstringnamespace-split-exact"]], "polars.internals.expr.string.ExprStringNameSpace.splitn": [[658, "polars-internals-expr-string-exprstringnamespace-splitn"]], "polars.internals.expr.string.ExprStringNameSpace.starts_with": [[659, "polars-internals-expr-string-exprstringnamespace-starts-with"]], "polars.internals.expr.string.ExprStringNameSpace.strip": [[660, "polars-internals-expr-string-exprstringnamespace-strip"]], "polars.internals.expr.string.ExprStringNameSpace.strptime": [[661, "polars-internals-expr-string-exprstringnamespace-strptime"]], "polars.internals.expr.string.ExprStringNameSpace.to_lowercase": [[662, "polars-internals-expr-string-exprstringnamespace-to-lowercase"]], "polars.internals.expr.string.ExprStringNameSpace.to_uppercase": [[663, "polars-internals-expr-string-exprstringnamespace-to-uppercase"]], "polars.internals.expr.string.ExprStringNameSpace.zfill": [[664, "polars-internals-expr-string-exprstringnamespace-zfill"]], "polars.internals.expr.struct.ExprStructNameSpace.field": [[665, "polars-internals-expr-struct-exprstructnamespace-field"]], "polars.internals.expr.struct.ExprStructNameSpace.rename_fields": [[666, "polars-internals-expr-struct-exprstructnamespace-rename-fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[667, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[668, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[669, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[670, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.internals.series.categorical.CatNameSpace.set_ordering": [[671, "polars-internals-series-categorical-catnamespace-set-ordering"]], "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit": [[672, "polars-internals-series-datetime-datetimenamespace-cast-time-unit"]], "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone": [[673, "polars-internals-series-datetime-datetimenamespace-cast-time-zone"]], "polars.internals.series.datetime.DateTimeNameSpace.day": [[674, "polars-internals-series-datetime-datetimenamespace-day"]], "polars.internals.series.datetime.DateTimeNameSpace.days": [[675, "polars-internals-series-datetime-datetimenamespace-days"]], "polars.internals.series.datetime.DateTimeNameSpace.epoch": [[676, "polars-internals-series-datetime-datetimenamespace-epoch"]], "polars.internals.series.datetime.DateTimeNameSpace.hour": [[677, "polars-internals-series-datetime-datetimenamespace-hour"]], "polars.internals.series.datetime.DateTimeNameSpace.hours": [[678, "polars-internals-series-datetime-datetimenamespace-hours"]], "polars.internals.series.datetime.DateTimeNameSpace.iso_year": [[679, "polars-internals-series-datetime-datetimenamespace-iso-year"]], "polars.internals.series.datetime.DateTimeNameSpace.max": [[680, "polars-internals-series-datetime-datetimenamespace-max"]], "polars.internals.series.datetime.DateTimeNameSpace.mean": [[681, "polars-internals-series-datetime-datetimenamespace-mean"]], "polars.internals.series.datetime.DateTimeNameSpace.median": [[682, "polars-internals-series-datetime-datetimenamespace-median"]], "polars.internals.series.datetime.DateTimeNameSpace.microsecond": [[683, "polars-internals-series-datetime-datetimenamespace-microsecond"]], "polars.internals.series.datetime.DateTimeNameSpace.microseconds": [[684, "polars-internals-series-datetime-datetimenamespace-microseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.millisecond": [[685, "polars-internals-series-datetime-datetimenamespace-millisecond"]], "polars.internals.series.datetime.DateTimeNameSpace.milliseconds": [[686, "polars-internals-series-datetime-datetimenamespace-milliseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.min": [[687, "polars-internals-series-datetime-datetimenamespace-min"]], "polars.internals.series.datetime.DateTimeNameSpace.minute": [[688, "polars-internals-series-datetime-datetimenamespace-minute"]], "polars.internals.series.datetime.DateTimeNameSpace.minutes": [[689, "polars-internals-series-datetime-datetimenamespace-minutes"]], "polars.internals.series.datetime.DateTimeNameSpace.month": [[690, "polars-internals-series-datetime-datetimenamespace-month"]], "polars.internals.series.datetime.DateTimeNameSpace.nanosecond": [[691, "polars-internals-series-datetime-datetimenamespace-nanosecond"]], "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds": [[692, "polars-internals-series-datetime-datetimenamespace-nanoseconds"]], "polars.internals.series.datetime.DateTimeNameSpace.offset_by": [[693, "polars-internals-series-datetime-datetimenamespace-offset-by"]], "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day": [[694, "polars-internals-series-datetime-datetimenamespace-ordinal-day"]], "polars.internals.series.datetime.DateTimeNameSpace.quarter": [[695, "polars-internals-series-datetime-datetimenamespace-quarter"]], "polars.internals.series.datetime.DateTimeNameSpace.round": [[696, "polars-internals-series-datetime-datetimenamespace-round"]], "polars.internals.series.datetime.DateTimeNameSpace.second": [[697, "polars-internals-series-datetime-datetimenamespace-second"]], "polars.internals.series.datetime.DateTimeNameSpace.seconds": [[698, "polars-internals-series-datetime-datetimenamespace-seconds"]], "polars.internals.series.datetime.DateTimeNameSpace.strftime": [[699, "polars-internals-series-datetime-datetimenamespace-strftime"]], "polars.internals.series.datetime.DateTimeNameSpace.timestamp": [[700, "polars-internals-series-datetime-datetimenamespace-timestamp"]], "polars.internals.series.datetime.DateTimeNameSpace.truncate": [[701, "polars-internals-series-datetime-datetimenamespace-truncate"]], "polars.internals.series.datetime.DateTimeNameSpace.tz_localize": [[702, "polars-internals-series-datetime-datetimenamespace-tz-localize"]], "polars.internals.series.datetime.DateTimeNameSpace.week": [[703, "polars-internals-series-datetime-datetimenamespace-week"]], "polars.internals.series.datetime.DateTimeNameSpace.weekday": [[704, "polars-internals-series-datetime-datetimenamespace-weekday"]], "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit": [[705, "polars-internals-series-datetime-datetimenamespace-with-time-unit"]], "polars.internals.series.datetime.DateTimeNameSpace.year": [[706, "polars-internals-series-datetime-datetimenamespace-year"]], "polars.internals.series.list.ListNameSpace.arg_max": [[707, "polars-internals-series-list-listnamespace-arg-max"]], "polars.internals.series.list.ListNameSpace.arg_min": [[708, "polars-internals-series-list-listnamespace-arg-min"]], "polars.internals.series.list.ListNameSpace.concat": [[709, "polars-internals-series-list-listnamespace-concat"]], "polars.internals.series.list.ListNameSpace.contains": [[710, "polars-internals-series-list-listnamespace-contains"]], "polars.internals.series.list.ListNameSpace.diff": [[711, "polars-internals-series-list-listnamespace-diff"]], "polars.internals.series.list.ListNameSpace.eval": [[712, "polars-internals-series-list-listnamespace-eval"]], "polars.internals.series.list.ListNameSpace.first": [[713, "polars-internals-series-list-listnamespace-first"]], "polars.internals.series.list.ListNameSpace.get": [[714, "polars-internals-series-list-listnamespace-get"]], "polars.internals.series.list.ListNameSpace.head": [[715, "polars-internals-series-list-listnamespace-head"]], "polars.internals.series.list.ListNameSpace.join": [[716, "polars-internals-series-list-listnamespace-join"]], "polars.internals.series.list.ListNameSpace.last": [[717, "polars-internals-series-list-listnamespace-last"]], "polars.internals.series.list.ListNameSpace.lengths": [[718, "polars-internals-series-list-listnamespace-lengths"]], "polars.internals.series.list.ListNameSpace.max": [[719, "polars-internals-series-list-listnamespace-max"]], "polars.internals.series.list.ListNameSpace.mean": [[720, "polars-internals-series-list-listnamespace-mean"]], "polars.internals.series.list.ListNameSpace.min": [[721, "polars-internals-series-list-listnamespace-min"]], "polars.internals.series.list.ListNameSpace.reverse": [[722, "polars-internals-series-list-listnamespace-reverse"]], "polars.internals.series.list.ListNameSpace.shift": [[723, "polars-internals-series-list-listnamespace-shift"]], "polars.internals.series.list.ListNameSpace.slice": [[724, "polars-internals-series-list-listnamespace-slice"]], "polars.internals.series.list.ListNameSpace.sort": [[725, "polars-internals-series-list-listnamespace-sort"]], "polars.internals.series.list.ListNameSpace.sum": [[726, "polars-internals-series-list-listnamespace-sum"]], "polars.internals.series.list.ListNameSpace.tail": [[727, "polars-internals-series-list-listnamespace-tail"]], "polars.internals.series.list.ListNameSpace.to_struct": [[728, "polars-internals-series-list-listnamespace-to-struct"]], "polars.internals.series.list.ListNameSpace.unique": [[729, "polars-internals-series-list-listnamespace-unique"]], "polars.internals.series.string.StringNameSpace.concat": [[730, "polars-internals-series-string-stringnamespace-concat"]], "polars.internals.series.string.StringNameSpace.contains": [[731, "polars-internals-series-string-stringnamespace-contains"]], "polars.internals.series.string.StringNameSpace.count_match": [[732, "polars-internals-series-string-stringnamespace-count-match"]], "polars.internals.series.string.StringNameSpace.decode": [[733, "polars-internals-series-string-stringnamespace-decode"]], "polars.internals.series.string.StringNameSpace.encode": [[734, "polars-internals-series-string-stringnamespace-encode"]], "polars.internals.series.string.StringNameSpace.ends_with": [[735, "polars-internals-series-string-stringnamespace-ends-with"]], "polars.internals.series.string.StringNameSpace.extract": [[736, "polars-internals-series-string-stringnamespace-extract"]], "polars.internals.series.string.StringNameSpace.extract_all": [[737, "polars-internals-series-string-stringnamespace-extract-all"]], "polars.internals.series.string.StringNameSpace.json_path_match": [[738, "polars-internals-series-string-stringnamespace-json-path-match"]], "polars.internals.series.string.StringNameSpace.lengths": [[739, "polars-internals-series-string-stringnamespace-lengths"]], "polars.internals.series.string.StringNameSpace.ljust": [[740, "polars-internals-series-string-stringnamespace-ljust"]], "polars.internals.series.string.StringNameSpace.lstrip": [[741, "polars-internals-series-string-stringnamespace-lstrip"]], "polars.internals.series.string.StringNameSpace.n_chars": [[742, "polars-internals-series-string-stringnamespace-n-chars"]], "polars.internals.series.string.StringNameSpace.replace": [[743, "polars-internals-series-string-stringnamespace-replace"]], "polars.internals.series.string.StringNameSpace.replace_all": [[744, "polars-internals-series-string-stringnamespace-replace-all"]], "polars.internals.series.string.StringNameSpace.rjust": [[745, "polars-internals-series-string-stringnamespace-rjust"]], "polars.internals.series.string.StringNameSpace.rstrip": [[746, "polars-internals-series-string-stringnamespace-rstrip"]], "polars.internals.series.string.StringNameSpace.slice": [[747, "polars-internals-series-string-stringnamespace-slice"]], "polars.internals.series.string.StringNameSpace.split": [[748, "polars-internals-series-string-stringnamespace-split"]], "polars.internals.series.string.StringNameSpace.split_exact": [[749, "polars-internals-series-string-stringnamespace-split-exact"]], "polars.internals.series.string.StringNameSpace.splitn": [[750, "polars-internals-series-string-stringnamespace-splitn"]], "polars.internals.series.string.StringNameSpace.starts_with": [[751, "polars-internals-series-string-stringnamespace-starts-with"]], "polars.internals.series.string.StringNameSpace.strip": [[752, "polars-internals-series-string-stringnamespace-strip"]], "polars.internals.series.string.StringNameSpace.strptime": [[753, "polars-internals-series-string-stringnamespace-strptime"]], "polars.internals.series.string.StringNameSpace.to_lowercase": [[754, "polars-internals-series-string-stringnamespace-to-lowercase"]], "polars.internals.series.string.StringNameSpace.to_uppercase": [[755, "polars-internals-series-string-stringnamespace-to-uppercase"]], "polars.internals.series.string.StringNameSpace.zfill": [[756, "polars-internals-series-string-stringnamespace-zfill"]], "polars.internals.series.struct.StructNameSpace.field": [[757, "polars-internals-series-struct-structnamespace-field"]], "polars.internals.series.struct.StructNameSpace.fields": [[758, "polars-internals-series-struct-structnamespace-fields"]], "polars.internals.series.struct.StructNameSpace.rename_fields": [[759, "polars-internals-series-struct-structnamespace-rename-fields"]], "polars.internals.series.struct.StructNameSpace.to_frame": [[760, "polars-internals-series-struct-structnamespace-to-frame"]], "polars.list": [[761, "polars-list"]], "polars.lit": [[762, "polars-lit"]], "polars.map": [[763, "polars-map"]], "polars.max": [[764, "polars-max"]], "polars.mean": [[765, "polars-mean"]], "polars.median": [[766, "polars-median"]], "polars.min": [[767, "polars-min"]], "polars.n_unique": [[768, "polars-n-unique"]], "polars.ones": [[769, "polars-ones"]], "polars.pearson_corr": [[770, "polars-pearson-corr"]], "polars.quantile": [[771, "polars-quantile"]], "polars.read_avro": [[772, "polars-read-avro"]], "polars.read_csv": [[773, "polars-read-csv"]], "polars.read_csv_batched": [[774, "polars-read-csv-batched"]], "polars.read_excel": [[775, "polars-read-excel"]], "polars.read_ipc": [[776, "polars-read-ipc"]], "polars.read_ipc_schema": [[777, "polars-read-ipc-schema"]], "polars.read_json": [[778, "polars-read-json"]], "polars.read_ndjson": [[779, "polars-read-ndjson"]], "polars.read_parquet": [[780, "polars-read-parquet"]], "polars.read_parquet_schema": [[781, "polars-read-parquet-schema"]], "polars.read_sql": [[782, "polars-read-sql"]], "polars.repeat": [[783, "polars-repeat"]], "polars.scan_csv": [[784, "polars-scan-csv"]], "polars.scan_ds": [[785, "polars-scan-ds"]], "polars.scan_ipc": [[786, "polars-scan-ipc"]], "polars.scan_ndjson": [[787, "polars-scan-ndjson"]], "polars.scan_parquet": [[788, "polars-scan-parquet"]], "polars.select": [[789, "polars-select"]], "polars.show_versions": [[790, "polars-show-versions"]], "polars.spearman_rank_corr": [[791, "polars-spearman-rank-corr"]], "polars.std": [[792, "polars-std"]], "polars.struct": [[793, "polars-struct"]], "polars.sum": [[794, "polars-sum"]], "polars.tail": [[795, "polars-tail"]], "polars.testing.assert_frame_equal": [[796, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_equal": [[797, "polars-testing-assert-series-equal"]], "polars.testing.parametric.column": [[798, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[799, "polars-testing-parametric-columns"]], "polars.testing.parametric.dataframes": [[800, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.series": [[801, "polars-testing-parametric-series"]], "polars.threadpool_size": [[802, "polars-threadpool-size"]], "polars.toggle_string_cache": [[803, "polars-toggle-string-cache"]], "polars.var": [[804, "polars-var"]], "polars.when": [[805, "polars-when"]], "polars.zeros": [[806, "polars-zeros"]], "Config": [[807, "config"], [812, "config"]], "Config options (set/unset)": [[807, "config-options-set-unset"]], "Config load, save, and current state": [[807, "config-load-save-and-current-state"]], "DataFrame": [[808, "dataframe"]], "Constructor": [[808, "constructor"], [811, "constructor"], [816, "constructor"]], "Attributes": [[808, "attributes"], [811, "attributes"], [815, "attributes"], [816, "attributes"]], "Conversion": [[808, "conversion"], [812, "conversion"], [815, "conversion"], [816, "conversion"]], "Aggregation": [[808, "aggregation"], [811, "aggregation"], [815, "aggregation"], [816, "aggregation"]], "Descriptive stats": [[808, "descriptive-stats"], [815, "descriptive-stats"], [816, "descriptive-stats"]], "Computations": [[808, "computations"], [811, "computations"], [816, "computations"]], "Manipulation/ selection": [[808, "manipulation-selection"], [811, "manipulation-selection"], [815, "manipulation-selection"], [816, "manipulation-selection"]], "Apply": [[808, "apply"], [811, "apply"], [815, "apply"]], "Various": [[808, "various"], [811, "various"], [815, "various"], [816, "various"]], "GroupBy": [[808, "groupby"], [815, "groupby"]], "Pivot": [[808, "pivot"]], "Data Types": [[809, "data-types"]], "Numeric": [[809, "numeric"]], "Date / Time": [[809, "date-time"]], "Nested": [[809, "nested"]], "Other": [[809, "other"]], "Functions": [[809, "functions"], [811, "functions"], [812, "functions"]], "Exceptions": [[810, "exceptions"]], "Expressions": [[811, "expressions"]], "Boolean": [[811, "boolean"], [816, "boolean"]], "Column names": [[811, "column-names"]], "Window": [[811, "window"]], "TimeSeries": [[811, "timeseries"], [816, "timeseries"]], "Strings": [[811, "strings"], [816, "strings"]], "Lists": [[811, "lists"], [816, "lists"]], "Categories": [[811, "categories"], [816, "categories"]], "Struct": [[811, "struct"], [816, "struct"]], "Meta": [[811, "meta"]], "Eager/Lazy functions": [[812, "eager-lazy-functions"]], "Parallelization": [[812, "parallelization"]], "API reference": [[813, "api-reference"]], "Input/output": [[814, "input-output"]], "CSV": [[814, "csv"]], "Feather/ IPC": [[814, "feather-ipc"]], "Parquet": [[814, "parquet"]], "SQL": [[814, "sql"], [817, "sql"]], "JSON": [[814, "json"]], "AVRO": [[814, "avro"]], "Excel": [[814, "excel"]], "Datasets": [[814, "datasets"]], "BatchedCsvReader": [[814, "batchedcsvreader"]], "LazyFrame": [[815, "lazyframe"]], "Series": [[816, "series"]], "Methods": [[817, "methods"]], "Testing": [[818, "testing"]], "Asserts": [[818, "asserts"]], "Property-based testing": [[818, "property-based-testing"]], "Strategies": [[818, "strategies"]], "Strategy helpers": [[818, "strategy-helpers"]], "Utils": [[819, "utils"]]}, "indexentries": {"load() (polars.config class method)": [[1, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[2, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[3, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[4, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[5, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[6, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[7, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[8, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[9, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[10, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[11, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[12, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[13, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[14, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[15, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[16, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[17, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[18, "polars.Config.state"]], "dataframe (class in polars)": [[19, "polars.DataFrame"]], "__init__() (polars.dataframe method)": [[19, "polars.DataFrame.__init__"]], "apply() (polars.dataframe method)": [[20, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[21, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[22, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[23, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[24, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[25, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[26, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[27, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[28, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[29, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[30, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[31, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[32, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[33, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[34, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[35, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[36, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[37, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[38, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[39, "polars.DataFrame.get_columns"]], "groupby() (polars.dataframe method)": [[40, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[41, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[42, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[43, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[44, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[45, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[46, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[47, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[48, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[49, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[50, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[51, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[52, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[53, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[54, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[55, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[56, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[57, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[58, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[59, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[60, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[61, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[62, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[63, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[64, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[65, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[66, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[67, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[68, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[69, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[70, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[71, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[72, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[73, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[74, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[75, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[76, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[77, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[78, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[79, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[80, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[81, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[82, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[83, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[84, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[85, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[86, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[87, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[88, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[89, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[90, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[91, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[92, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[93, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[94, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[95, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[96, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[97, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[98, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[99, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[100, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[101, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[102, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[103, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[104, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[105, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[106, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[107, "polars.DataFrame.with_row_count"]], "write_avro() (polars.dataframe method)": [[108, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[109, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[110, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[111, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[112, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[113, "polars.DataFrame.write_parquet"]], "expr (class in polars)": [[114, "polars.Expr"]], "__init__() (polars.expr method)": [[114, "polars.Expr.__init__"]], "abs() (polars.expr method)": [[115, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[116, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[117, "polars.Expr.alias"]], "all() (polars.expr method)": [[118, "polars.Expr.all"]], "any() (polars.expr method)": [[119, "polars.Expr.any"]], "append() (polars.expr method)": [[120, "polars.Expr.append"]], "apply() (polars.expr method)": [[121, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[122, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[123, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[124, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[125, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[126, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[127, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[128, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[129, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[130, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[131, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[132, "polars.Expr.argsort"]], "arr (polars.expr property)": [[133, "polars.Expr.arr"]], "backward_fill() (polars.expr method)": [[134, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[135, "polars.Expr.cast"]], "cat (polars.expr property)": [[136, "polars.Expr.cat"]], "ceil() (polars.expr method)": [[137, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[138, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[139, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[140, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[141, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[142, "polars.Expr.cosh"]], "count() (polars.expr method)": [[143, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[144, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[145, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[146, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[147, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[148, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[149, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[150, "polars.Expr.diff"]], "dot() (polars.expr method)": [[151, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[152, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[153, "polars.Expr.drop_nulls"]], "dt (polars.expr property)": [[154, "polars.Expr.dt"]], "entropy() (polars.expr method)": [[155, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[156, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[157, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[158, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[159, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[160, "polars.Expr.exp"]], "explode() (polars.expr method)": [[161, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[162, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[163, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[164, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[165, "polars.Expr.filter"]], "first() (polars.expr method)": [[166, "polars.Expr.first"]], "flatten() (polars.expr method)": [[167, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[168, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[169, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[170, "polars.Expr.hash"]], "head() (polars.expr method)": [[171, "polars.Expr.head"]], "inspect() (polars.expr method)": [[172, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[173, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[174, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[175, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[176, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[177, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[178, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[179, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[180, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[181, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[182, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[183, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[184, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[185, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[186, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[187, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[188, "polars.Expr.last"]], "len() (polars.expr method)": [[189, "polars.Expr.len"]], "limit() (polars.expr method)": [[190, "polars.Expr.limit"]], "list() (polars.expr method)": [[191, "polars.Expr.list"]], "log() (polars.expr method)": [[192, "polars.Expr.log"]], "log10() (polars.expr method)": [[193, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[194, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[195, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[196, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[197, "polars.Expr.max"]], "mean() (polars.expr method)": [[198, "polars.Expr.mean"]], "median() (polars.expr method)": [[199, "polars.Expr.median"]], "min() (polars.expr method)": [[200, "polars.Expr.min"]], "mode() (polars.expr method)": [[201, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[202, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[203, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[204, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[205, "polars.Expr.null_count"]], "over() (polars.expr method)": [[206, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[207, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[208, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[209, "polars.Expr.prefix"]], "product() (polars.expr method)": [[210, "polars.Expr.product"]], "quantile() (polars.expr method)": [[211, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[212, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[213, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[214, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[215, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[216, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[217, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[218, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[219, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[220, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[221, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[222, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[223, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[224, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[225, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[226, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[227, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[228, "polars.Expr.round"]], "sample() (polars.expr method)": [[229, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[230, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[231, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[232, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[233, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[234, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[235, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[236, "polars.Expr.sign"]], "sin() (polars.expr method)": [[237, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[238, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[239, "polars.Expr.skew"]], "slice() (polars.expr method)": [[240, "polars.Expr.slice"]], "sort() (polars.expr method)": [[241, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[242, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[243, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[244, "polars.Expr.std"]], "str (polars.expr property)": [[245, "polars.Expr.str"]], "suffix() (polars.expr method)": [[246, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[247, "polars.Expr.sum"]], "tail() (polars.expr method)": [[248, "polars.Expr.tail"]], "take() (polars.expr method)": [[249, "polars.Expr.take"]], "take_every() (polars.expr method)": [[250, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[251, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[252, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[253, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[254, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[255, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[256, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[257, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[258, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[259, "polars.Expr.var"]], "where() (polars.expr method)": [[260, "polars.Expr.where"]], "cache() (polars.lazyframe method)": [[261, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[262, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[263, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[264, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[265, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[266, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[267, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[268, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[269, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[270, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[271, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[272, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[273, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[274, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[275, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[276, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[277, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[278, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[279, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[280, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[281, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[282, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[283, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[284, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[285, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[286, "polars.LazyFrame.last"]], "limit() (polars.lazyframe method)": [[287, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[288, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[289, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[290, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[291, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[292, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[293, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[294, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[295, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[296, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[297, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[298, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[299, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[300, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[301, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[302, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[303, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[304, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[305, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[306, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[307, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[308, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[309, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[310, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[311, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[312, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[313, "polars.LazyFrame.var"]], "with_column() (polars.lazyframe method)": [[314, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[315, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[316, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[317, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[318, "polars.LazyFrame.write_json"]], "execute() (polars.sqlcontext method)": [[319, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[320, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[321, "polars.SQLContext.register"]], "series (class in polars)": [[322, "polars.Series"]], "__init__() (polars.series method)": [[322, "polars.Series.__init__"]], "abs() (polars.series method)": [[323, "polars.Series.abs"]], "alias() (polars.series method)": [[324, "polars.Series.alias"]], "all() (polars.series method)": [[325, "polars.Series.all"]], "any() (polars.series method)": [[326, "polars.Series.any"]], "append() (polars.series method)": [[327, "polars.Series.append"]], "apply() (polars.series method)": [[328, "polars.Series.apply"]], "arccos() (polars.series method)": [[329, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[330, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[331, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[332, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[333, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[334, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[335, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[336, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[337, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[338, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[339, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[340, "polars.Series.argsort"]], "arr (polars.series property)": [[341, "polars.Series.arr"]], "cast() (polars.series method)": [[342, "polars.Series.cast"]], "cat (polars.series property)": [[343, "polars.Series.cat"]], "ceil() (polars.series method)": [[344, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[345, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[346, "polars.Series.cleared"]], "clip() (polars.series method)": [[347, "polars.Series.clip"]], "clip_max() (polars.series method)": [[348, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[349, "polars.Series.clip_min"]], "clone() (polars.series method)": [[350, "polars.Series.clone"]], "cos() (polars.series method)": [[351, "polars.Series.cos"]], "cosh() (polars.series method)": [[352, "polars.Series.cosh"]], "cummax() (polars.series method)": [[353, "polars.Series.cummax"]], "cummin() (polars.series method)": [[354, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[355, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[356, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[357, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[358, "polars.Series.describe"]], "diff() (polars.series method)": [[359, "polars.Series.diff"]], "dot() (polars.series method)": [[360, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[361, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[362, "polars.Series.drop_nulls"]], "dt (polars.series property)": [[363, "polars.Series.dt"]], "dtype (polars.series property)": [[364, "polars.Series.dtype"]], "entropy() (polars.series method)": [[365, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[366, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[367, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[368, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[369, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[370, "polars.Series.exp"]], "explode() (polars.series method)": [[371, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[372, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[373, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[374, "polars.Series.fill_null"]], "filter() (polars.series method)": [[375, "polars.Series.filter"]], "flags (polars.series property)": [[376, "polars.Series.flags"]], "floor() (polars.series method)": [[377, "polars.Series.floor"]], "has_validity() (polars.series method)": [[378, "polars.Series.has_validity"]], "hash() (polars.series method)": [[379, "polars.Series.hash"]], "head() (polars.series method)": [[380, "polars.Series.head"]], "inner_dtype (polars.series property)": [[381, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[382, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[383, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[384, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[385, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[386, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[387, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[388, "polars.Series.is_first"]], "is_float() (polars.series method)": [[389, "polars.Series.is_float"]], "is_in() (polars.series method)": [[390, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[391, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[392, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[393, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[394, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[395, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[396, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[397, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[398, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[399, "polars.Series.kurtosis"]], "len() (polars.series method)": [[400, "polars.Series.len"]], "limit() (polars.series method)": [[401, "polars.Series.limit"]], "log() (polars.series method)": [[402, "polars.Series.log"]], "log10() (polars.series method)": [[403, "polars.Series.log10"]], "max() (polars.series method)": [[404, "polars.Series.max"]], "mean() (polars.series method)": [[405, "polars.Series.mean"]], "median() (polars.series method)": [[406, "polars.Series.median"]], "min() (polars.series method)": [[407, "polars.Series.min"]], "mode() (polars.series method)": [[408, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[409, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[410, "polars.Series.n_unique"]], "name (polars.series property)": [[411, "polars.Series.name"]], "nan_max() (polars.series method)": [[412, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[413, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[414, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[415, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[416, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[417, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[418, "polars.Series.peak_min"]], "product() (polars.series method)": [[419, "polars.Series.product"]], "quantile() (polars.series method)": [[420, "polars.Series.quantile"]], "rank() (polars.series method)": [[421, "polars.Series.rank"]], "rechunk() (polars.series method)": [[422, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[423, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[424, "polars.Series.rename"]], "reshape() (polars.series method)": [[425, "polars.Series.reshape"]], "reverse() (polars.series method)": [[426, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[427, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[428, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[429, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[430, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[431, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[432, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[433, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[434, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[435, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[436, "polars.Series.rolling_var"]], "round() (polars.series method)": [[437, "polars.Series.round"]], "sample() (polars.series method)": [[438, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[439, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[440, "polars.Series.series_equal"]], "set() (polars.series method)": [[441, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[442, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[443, "polars.Series.set_sorted"]], "shape (polars.series property)": [[444, "polars.Series.shape"]], "shift() (polars.series method)": [[445, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[446, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[447, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[448, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[449, "polars.Series.shuffle"]], "sign() (polars.series method)": [[450, "polars.Series.sign"]], "sin() (polars.series method)": [[451, "polars.Series.sin"]], "sinh() (polars.series method)": [[452, "polars.Series.sinh"]], "skew() (polars.series method)": [[453, "polars.Series.skew"]], "slice() (polars.series method)": [[454, "polars.Series.slice"]], "sort() (polars.series method)": [[455, "polars.Series.sort"]], "sqrt() (polars.series method)": [[456, "polars.Series.sqrt"]], "std() (polars.series method)": [[457, "polars.Series.std"]], "str (polars.series property)": [[458, "polars.Series.str"]], "sum() (polars.series method)": [[459, "polars.Series.sum"]], "tail() (polars.series method)": [[460, "polars.Series.tail"]], "take() (polars.series method)": [[461, "polars.Series.take"]], "take_every() (polars.series method)": [[462, "polars.Series.take_every"]], "tan() (polars.series method)": [[463, "polars.Series.tan"]], "tanh() (polars.series method)": [[464, "polars.Series.tanh"]], "time_unit (polars.series property)": [[465, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[466, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[467, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[468, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[469, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[470, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[471, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[472, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[473, "polars.Series.top_k"]], "unique() (polars.series method)": [[474, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[475, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[476, "polars.Series.value_counts"]], "var() (polars.series method)": [[477, "polars.Series.var"]], "view() (polars.series method)": [[478, "polars.Series.view"]], "zip_with() (polars.series method)": [[479, "polars.Series.zip_with"]], "stringcache (class in polars)": [[480, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[480, "polars.StringCache.__init__"]], "all() (in module polars)": [[481, "polars.all"]], "any() (in module polars)": [[482, "polars.any"]], "apply() (in module polars)": [[483, "polars.apply"]], "arange() (in module polars)": [[484, "polars.arange"]], "arg_where() (in module polars)": [[485, "polars.arg_where"]], "argsort_by() (in module polars)": [[486, "polars.argsort_by"]], "avg() (in module polars)": [[487, "polars.avg"]], "coalesce() (in module polars)": [[488, "polars.coalesce"]], "col() (in module polars)": [[489, "polars.col"]], "collect_all() (in module polars)": [[490, "polars.collect_all"]], "concat() (in module polars)": [[491, "polars.concat"]], "concat_list() (in module polars)": [[492, "polars.concat_list"]], "concat_str() (in module polars)": [[493, "polars.concat_str"]], "count() (in module polars)": [[494, "polars.count"]], "cov() (in module polars)": [[495, "polars.cov"]], "cumfold() (in module polars)": [[496, "polars.cumfold"]], "cumsum() (in module polars)": [[497, "polars.cumsum"]], "cut() (in module polars)": [[498, "polars.cut"]], "binary (class in polars.datatypes)": [[499, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[499, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[500, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[500, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[501, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[501, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[502, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[502, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[503, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[503, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[504, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[504, "polars.datatypes.Datetime.__init__"]], "duration (class in polars.datatypes)": [[505, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[505, "polars.datatypes.Duration.__init__"]], "float32 (class in polars.datatypes)": [[506, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[506, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[507, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[507, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[508, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[508, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[509, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[509, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[510, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[510, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[511, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[511, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[512, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[512, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[513, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[513, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[514, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[514, "polars.datatypes.Object.__init__"]], "struct (class in polars.datatypes)": [[515, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[515, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[516, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[516, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[517, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[517, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[518, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[518, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[519, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[519, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[520, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[520, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[521, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[521, "polars.datatypes.Unknown.__init__"]], "utf8 (class in polars.datatypes)": [[522, "polars.datatypes.Utf8"]], "__init__() (polars.datatypes.utf8 method)": [[522, "polars.datatypes.Utf8.__init__"]], "get_idx_type() (in module polars.datatypes)": [[523, "polars.datatypes.get_idx_type"]], "date() (in module polars)": [[524, "polars.date"]], "date_range() (in module polars)": [[525, "polars.date_range"]], "datetime() (in module polars)": [[526, "polars.datetime"]], "duration() (in module polars)": [[527, "polars.duration"]], "element() (in module polars)": [[528, "polars.element"]], "arrowerror": [[529, "polars.exceptions.ArrowError"]], "computeerror": [[530, "polars.exceptions.ComputeError"]], "duplicateerror": [[531, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[532, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[533, "polars.exceptions.NoDataError"]], "norowsreturned": [[534, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[535, "polars.exceptions.NotFoundError"]], "panicexception": [[536, "polars.exceptions.PanicException"]], "rowsexception": [[537, "polars.exceptions.RowsException"]], "schemaerror": [[538, "polars.exceptions.SchemaError"]], "shapeerror": [[539, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[540, "polars.exceptions.TooManyRowsReturned"]], "exclude() (in module polars)": [[541, "polars.exclude"]], "first() (in module polars)": [[542, "polars.first"]], "fold() (in module polars)": [[543, "polars.fold"]], "format() (in module polars)": [[544, "polars.format"]], "from_arrow() (in module polars)": [[545, "polars.from_arrow"]], "from_dict() (in module polars)": [[546, "polars.from_dict"]], "from_dicts() (in module polars)": [[547, "polars.from_dicts"]], "from_numpy() (in module polars)": [[548, "polars.from_numpy"]], "from_pandas() (in module polars)": [[549, "polars.from_pandas"]], "from_records() (in module polars)": [[550, "polars.from_records"]], "get_dummies() (in module polars)": [[551, "polars.get_dummies"]], "groups() (in module polars)": [[552, "polars.groups"]], "head() (in module polars)": [[553, "polars.head"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[554, "polars.internals.batched.BatchedCsvReader.next_batches"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[555, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[556, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[557, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[558, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[559, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[560, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[561, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[562, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[563, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[564, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[565, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[566, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[567, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[568, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[569, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[570, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[571, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[572, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[573, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[574, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[575, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[576, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[577, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[578, "polars.internals.dataframe.pivot.PivotOps.sum"]], "set_ordering() (polars.internals.expr.categorical.exprcatnamespace method)": [[579, "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering"]], "cast_time_unit() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[580, "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit"]], "cast_time_zone() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[581, "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_zone"]], "day() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[582, "polars.internals.expr.datetime.ExprDateTimeNameSpace.day"]], "days() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[583, "polars.internals.expr.datetime.ExprDateTimeNameSpace.days"]], "epoch() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[584, "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch"]], "hour() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[585, "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour"]], "hours() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[586, "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours"]], "iso_year() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[587, "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year"]], "microsecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[588, "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond"]], "microseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[589, "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds"]], "millisecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[590, "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond"]], "milliseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[591, "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds"]], "minute() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[592, "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute"]], "minutes() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[593, "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes"]], "month() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[594, "polars.internals.expr.datetime.ExprDateTimeNameSpace.month"]], "nanosecond() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[595, "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond"]], "nanoseconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[596, "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds"]], "offset_by() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[597, "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by"]], "ordinal_day() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[598, "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day"]], "quarter() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[599, "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter"]], "round() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[600, "polars.internals.expr.datetime.ExprDateTimeNameSpace.round"]], "second() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[601, "polars.internals.expr.datetime.ExprDateTimeNameSpace.second"]], "seconds() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[602, "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds"]], "strftime() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[603, "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime"]], "timestamp() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[604, "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp"]], "truncate() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[605, "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate"]], "tz_localize() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[606, "polars.internals.expr.datetime.ExprDateTimeNameSpace.tz_localize"]], "week() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[607, "polars.internals.expr.datetime.ExprDateTimeNameSpace.week"]], "weekday() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[608, "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday"]], "with_time_unit() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[609, "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit"]], "year() (polars.internals.expr.datetime.exprdatetimenamespace method)": [[610, "polars.internals.expr.datetime.ExprDateTimeNameSpace.year"]], "arg_max() (polars.internals.expr.list.exprlistnamespace method)": [[611, "polars.internals.expr.list.ExprListNameSpace.arg_max"]], "arg_min() (polars.internals.expr.list.exprlistnamespace method)": [[612, "polars.internals.expr.list.ExprListNameSpace.arg_min"]], "concat() (polars.internals.expr.list.exprlistnamespace method)": [[613, "polars.internals.expr.list.ExprListNameSpace.concat"]], "contains() (polars.internals.expr.list.exprlistnamespace method)": [[614, "polars.internals.expr.list.ExprListNameSpace.contains"]], "diff() (polars.internals.expr.list.exprlistnamespace method)": [[615, "polars.internals.expr.list.ExprListNameSpace.diff"]], "eval() (polars.internals.expr.list.exprlistnamespace method)": [[616, "polars.internals.expr.list.ExprListNameSpace.eval"]], "first() (polars.internals.expr.list.exprlistnamespace method)": [[617, "polars.internals.expr.list.ExprListNameSpace.first"]], "get() (polars.internals.expr.list.exprlistnamespace method)": [[618, "polars.internals.expr.list.ExprListNameSpace.get"]], "head() (polars.internals.expr.list.exprlistnamespace method)": [[619, "polars.internals.expr.list.ExprListNameSpace.head"]], "join() (polars.internals.expr.list.exprlistnamespace method)": [[620, "polars.internals.expr.list.ExprListNameSpace.join"]], "last() (polars.internals.expr.list.exprlistnamespace method)": [[621, "polars.internals.expr.list.ExprListNameSpace.last"]], "lengths() (polars.internals.expr.list.exprlistnamespace method)": [[622, "polars.internals.expr.list.ExprListNameSpace.lengths"]], "max() (polars.internals.expr.list.exprlistnamespace method)": [[623, "polars.internals.expr.list.ExprListNameSpace.max"]], "mean() (polars.internals.expr.list.exprlistnamespace method)": [[624, "polars.internals.expr.list.ExprListNameSpace.mean"]], "min() (polars.internals.expr.list.exprlistnamespace method)": [[625, "polars.internals.expr.list.ExprListNameSpace.min"]], "reverse() (polars.internals.expr.list.exprlistnamespace method)": [[626, "polars.internals.expr.list.ExprListNameSpace.reverse"]], "shift() (polars.internals.expr.list.exprlistnamespace method)": [[627, "polars.internals.expr.list.ExprListNameSpace.shift"]], "slice() (polars.internals.expr.list.exprlistnamespace method)": [[628, "polars.internals.expr.list.ExprListNameSpace.slice"]], "sort() (polars.internals.expr.list.exprlistnamespace method)": [[629, "polars.internals.expr.list.ExprListNameSpace.sort"]], "sum() (polars.internals.expr.list.exprlistnamespace method)": [[630, "polars.internals.expr.list.ExprListNameSpace.sum"]], "tail() (polars.internals.expr.list.exprlistnamespace method)": [[631, "polars.internals.expr.list.ExprListNameSpace.tail"]], "to_struct() (polars.internals.expr.list.exprlistnamespace method)": [[632, "polars.internals.expr.list.ExprListNameSpace.to_struct"]], "unique() (polars.internals.expr.list.exprlistnamespace method)": [[633, "polars.internals.expr.list.ExprListNameSpace.unique"]], "output_name() (polars.internals.expr.meta.exprmetanamespace method)": [[634, "polars.internals.expr.meta.ExprMetaNameSpace.output_name"]], "pop() (polars.internals.expr.meta.exprmetanamespace method)": [[635, "polars.internals.expr.meta.ExprMetaNameSpace.pop"]], "root_names() (polars.internals.expr.meta.exprmetanamespace method)": [[636, "polars.internals.expr.meta.ExprMetaNameSpace.root_names"]], "undo_aliases() (polars.internals.expr.meta.exprmetanamespace method)": [[637, "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases"]], "concat() (polars.internals.expr.string.exprstringnamespace method)": [[638, "polars.internals.expr.string.ExprStringNameSpace.concat"]], "contains() (polars.internals.expr.string.exprstringnamespace method)": [[639, "polars.internals.expr.string.ExprStringNameSpace.contains"]], "count_match() (polars.internals.expr.string.exprstringnamespace method)": [[640, "polars.internals.expr.string.ExprStringNameSpace.count_match"]], "decode() (polars.internals.expr.string.exprstringnamespace method)": [[641, "polars.internals.expr.string.ExprStringNameSpace.decode"]], "encode() (polars.internals.expr.string.exprstringnamespace method)": [[642, "polars.internals.expr.string.ExprStringNameSpace.encode"]], "ends_with() (polars.internals.expr.string.exprstringnamespace method)": [[643, "polars.internals.expr.string.ExprStringNameSpace.ends_with"]], "extract() (polars.internals.expr.string.exprstringnamespace method)": [[644, "polars.internals.expr.string.ExprStringNameSpace.extract"]], "extract_all() (polars.internals.expr.string.exprstringnamespace method)": [[645, "polars.internals.expr.string.ExprStringNameSpace.extract_all"]], "json_path_match() (polars.internals.expr.string.exprstringnamespace method)": [[646, "polars.internals.expr.string.ExprStringNameSpace.json_path_match"]], "lengths() (polars.internals.expr.string.exprstringnamespace method)": [[647, "polars.internals.expr.string.ExprStringNameSpace.lengths"]], "ljust() (polars.internals.expr.string.exprstringnamespace method)": [[648, "polars.internals.expr.string.ExprStringNameSpace.ljust"]], "lstrip() (polars.internals.expr.string.exprstringnamespace method)": [[649, "polars.internals.expr.string.ExprStringNameSpace.lstrip"]], "n_chars() (polars.internals.expr.string.exprstringnamespace method)": [[650, "polars.internals.expr.string.ExprStringNameSpace.n_chars"]], "replace() (polars.internals.expr.string.exprstringnamespace method)": [[651, "polars.internals.expr.string.ExprStringNameSpace.replace"]], "replace_all() (polars.internals.expr.string.exprstringnamespace method)": [[652, "polars.internals.expr.string.ExprStringNameSpace.replace_all"]], "rjust() (polars.internals.expr.string.exprstringnamespace method)": [[653, "polars.internals.expr.string.ExprStringNameSpace.rjust"]], "rstrip() (polars.internals.expr.string.exprstringnamespace method)": [[654, "polars.internals.expr.string.ExprStringNameSpace.rstrip"]], "slice() (polars.internals.expr.string.exprstringnamespace method)": [[655, "polars.internals.expr.string.ExprStringNameSpace.slice"]], "split() (polars.internals.expr.string.exprstringnamespace method)": [[656, "polars.internals.expr.string.ExprStringNameSpace.split"]], "split_exact() (polars.internals.expr.string.exprstringnamespace method)": [[657, "polars.internals.expr.string.ExprStringNameSpace.split_exact"]], "splitn() (polars.internals.expr.string.exprstringnamespace method)": [[658, "polars.internals.expr.string.ExprStringNameSpace.splitn"]], "starts_with() (polars.internals.expr.string.exprstringnamespace method)": [[659, "polars.internals.expr.string.ExprStringNameSpace.starts_with"]], "strip() (polars.internals.expr.string.exprstringnamespace method)": [[660, "polars.internals.expr.string.ExprStringNameSpace.strip"]], "strptime() (polars.internals.expr.string.exprstringnamespace method)": [[661, "polars.internals.expr.string.ExprStringNameSpace.strptime"]], "to_lowercase() (polars.internals.expr.string.exprstringnamespace method)": [[662, "polars.internals.expr.string.ExprStringNameSpace.to_lowercase"]], "to_uppercase() (polars.internals.expr.string.exprstringnamespace method)": [[663, "polars.internals.expr.string.ExprStringNameSpace.to_uppercase"]], "zfill() (polars.internals.expr.string.exprstringnamespace method)": [[664, "polars.internals.expr.string.ExprStringNameSpace.zfill"]], "field() (polars.internals.expr.struct.exprstructnamespace method)": [[665, "polars.internals.expr.struct.ExprStructNameSpace.field"]], "rename_fields() (polars.internals.expr.struct.exprstructnamespace method)": [[666, "polars.internals.expr.struct.ExprStructNameSpace.rename_fields"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[667, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[668, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[669, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[670, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "set_ordering() (polars.internals.series.categorical.catnamespace method)": [[671, "polars.internals.series.categorical.CatNameSpace.set_ordering"]], "cast_time_unit() (polars.internals.series.datetime.datetimenamespace method)": [[672, "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit"]], "cast_time_zone() (polars.internals.series.datetime.datetimenamespace method)": [[673, "polars.internals.series.datetime.DateTimeNameSpace.cast_time_zone"]], "day() (polars.internals.series.datetime.datetimenamespace method)": [[674, "polars.internals.series.datetime.DateTimeNameSpace.day"]], "days() (polars.internals.series.datetime.datetimenamespace method)": [[675, "polars.internals.series.datetime.DateTimeNameSpace.days"]], "epoch() (polars.internals.series.datetime.datetimenamespace method)": [[676, "polars.internals.series.datetime.DateTimeNameSpace.epoch"]], "hour() (polars.internals.series.datetime.datetimenamespace method)": [[677, "polars.internals.series.datetime.DateTimeNameSpace.hour"]], "hours() (polars.internals.series.datetime.datetimenamespace method)": [[678, "polars.internals.series.datetime.DateTimeNameSpace.hours"]], "iso_year() (polars.internals.series.datetime.datetimenamespace method)": [[679, "polars.internals.series.datetime.DateTimeNameSpace.iso_year"]], "max() (polars.internals.series.datetime.datetimenamespace method)": [[680, "polars.internals.series.datetime.DateTimeNameSpace.max"]], "mean() (polars.internals.series.datetime.datetimenamespace method)": [[681, "polars.internals.series.datetime.DateTimeNameSpace.mean"]], "median() (polars.internals.series.datetime.datetimenamespace method)": [[682, "polars.internals.series.datetime.DateTimeNameSpace.median"]], "microsecond() (polars.internals.series.datetime.datetimenamespace method)": [[683, "polars.internals.series.datetime.DateTimeNameSpace.microsecond"]], "microseconds() (polars.internals.series.datetime.datetimenamespace method)": [[684, "polars.internals.series.datetime.DateTimeNameSpace.microseconds"]], "millisecond() (polars.internals.series.datetime.datetimenamespace method)": [[685, "polars.internals.series.datetime.DateTimeNameSpace.millisecond"]], "milliseconds() (polars.internals.series.datetime.datetimenamespace method)": [[686, "polars.internals.series.datetime.DateTimeNameSpace.milliseconds"]], "min() (polars.internals.series.datetime.datetimenamespace method)": [[687, "polars.internals.series.datetime.DateTimeNameSpace.min"]], "minute() (polars.internals.series.datetime.datetimenamespace method)": [[688, "polars.internals.series.datetime.DateTimeNameSpace.minute"]], "minutes() (polars.internals.series.datetime.datetimenamespace method)": [[689, "polars.internals.series.datetime.DateTimeNameSpace.minutes"]], "month() (polars.internals.series.datetime.datetimenamespace method)": [[690, "polars.internals.series.datetime.DateTimeNameSpace.month"]], "nanosecond() (polars.internals.series.datetime.datetimenamespace method)": [[691, "polars.internals.series.datetime.DateTimeNameSpace.nanosecond"]], "nanoseconds() (polars.internals.series.datetime.datetimenamespace method)": [[692, "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds"]], "offset_by() (polars.internals.series.datetime.datetimenamespace method)": [[693, "polars.internals.series.datetime.DateTimeNameSpace.offset_by"]], "ordinal_day() (polars.internals.series.datetime.datetimenamespace method)": [[694, "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day"]], "quarter() (polars.internals.series.datetime.datetimenamespace method)": [[695, "polars.internals.series.datetime.DateTimeNameSpace.quarter"]], "round() (polars.internals.series.datetime.datetimenamespace method)": [[696, "polars.internals.series.datetime.DateTimeNameSpace.round"]], "second() (polars.internals.series.datetime.datetimenamespace method)": [[697, "polars.internals.series.datetime.DateTimeNameSpace.second"]], "seconds() (polars.internals.series.datetime.datetimenamespace method)": [[698, "polars.internals.series.datetime.DateTimeNameSpace.seconds"]], "strftime() (polars.internals.series.datetime.datetimenamespace method)": [[699, "polars.internals.series.datetime.DateTimeNameSpace.strftime"]], "timestamp() (polars.internals.series.datetime.datetimenamespace method)": [[700, "polars.internals.series.datetime.DateTimeNameSpace.timestamp"]], "truncate() (polars.internals.series.datetime.datetimenamespace method)": [[701, "polars.internals.series.datetime.DateTimeNameSpace.truncate"]], "tz_localize() (polars.internals.series.datetime.datetimenamespace method)": [[702, "polars.internals.series.datetime.DateTimeNameSpace.tz_localize"]], "week() (polars.internals.series.datetime.datetimenamespace method)": [[703, "polars.internals.series.datetime.DateTimeNameSpace.week"]], "weekday() (polars.internals.series.datetime.datetimenamespace method)": [[704, "polars.internals.series.datetime.DateTimeNameSpace.weekday"]], "with_time_unit() (polars.internals.series.datetime.datetimenamespace method)": [[705, "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit"]], "year() (polars.internals.series.datetime.datetimenamespace method)": [[706, "polars.internals.series.datetime.DateTimeNameSpace.year"]], "arg_max() (polars.internals.series.list.listnamespace method)": [[707, "polars.internals.series.list.ListNameSpace.arg_max"]], "arg_min() (polars.internals.series.list.listnamespace method)": [[708, "polars.internals.series.list.ListNameSpace.arg_min"]], "concat() (polars.internals.series.list.listnamespace method)": [[709, "polars.internals.series.list.ListNameSpace.concat"]], "contains() (polars.internals.series.list.listnamespace method)": [[710, "polars.internals.series.list.ListNameSpace.contains"]], "diff() (polars.internals.series.list.listnamespace method)": [[711, "polars.internals.series.list.ListNameSpace.diff"]], "eval() (polars.internals.series.list.listnamespace method)": [[712, "polars.internals.series.list.ListNameSpace.eval"]], "first() (polars.internals.series.list.listnamespace method)": [[713, "polars.internals.series.list.ListNameSpace.first"]], "get() (polars.internals.series.list.listnamespace method)": [[714, "polars.internals.series.list.ListNameSpace.get"]], "head() (polars.internals.series.list.listnamespace method)": [[715, "polars.internals.series.list.ListNameSpace.head"]], "join() (polars.internals.series.list.listnamespace method)": [[716, "polars.internals.series.list.ListNameSpace.join"]], "last() (polars.internals.series.list.listnamespace method)": [[717, "polars.internals.series.list.ListNameSpace.last"]], "lengths() (polars.internals.series.list.listnamespace method)": [[718, "polars.internals.series.list.ListNameSpace.lengths"]], "max() (polars.internals.series.list.listnamespace method)": [[719, "polars.internals.series.list.ListNameSpace.max"]], "mean() (polars.internals.series.list.listnamespace method)": [[720, "polars.internals.series.list.ListNameSpace.mean"]], "min() (polars.internals.series.list.listnamespace method)": [[721, "polars.internals.series.list.ListNameSpace.min"]], "reverse() (polars.internals.series.list.listnamespace method)": [[722, "polars.internals.series.list.ListNameSpace.reverse"]], "shift() (polars.internals.series.list.listnamespace method)": [[723, "polars.internals.series.list.ListNameSpace.shift"]], "slice() (polars.internals.series.list.listnamespace method)": [[724, "polars.internals.series.list.ListNameSpace.slice"]], "sort() (polars.internals.series.list.listnamespace method)": [[725, "polars.internals.series.list.ListNameSpace.sort"]], "sum() (polars.internals.series.list.listnamespace method)": [[726, "polars.internals.series.list.ListNameSpace.sum"]], "tail() (polars.internals.series.list.listnamespace method)": [[727, "polars.internals.series.list.ListNameSpace.tail"]], "to_struct() (polars.internals.series.list.listnamespace method)": [[728, "polars.internals.series.list.ListNameSpace.to_struct"]], "unique() (polars.internals.series.list.listnamespace method)": [[729, "polars.internals.series.list.ListNameSpace.unique"]], "concat() (polars.internals.series.string.stringnamespace method)": [[730, "polars.internals.series.string.StringNameSpace.concat"]], "contains() (polars.internals.series.string.stringnamespace method)": [[731, "polars.internals.series.string.StringNameSpace.contains"]], "count_match() (polars.internals.series.string.stringnamespace method)": [[732, "polars.internals.series.string.StringNameSpace.count_match"]], "decode() (polars.internals.series.string.stringnamespace method)": [[733, "polars.internals.series.string.StringNameSpace.decode"]], "encode() (polars.internals.series.string.stringnamespace method)": [[734, "polars.internals.series.string.StringNameSpace.encode"]], "ends_with() (polars.internals.series.string.stringnamespace method)": [[735, "polars.internals.series.string.StringNameSpace.ends_with"]], "extract() (polars.internals.series.string.stringnamespace method)": [[736, "polars.internals.series.string.StringNameSpace.extract"]], "extract_all() (polars.internals.series.string.stringnamespace method)": [[737, "polars.internals.series.string.StringNameSpace.extract_all"]], "json_path_match() (polars.internals.series.string.stringnamespace method)": [[738, "polars.internals.series.string.StringNameSpace.json_path_match"]], "lengths() (polars.internals.series.string.stringnamespace method)": [[739, "polars.internals.series.string.StringNameSpace.lengths"]], "ljust() (polars.internals.series.string.stringnamespace method)": [[740, "polars.internals.series.string.StringNameSpace.ljust"]], "lstrip() (polars.internals.series.string.stringnamespace method)": [[741, "polars.internals.series.string.StringNameSpace.lstrip"]], "n_chars() (polars.internals.series.string.stringnamespace method)": [[742, "polars.internals.series.string.StringNameSpace.n_chars"]], "replace() (polars.internals.series.string.stringnamespace method)": [[743, "polars.internals.series.string.StringNameSpace.replace"]], "replace_all() (polars.internals.series.string.stringnamespace method)": [[744, "polars.internals.series.string.StringNameSpace.replace_all"]], "rjust() (polars.internals.series.string.stringnamespace method)": [[745, "polars.internals.series.string.StringNameSpace.rjust"]], "rstrip() (polars.internals.series.string.stringnamespace method)": [[746, "polars.internals.series.string.StringNameSpace.rstrip"]], "slice() (polars.internals.series.string.stringnamespace method)": [[747, "polars.internals.series.string.StringNameSpace.slice"]], "split() (polars.internals.series.string.stringnamespace method)": [[748, "polars.internals.series.string.StringNameSpace.split"]], "split_exact() (polars.internals.series.string.stringnamespace method)": [[749, "polars.internals.series.string.StringNameSpace.split_exact"]], "splitn() (polars.internals.series.string.stringnamespace method)": [[750, "polars.internals.series.string.StringNameSpace.splitn"]], "starts_with() (polars.internals.series.string.stringnamespace method)": [[751, "polars.internals.series.string.StringNameSpace.starts_with"]], "strip() (polars.internals.series.string.stringnamespace method)": [[752, "polars.internals.series.string.StringNameSpace.strip"]], "strptime() (polars.internals.series.string.stringnamespace method)": [[753, "polars.internals.series.string.StringNameSpace.strptime"]], "to_lowercase() (polars.internals.series.string.stringnamespace method)": [[754, "polars.internals.series.string.StringNameSpace.to_lowercase"]], "to_uppercase() (polars.internals.series.string.stringnamespace method)": [[755, "polars.internals.series.string.StringNameSpace.to_uppercase"]], "zfill() (polars.internals.series.string.stringnamespace method)": [[756, "polars.internals.series.string.StringNameSpace.zfill"]], "field() (polars.internals.series.struct.structnamespace method)": [[757, "polars.internals.series.struct.StructNameSpace.field"]], "fields (polars.internals.series.struct.structnamespace property)": [[758, "polars.internals.series.struct.StructNameSpace.fields"]], "rename_fields() (polars.internals.series.struct.structnamespace method)": [[759, "polars.internals.series.struct.StructNameSpace.rename_fields"]], "to_frame() (polars.internals.series.struct.structnamespace method)": [[760, "polars.internals.series.struct.StructNameSpace.to_frame"]], "list() (in module polars)": [[761, "polars.list"]], "lit() (in module polars)": [[762, "polars.lit"]], "map() (in module polars)": [[763, "polars.map"]], "max() (in module polars)": [[764, "polars.max"]], "mean() (in module polars)": [[765, "polars.mean"]], "median() (in module polars)": [[766, "polars.median"]], "min() (in module polars)": [[767, "polars.min"]], "n_unique() (in module polars)": [[768, "polars.n_unique"]], "ones() (in module polars)": [[769, "polars.ones"]], "pearson_corr() (in module polars)": [[770, "polars.pearson_corr"]], "quantile() (in module polars)": [[771, "polars.quantile"]], "read_avro() (in module polars)": [[772, "polars.read_avro"]], "read_csv() (in module polars)": [[773, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[774, "polars.read_csv_batched"]], "read_excel() (in module polars)": [[775, "polars.read_excel"]], "read_ipc() (in module polars)": [[776, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[777, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[778, "polars.read_json"]], "read_ndjson() (in module polars)": [[779, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[780, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[781, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[782, "polars.read_sql"]], "repeat() (in module polars)": [[783, "polars.repeat"]], "scan_csv() (in module polars)": [[784, "polars.scan_csv"]], "scan_ds() (in module polars)": [[785, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[786, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[787, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[788, "polars.scan_parquet"]], "select() (in module polars)": [[789, "polars.select"]], "show_versions() (in module polars)": [[790, "polars.show_versions"]], "spearman_rank_corr() (in module polars)": [[791, "polars.spearman_rank_corr"]], "std() (in module polars)": [[792, "polars.std"]], "struct() (in module polars)": [[793, "polars.struct"]], "sum() (in module polars)": [[794, "polars.sum"]], "tail() (in module polars)": [[795, "polars.tail"]], "assert_frame_equal() (in module polars.testing)": [[796, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[797, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[798, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[798, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[799, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[800, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[801, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[802, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[803, "polars.toggle_string_cache"]], "var() (in module polars)": [[804, "polars.var"]], "when() (in module polars)": [[805, "polars.when"]], "zeros() (in module polars)": [[806, "polars.zeros"]], "lazyframe (class in polars)": [[815, "polars.LazyFrame"]], "sqlcontext (class in polars)": [[817, "polars.SQLContext"]]}})